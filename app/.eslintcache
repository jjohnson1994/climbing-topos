[{"/Users/jamesjohnson/Projects/climbing-topos/app/src/index.js":"1","/Users/jamesjohnson/Projects/climbing-topos/app/src/reportWebVitals.js":"2","/Users/jamesjohnson/Projects/climbing-topos/app/src/App.tsx":"3","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Nav.tsx":"4","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/auth0-provider-with-history.tsx":"5","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/protected-route.tsx":"6","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/area/Area.tsx":"7","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crag/Crag.tsx":"8","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags/Crags.tsx":"9","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-area/CreateArea.tsx":"10","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-crag/CreateCrag.tsx":"11","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-route/CreateRoute.tsx":"12","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-topo/CreateTopo.tsx":"13","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/home/Home.tsx":"14","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/profile/Profile.tsx":"15","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/route/Route.tsx":"16","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/logs.ts":"17","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/crags.ts":"18","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/alerts.ts":"19","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/clipboard.ts":"20","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/pageTitle.ts":"21","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/geolocation.ts":"22","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/nominatim.ts":"23","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ButtonCopyCoordinates.tsx":"24","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/AreaRoutesTable.tsx":"25","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LoadingSpinner.tsx":"26","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToLogModal.tsx":"27","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImage.tsx":"28","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoCanvas.tsx":"29","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLogs.tsx":"30","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/index.ts":"31","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/queryString.ts":"32","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/svg.ts":"33","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Modal.tsx":"34","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImageStartTag.tsx":"35","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/areas.ts":"36","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/globals.ts":"37","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/topos.ts":"38","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/uploads.ts":"39","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/routes.ts":"40","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags-map/CragsMap.tsx":"41","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMap.tsx":"42","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/search/Search.tsx":"43","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResults.tsx":"44","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchBox.tsx":"45","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMapMarkerClusterGroup.jsx":"46","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultCrag.tsx":"47","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultArea.tsx":"48","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultRoute.tsx":"49","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/CragMap.tsx":"50","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RouteLogContext.tsx":"51"},{"size":500,"mtime":1610219466488,"results":"52","hashOfConfig":"53"},{"size":362,"mtime":1610219466497,"results":"54","hashOfConfig":"53"},{"size":3183,"mtime":1610792317210,"results":"55","hashOfConfig":"53"},{"size":2385,"mtime":1610816183776,"results":"56","hashOfConfig":"53"},{"size":859,"mtime":1610704502209,"results":"57","hashOfConfig":"53"},{"size":330,"mtime":1610219466466,"results":"58","hashOfConfig":"53"},{"size":6075,"mtime":1610817060393,"results":"59","hashOfConfig":"53"},{"size":7340,"mtime":1610818497330,"results":"60","hashOfConfig":"53"},{"size":3235,"mtime":1610797715657,"results":"61","hashOfConfig":"53"},{"size":9784,"mtime":1610565221429,"results":"62","hashOfConfig":"53"},{"size":14326,"mtime":1610547878650,"results":"63","hashOfConfig":"53"},{"size":9357,"mtime":1610644472911,"results":"64","hashOfConfig":"53"},{"size":4953,"mtime":1610356859836,"results":"65","hashOfConfig":"53"},{"size":1666,"mtime":1610747575263,"results":"66","hashOfConfig":"53"},{"size":1626,"mtime":1610796925982,"results":"67","hashOfConfig":"53"},{"size":4748,"mtime":1610725747420,"results":"68","hashOfConfig":"53"},{"size":2798,"mtime":1610709082095,"results":"69","hashOfConfig":"53"},{"size":1206,"mtime":1610797644834,"results":"70","hashOfConfig":"53"},{"size":1505,"mtime":1610219466477,"results":"71","hashOfConfig":"53"},{"size":99,"mtime":1610651067802,"results":"72","hashOfConfig":"53"},{"size":290,"mtime":1610448611947,"results":"73","hashOfConfig":"53"},{"size":369,"mtime":1610275063708,"results":"74","hashOfConfig":"53"},{"size":342,"mtime":1610219466479,"results":"75","hashOfConfig":"53"},{"size":994,"mtime":1610723259791,"results":"76","hashOfConfig":"53"},{"size":4270,"mtime":1610723748249,"results":"77","hashOfConfig":"53"},{"size":227,"mtime":1610219466469,"results":"78","hashOfConfig":"53"},{"size":11999,"mtime":1610549430321,"results":"79","hashOfConfig":"53"},{"size":3856,"mtime":1610542678563,"results":"80","hashOfConfig":"53"},{"size":7972,"mtime":1610819317657,"results":"81","hashOfConfig":"53"},{"size":1485,"mtime":1610785118684,"results":"82","hashOfConfig":"53"},{"size":246,"mtime":1610219466462,"results":"83","hashOfConfig":"53"},{"size":261,"mtime":1610219466486,"results":"84","hashOfConfig":"53"},{"size":1701,"mtime":1610219466487,"results":"85","hashOfConfig":"53"},{"size":1609,"mtime":1610219466470,"results":"86","hashOfConfig":"53"},{"size":1190,"mtime":1610219466476,"results":"87","hashOfConfig":"53"},{"size":857,"mtime":1610541443179,"results":"88","hashOfConfig":"53"},{"size":493,"mtime":1610278021922,"results":"89","hashOfConfig":"53"},{"size":1510,"mtime":1610356890305,"results":"90","hashOfConfig":"53"},{"size":313,"mtime":1610219466464,"results":"91","hashOfConfig":"53"},{"size":1047,"mtime":1610540528682,"results":"92","hashOfConfig":"53"},{"size":2151,"mtime":1610797723038,"results":"93","hashOfConfig":"53"},{"size":1748,"mtime":1610702798811,"results":"94","hashOfConfig":"53"},{"size":803,"mtime":1610798296904,"results":"95","hashOfConfig":"53"},{"size":736,"mtime":1610666691860,"results":"96","hashOfConfig":"53"},{"size":1844,"mtime":1610816211075,"results":"97","hashOfConfig":"53"},{"size":439,"mtime":1610663330991,"results":"98","hashOfConfig":"53"},{"size":684,"mtime":1610816014241,"results":"99","hashOfConfig":"53"},{"size":721,"mtime":1610816014244,"results":"100","hashOfConfig":"53"},{"size":734,"mtime":1610816014246,"results":"101","hashOfConfig":"53"},{"size":2910,"mtime":1610714327771,"results":"102","hashOfConfig":"53"},{"size":3967,"mtime":1610815677583,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"1xj99ui",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"115"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"115"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"115"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"115"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jamesjohnson/Projects/climbing-topos/app/src/index.js",[],["214","215"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/reportWebVitals.js",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/App.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Nav.tsx",["216"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/auth0-provider-with-history.tsx",[],["217","218"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/protected-route.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/area/Area.tsx",["219"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crag/Crag.tsx",["220","221","222","223","224"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags/Crags.tsx",["225"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-area/CreateArea.tsx",["226"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { NewAreaSchema } from \"core/schemas\";\nimport { Crag } from \"core/types\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport * as yup from \"yup\";\nimport { areas, crags } from \"../../api\";\nimport { areaTags as tags, rockTypes } from \"core/globals\";\nimport { popupError, popupSuccess } from \"../../helpers/alerts\";\nimport { getCurrentPosition } from '../../helpers/geolocation';\n\nconst schema = NewAreaSchema(yup);\n\nfunction CreateArea() {\n  const history = useHistory();\n  const { getAccessTokenSilently } = useAuth0();\n  const { cragSlug } = useParams<{ cragSlug: string }>();\n  const [locationLoading, setLocationLoading] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [crag, setCrag] = useState<Crag>();\n\n  const { register, setValue, handleSubmit, errors, watch } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n    defaultValues: {\n      access: \"unknown\",\n      accessDetails: \"\",\n      approachNotes: \"\",\n      description: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      rockType: \"\",\n      tags: [] as string[],\n      title: \"\",\n    }\n  });\n\n  const watchTags = watch(\"tags\", []);\n\n  useEffect(() => {\n    const getCrag = async () => {\n      try {\n        const token = await getAccessTokenSilently();\n        const newCrag = await crags.getCragBySlug(cragSlug, token);\n        setCrag(newCrag);\n      } catch(error) {\n        console.error(\"Error getting area crag\", error);\n      }\n    }\n\n    getCrag();\n  }, [cragSlug]);\n\n  const btnFindMeOnClick = async () => {\n    setLocationLoading(true);\n\n    try {\n      const location = await getCurrentPosition();\n      setValue(\"latitude\", `${location.coords.latitude}`);\n      setValue(\"longitude\", `${location.coords.longitude}`);\n    } catch (error) {\n      console.error('Error loading user location', error);\n    } finally {\n      setLocationLoading(false);\n    }\n  }\n\n  const formOnSubmit = handleSubmit(async (formData) => {\n    setLoading(true);\n\n    try {\n      if (!crag) {\n        throw new Error(\"Cannot create new route, crag not found\");\n      }\n\n      const token = await getAccessTokenSilently();\n      const { slug: areaSlug } = await areas.createArea(\n        {\n          ...formData,\n          country: crag.osmData.address.country,\n          countryCode: crag.osmData.address.country_code,\n          county: crag.osmData.address.county,\n          cragSlug,\n          cragTitle: crag.title,\n          state: crag.osmData.address.state,\n        },\n        token\n      );\n      await popupSuccess(\"Area Created!\");\n      history.push(`/crags/${cragSlug}/areas/${areaSlug}`);\n    } catch (error) {\n      console.error('Error creating crag', error);\n      popupError(\"Ahh, something has gone wrong...\");\n    } finally {\n      setLoading(false);\n    }\n  });\n\n  return (\n    <section className=\"section\">\n      <div className=\"container box\">\n        <form\n          onSubmit={ formOnSubmit }\n          style={{ display: \"flex\", flexDirection: \"column\" }}\n          autoComplete=\"off\"\n        >\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"title\">Title</label>\n            <div className=\"control\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"title\"\n                ref={ register }\n              />\n            </div>\n            <p className=\"help is-danger\">{ errors.title?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"description\">Description</label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                name=\"description\"\n                ref={ register }\n              ></textarea> \n            </div>\n            <p className=\"help is-danger\">{ errors.description?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"approachNotes\">Approach Notes</label>\n            <div className=\"control\">\n              <textarea\n                id=\"approachNotes\"\n                className=\"textarea\"\n                name=\"approachNotes\"\n                ref={ register }\n              ></textarea> \n            </div>\n            <p className=\"help is-danger\">{ errors.approachNotes?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Tags</label>\n            <div className=\"field is-grouped is-grouped-multiline\">\n              <div role=\"group\" className=\"tags\">\n                {tags.map(tag => (\n                  <label\n                    key={ tag }\n                    className={`\n                      tag\n                      ${watchTags?.includes(tag) ? \"is-primary\" : \"\"}\n                    `}\n                  >\n                    <input\n                      type=\"checkbox\"\n                      name=\"tags\"\n                      value={ tag }\n                      ref={ register }\n                      style={{ display: \"none\" }}\n                    />\n                    { tag }\n                  </label>\n                ))} \n              </div>\n            </div>\n            <p className=\"help is-danger\">{ (errors.tags as any)?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Rock Type</label>\n            <div className=\"control is-expanded\">\n              <div className=\"select is-fullwidth\">\n                <select name=\"rockType\" ref={ register }>\n                  {rockTypes.map(rockType => (\n                    <option key={ rockType } value={ rockType }>{ rockType }</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            <p className=\"help is-danger\">{ errors.rockType?.message }</p>\n          </div>\n\n\n          <div className=\"field\">\n            <div className=\"field\">\n              <label className=\"label\">Area Location</label>\n              <div className=\"field has-addons\">\n                <div className=\"control is-expanded has-icons-right\">\n                  <input\n                    disabled={ locationLoading }\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Latitude\"\n                    name=\"latitude\"\n                    ref={ register }\n                  />\n                </div>\n                <div className=\"control is-expanded has-icons-right\">\n                  <input\n                    disabled={ locationLoading }\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Logitude\"\n                    name=\"longitude\"\n                    ref={ register }\n                  />\n                </div>\n                <div className=\"control\">\n                  <button\n                    type=\"button\"\n                    className={`\n                      button\n                      ${locationLoading ? \"is-loading\" : \"\"}\n                    `}\n                    onClick={ () => btnFindMeOnClick() }\n                  >\n                    <span className=\"icon\">\n                      <i className=\"fas fa-map-marker-alt\"></i>\n                    </span>\n                    <span>Find Me</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"help is-danger\">{ errors.latitude?.message }</div>\n            <div className=\"help is-danger\">{ errors.longitude?.message }</div>\n          </div>\n          \n          <div className=\"field\">\n            <label className=\"label\">Access</label>\n            <div className=\"control\">\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"unknown\"\n                  ref={ register }\n                />\n                Unknown\n              </label>\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"permitted\"\n                  ref={ register }\n                />\n                Permitted\n              </label>\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"restricted\"\n                  ref={ register }\n                />\n                Restricted\n              </label>\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"banned\"\n                  ref={ register }\n                />\n                Banned\n              </label>\n            </div>\n            <p className=\"help is-danger\"></p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"accessDetails\">Access Details</label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                name=\"accessDetails\"\n                ref={ register }\n              /> \n            </div>\n          </div>\n\n          <div className=\"field\">\n            <div className=\"field is-flex is-justified-end\">\n              <div className=\"control\">\n                <button type=\"submit\" className={`button is-primary ${loading ? \"is-loading\" : \"\"}`}>\n                  <span>Continue</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n}\n\nexport default CreateArea;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-crag/CreateCrag.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-route/CreateRoute.tsx",["227"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { NewRouteScheme } from \"core/schemas\";\nimport { Area, RouteDrawing } from \"core/types\";\nimport { gradingSystems } from \"core/globals\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from 'react-router-dom';\nimport * as yup from \"yup\";\nimport { areas, globals, routes, topos } from \"../../api\";\nimport TopoCanvas from \"../../components/TopoCanvas\";\nimport { popupError, popupSuccess } from \"../../helpers/alerts\";\n\nconst schema = NewRouteScheme(yup);\n\nfunction CreateRoute() {\n  const history = useHistory();\n  const { getAccessTokenSilently, isAuthenticated } = useAuth0();\n  const { areaSlug, cragSlug, topoSlug } = useParams<{ areaSlug: string; cragSlug: string, topoSlug: string }>();\n  const [routeTags, setRouteTags] = useState<string[]>([]);\n  const [routeTypes, setRouteTypes] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [area, setArea] = useState<Area | undefined>();\n  const [backgroundImageURL, setBackgroundImageURL] = useState(\"\");\n\n  const { register, getValues, setValue, handleSubmit, errors, watch } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n    defaultValues: {\n      areaSlug,\n      cragSlug,\n      description: \"\",\n      drawing: { path: [] },\n      grade: \"\",\n      gradingSystem: \"\",\n      rating: -1,\n      routeType: \"\",\n      tags: [] as string[],\n      title: \"\",\n      topoSlug,\n    }\n  });\n\n  const watchTags = watch(\"tags\");\n  const watchGradingSystem = watch(\"gradingSystem\", \"\");\n\n  useEffect(() => {\n    const doGetArea = async () => {\n      try {\n        const token = isAuthenticated\n          ? await getAccessTokenSilently()\n          : \"\";\n        const area = await areas.getArea(areaSlug, token);\n        setArea(area);\n      } catch (error) {\n        console.error(\"Error loading area\", error);\n        popupError(\"Oh dear, there was a problem loading this area\");\n      }\n    };\n\n    const doGetTopo = async () => {\n      const topo = await topos.getTopo(topoSlug);\n      setBackgroundImageURL(`${topo.image}`);\n    }\n\n    doGetArea();\n    doGetTopo();\n    doGetTags();\n    doGetRouteTypes();\n  }, [areaSlug, isAuthenticated, topoSlug]);\n\n  const doGetTags = async () => {\n    const routeTags = await globals.getRouteTags();\n    setRouteTags(routeTags);\n  }\n\n  const doGetRouteTypes = async () => {\n    const routeTypes = await globals.getRouteTypes();\n    setRouteTypes(routeTypes);\n  }\n\n  const getGradesFromGradingSystem = (gradingSystem: string) => {\n    const grades = gradingSystems?.find(_gradingSystem => _gradingSystem.title === gradingSystem)?.grades;\n    return grades;\n  }\n\n  const onDrawingChanged = (drawing: RouteDrawing) => {\n    setValue(\"drawing\", JSON.stringify(drawing));\n  }\n\n  const formOnSubmit = handleSubmit(async (formData) => {\n    try {\n      setLoading(true);\n\n      if (!area) {\n        throw new Error(\"Error creating route, area not found\");\n      }\n\n      const token = await getAccessTokenSilently();\n      const { routeSlug } = await routes.createRoute(\n        {\n          ...formData,\n          areaTitle: area.title,\n          country: area.country,\n          countryCode: area.countryCode,\n          county: area.county,\n          cragTitle: area.cragTitle,\n          latitude: area.latitude,\n          longitude: area.longitude,\n          rating: -1,\n          rockType: area.rockType,\n          state: area.state,\n        },\n        token\n      );\n      await popupSuccess(\"Route Created!\");\n      history.push(`/crags/${cragSlug}/areas/${areaSlug}#${routeSlug}`);\n    } catch (error) {\n      console.error('Error creating crag', error);\n      popupError(\"Ahh, something has gone wrong...\");\n    } finally {\n      setLoading(false);\n    }\n  });\n\n  return (\n    <>\n      <section className=\"section\">\n        <div className=\"container\">\n          <TopoCanvas\n            routes={ area?.routes?.filter(route => route.topoSlug === topoSlug) }\n            backgroundImageURL={ backgroundImageURL }\n            onDrawingChanged={ onDrawingChanged }\n          />\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container box\">\n          <form\n            onSubmit={ formOnSubmit }\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n            autoComplete=\"off\"\n          >\n            <input\n              className=\"is-hidden\"\n              name=\"cragSlug\"\n              defaultValue={ cragSlug }\n              ref={ register }\n            />\n            <input\n              className=\"is-hidden\"\n              name=\"areaSlug\"\n              defaultValue={ areaSlug }\n              ref={ register }\n            />\n            <input\n              className=\"is-hidden\"\n              name=\"topoSlug\"\n              defaultValue={ topoSlug }\n              ref={ register }\n            />\n            <input\n              className=\"is-hidden\"\n              name=\"drawing\"\n              ref={ register }\n            />\n            <div className=\"field\">\n              <label className=\"label\" htmlFor=\"title\">Title</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  name=\"title\"\n                  ref={ register }\n                />\n              </div>\n              <p className=\"help is-danger\">{ errors.title?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\" htmlFor=\"description\">Description</label>\n              <div className=\"control\">\n                <textarea\n                  className=\"textarea\"\n                  name=\"description\"\n                  ref={ register }\n                ></textarea> \n              </div>\n              <p className=\"help is-danger\">{ errors.description?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Tags</label>\n              <div className=\"field is-grouped is-grouped-multiline\">\n                <div role=\"group\" className=\"tags\">\n                  {routeTags.map(tag => (\n                    <label\n                      key={ tag }\n                      className={`\n                        tag\n                        ${watchTags?.includes(tag) ? \"is-primary\" : \"\"}\n                      `}\n                    >\n                      <input\n                        type=\"checkbox\"\n                        name=\"tags\"\n                        value={ tag }\n                        ref={ register }\n                        style={{ display: \"none\" }}\n                      />\n                      { tag }\n                    </label>\n                  ))} \n                </div>\n              </div>\n              <p className=\"help is-danger\">{ (errors.tags as any)?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Route Type</label>\n              <div className=\"control is-expanded\">\n                <div className=\"select is-fullwidth\">\n                  <select name=\"routeType\" ref={ register }>\n                    {routeTypes.map((routeType) => (\n                      <option key={ routeType } value={ routeType }>{ routeType }</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <p className=\"help is-danger\">{ errors.routeType?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Grading System</label>\n              <div className=\"control is-expanded\">\n                <div className=\"select is-fullwidth\">\n                  <select name=\"gradingSystem\" ref={ register }>\n                    {gradingSystems.map((gradingSystem) => (\n                      <option key={ gradingSystem.title } value={ gradingSystem.title }>{ gradingSystem.title }</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <p className=\"help is-danger\">{ errors.gradingSystem?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Grade</label>\n              <div className=\"contro is-expandedl\">\n                <div className=\"select is-fullwidth\">\n                  <select name=\"grade\" ref={ register }>\n                    {watchGradingSystem && getGradesFromGradingSystem(getValues(\"gradingSystem\"))?.map((grade) => (\n                      <option key={ grade } value={ grade }>{ grade }</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <p className=\"help is-danger\">{ errors.grade?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <div className=\"field is-flex is-justified-end\">\n                <div className=\"control\">\n                  <button\n                    className={ `button is-primary ${ loading ? \"is-loading\" : \"\" }` }\n                  >\n                    Create Route\n                  </button>\n                </div>\n              </div>\n            </div>\n          </form>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default CreateRoute;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-topo/CreateTopo.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/home/Home.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/profile/Profile.tsx",["228"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/route/Route.tsx",["229","230","231"],"import {useAuth0} from \"@auth0/auth0-react\";\nimport React, {useEffect, useState} from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\nimport {Route} from \"../../../../core/types\";\nimport {routes} from \"../../api\";\nimport RoutesAddToLogModal from \"../../components/RoutesAddToLogModal\";\nimport TopoImage from \"../../components/TopoImage\";\nimport {popupError} from \"../../helpers/alerts\";\nimport {usePageTitle} from \"../../helpers/pageTitle\";\n\n\nfunction RoutePage() {\n  const { getAccessTokenSilently, isAuthenticated, isLoading, loginWithRedirect } = useAuth0();\n  const { cragSlug, areaSlug, topoSlug, routeSlug } = useParams<{ cragSlug: string; areaSlug: string; topoSlug: string; routeSlug: string }>();\n  const [route, setRoute] = useState<Route>();\n  const [routeJustLogged, setRouteJustLogged] = useState<Boolean>(false); \n  const [showLogModal, setShowLogModal] = useState(false);\n  usePageTitle(route?.title);\n\n  useEffect(() => {\n    const doGetRoute = async () => {\n      try {\n        const token = isAuthenticated\n          ? await getAccessTokenSilently()\n          : \"\";\n        const newRoute = await routes.getRoute(token, cragSlug, areaSlug, topoSlug, routeSlug);\n        setRoute(newRoute);\n      } catch (error) {\n        console.error(\"Error loading route\", error);\n        popupError(\"Oh dear, there was a problem loading this route\");\n      }\n    }\n\n    if (isLoading === false) {\n      doGetRoute();\n    }\n  }, [routeSlug, isAuthenticated, isLoading]);\n\n  const btnDoneOnClick = () => {\n    setShowLogModal(true);\n  }\n\n  const onRouteLogged = () => {\n    setShowLogModal(false);\n    setRouteJustLogged(true);\n  }\n\n  return (\n    <>\n      { route ? (\n        <RoutesAddToLogModal\n          routes={ [route] as Route[] }\n          visible={ showLogModal } \n          onCancel={ () => setShowLogModal(false) }\n          onConfirm={ onRouteLogged }\n        />\n        ) : \"\"\n      }\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title is-spaced is-capitalized\">{ route?.title }</h1>\n          <h5 className=\"subtitle is-5\">\n            { route?.grade } <span> </span> { route?.routeType }\n          </h5>\n          <h5 className=\"subtitle is-5\">{ route?.description }</h5>\n          <div className=\"columns\">\n            <div className=\"column\">\n              <div role=\"group\" className=\"tags\">\n                {route?.tags.map(tag => (\n                  <label key={ tag } className=\"tag is-primary\">\n                    { tag }\n                  </label>\n                ))} \n              </div>\n            </div>\n            <div className=\"column is-flex is-justified-end\">\n              <div className=\"field has-addons\">\n                <div className=\"control\">\n                  <button className=\"button is-rounded\" onClick={ btnDoneOnClick }>\n                    { route?.userLogs.length || routeJustLogged\n                      ? (\n                        <>\n                          <span className=\"icon is-small\">\n                            <i className=\"fas fw fa-check\"></i>\n                          </span>\n                          <span>Done</span>\n                        </>\n                      )\n                      : (\n                        <>\n                          <span className=\"icon is-small\">\n                            <i className=\"fas fw fa-plus\"></i>\n                          </span>\n                          <span>Log Book</span>\n                        </>\n                      )\n                    }\n                  </button>\n                </div>\n                <div className=\"control\">\n                  <button className=\"button is-rounded\">\n                    <span className=\"icon is-small\">\n                      <i className=\"fas fw fa-list\"></i>\n                    </span>\n                    <span>Save to List</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className=\"is-hidden-tablet\">\n        { route?.drawing\n          ? <TopoImage\n              routes={[route, ...route.siblingRoutes]}\n              highlightedRouteSlug={ route.slug }\n              background={ `${route?.topo?.image}` }\n            />\n          : \"\"\n        }\n      </section>\n      <section className=\"section is-hidden-mobile\">\n        <div className=\"container box\">\n          { route?.drawing\n            ? <TopoImage\n                routes={[route, ...route.siblingRoutes]}\n                highlightedRouteSlug={ route.slug }\n                background={ `${route?.topo?.image}` }\n              />\n            : \"\"\n          }\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default RoutePage;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/logs.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/crags.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/alerts.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/clipboard.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/pageTitle.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/geolocation.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/nominatim.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ButtonCopyCoordinates.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/AreaRoutesTable.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LoadingSpinner.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToLogModal.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImage.tsx",["232"],"import React, {useEffect, useState} from \"react\";\nimport \"./TopoImage.css\";\nimport { SmoothPath } from \"../helpers/svg\";\nimport { Route, RouteDrawing } from \"../../../core/types\";\nimport TopoImageStartTag from \"./TopoImageStartTag\";\n\ninterface PropTypes {\n  routes: Route[];\n  background: string;\n  highlightedRouteSlug?: string;\n}\n\nfunction TopoImage({ routes, background, highlightedRouteSlug }: PropTypes) {\n  const [joinedRoutePaths, setJoinedRoutePaths] = useState<number[][][]>([]);\n  const [routeLabels, setRouteLabels] = useState<{ [key: string]: (string | number)[] }>({});\n\n  useEffect(() => {\n    const newJoinedRoutePaths = routes.map(route => {\n      return joinLinkedRoutes(route.drawing, routes);\n    });\n\n    setJoinedRoutePaths(newJoinedRoutePaths);\n  }, [routes]);\n\n  useEffect(() => {\n    const newRouteLabels = { ...routeLabels };\n\n    joinedRoutePaths.forEach((path, index) => {\n      const startX = Math.floor(path[0][0]);\n      const startY = Math.floor(path[0][1]);\n      const endX = Math.floor(path[path.length - 1][0]);\n      const endY = Math.floor(path[path.length - 1][1]);\n\n      newRouteLabels[`${startX},${startY}`] = Array.from(\n        new Set([\n          ...(newRouteLabels[`${startX},${startY}`] || []),\n          index + 1\n        ])\n      );\n\n      newRouteLabels[`${endX},${endY}`] = Array.from(\n        new Set([\n          ...(newRouteLabels[`${endX},${endY}`] || []),\n          index + 1\n        ])\n      );\n    });\n\n    setRouteLabels(newRouteLabels);\n  }, [joinedRoutePaths]);\n\n  const getRouteStrokeOpacity = (routeSlug: string) => {\n    if (highlightedRouteSlug && highlightedRouteSlug === routeSlug) {\n      return 1;\n    } else if (!highlightedRouteSlug) {\n      return 1;\n    }\n\n    return 0.5;\n  }\n\n  const joinLinkedRoutes = (\n    routeDrawing: RouteDrawing,\n    routes: Route[],\n  ) => {\n    let joinedPathPoints: number[][] = [];\n\n    if (routeDrawing.linkFrom?.routeSlug) {\n      const linkFromPath = routes.find(route => route.slug === routeDrawing!.linkFrom!.routeSlug)!.drawing.path;\n      const joinIndex = linkFromPath?.findIndex(([x, y]) => {\n        return Math.abs(x - routeDrawing!.linkFrom!.x) <= 5 && Math.abs(y - routeDrawing!.linkFrom!.y) <= 5;\n      });\n      const slicedPath = linkFromPath!.slice(0, joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    joinedPathPoints = [...joinedPathPoints, ...routeDrawing.path];\n\n    if (routeDrawing.linkTo?.routeSlug) {\n      const linkToPath = routes.find(route => route.slug === routeDrawing!.linkTo!.routeSlug)!.drawing.path;\n      const joinIndex = linkToPath?.findIndex(([x, y]) => {\n        return Math.abs(x - routeDrawing!.linkTo!.x) <= 5 && Math.abs(y - routeDrawing!.linkTo!.y) <= 5;\n      });\n      const slicedPath = linkToPath!.slice(joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    return joinedPathPoints;\n  }\n\n  return (\n    <div className=\"area-topo-image\">\n      <img src={ background } alt=\"topo\"/>\n      <div className=\"area-topo-image--canvas\">\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 1000 1000\">\n          {routes?.map((route) => (\n            <path\n              key={ route.slug }\n              d={ SmoothPath(joinLinkedRoutes(route.drawing, routes)) }\n              fill=\"transparent\"\n              stroke=\"yellow\"\n              strokeWidth=\"4\"\n              strokeOpacity={ getRouteStrokeOpacity(`${route.slug}`) }\n            />\n          ))}\n          {Object.entries(routeLabels).map(([ coords, routes ], index) => (\n            <TopoImageStartTag\n              key={ index }\n              content={ routes.join(\", \") }\n              x={ parseInt(coords.split(\",\")[0], 10) }\n              y={ parseInt(coords.split(\",\")[1], 10) }\n            />\n          ))}\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nexport default TopoImage;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoCanvas.tsx",["233"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLogs.tsx",["234"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/index.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/queryString.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/svg.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Modal.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImageStartTag.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/areas.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/globals.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/topos.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/uploads.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/routes.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags-map/CragsMap.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMap.tsx",["235","236"],"import { useEffect } from \"react\";\nimport { DateTime } from \"luxon\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css';\nimport \"leaflet.markercluster/dist/MarkerCluster.css\";\nimport \"leaflet.markercluster/dist/MarkerCluster.Default.css\";\n\nimport leaflet from \"leaflet\";\nimport \"leaflet.markercluster\";\nimport \"leaflet-defaulticon-compatibility\";\n\ninterface Props {\n  markers: leaflet.Marker[],\n  height?: string,\n  center?: [number, number],\n  zoom?: number\n}\n\nlet map: leaflet.Map;\n\nconst getTimeStamp = async () => {\n  const res = await fetch(\"https://tilecache.rainviewer.com/api/maps.json\");\n  const dates = await res.json();\n\n  return dates.pop();\n}\n\nfunction LeafletMap({ markers, height = \"600px\", center, zoom }: Props) {\n\n  useEffect(() => {\n    const initMap = async () => {\n      if (map?.off) {\n        map.off();\n        map.remove();\n      }\n\n      const tiles = leaflet.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxNativeZoom: 19,\n        maxZoom: 20,\n      });\n\n      // const timestamp = await getTimeStamp();\n      // const precipitationNow = leaflet.tileLayer(`https://tilecache.rainviewer.com/v2/radar/${timestamp}/256/{z}/{x}/{y}/2/1_1.png`, {\n      //   maxNativeZoom: 19,\n      //   maxZoom: 20,\n      // });\n\n      map = leaflet.map('map', {\n        layers: [tiles],\n        ...(center && { center }),\n        ...(zoom && { zoom })\n      });\n\n      if (!center && !zoom) {\n        map.fitWorld();\n      }\n\n      const markersLayer = leaflet.markerClusterGroup();\n\n      markers.forEach(marker => {\n        markersLayer.addLayer(marker);\n      });\n\n      map.addLayer(markersLayer);\n    }\n\n    initMap();\n  });\n\n  return <div id=\"map\" style={{ width: \"100%\", height }}></div>;\n}\n\nexport default LeafletMap;\n",["237","238"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/search/Search.tsx",["239"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResults.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchBox.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMapMarkerClusterGroup.jsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultCrag.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultArea.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultRoute.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/CragMap.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RouteLogContext.tsx",[],{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","severity":1,"message":"245","line":24,"column":9,"nodeType":"246","endLine":30,"endColumn":10},{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"247","severity":1,"message":"248","line":41,"column":6,"nodeType":"249","endLine":41,"endColumn":44,"suggestions":"250"},{"ruleId":"247","severity":1,"message":"248","line":43,"column":6,"nodeType":"249","endLine":43,"endColumn":44,"suggestions":"251"},{"ruleId":"244","severity":1,"message":"245","line":90,"column":19,"nodeType":"246","endLine":90,"endColumn":63},{"ruleId":"244","severity":1,"message":"245","line":93,"column":19,"nodeType":"246","endLine":93,"endColumn":62},{"ruleId":"244","severity":1,"message":"245","line":96,"column":19,"nodeType":"246","endLine":96,"endColumn":65},{"ruleId":"244","severity":1,"message":"245","line":99,"column":19,"nodeType":"246","endLine":99,"endColumn":60},{"ruleId":"247","severity":1,"message":"252","line":18,"column":6,"nodeType":"249","endLine":18,"endColumn":34,"suggestions":"253"},{"ruleId":"247","severity":1,"message":"248","line":54,"column":6,"nodeType":"249","endLine":54,"endColumn":16,"suggestions":"254"},{"ruleId":"247","severity":1,"message":"248","line":70,"column":6,"nodeType":"249","endLine":70,"endColumn":43,"suggestions":"255"},{"ruleId":"244","severity":1,"message":"245","line":37,"column":15,"nodeType":"246","endLine":37,"endColumn":57},{"ruleId":"256","severity":1,"message":"257","line":3,"column":9,"nodeType":"258","messageId":"259","endLine":3,"endColumn":13},{"ruleId":"256","severity":1,"message":"260","line":13,"column":63,"nodeType":"258","messageId":"259","endLine":13,"endColumn":80},{"ruleId":"247","severity":1,"message":"261","line":37,"column":6,"nodeType":"249","endLine":37,"endColumn":45,"suggestions":"262"},{"ruleId":"247","severity":1,"message":"263","line":50,"column":6,"nodeType":"249","endLine":50,"endColumn":24,"suggestions":"264"},{"ruleId":"247","severity":1,"message":"265","line":50,"column":6,"nodeType":"249","endLine":50,"endColumn":14,"suggestions":"266"},{"ruleId":"247","severity":1,"message":"248","line":27,"column":6,"nodeType":"249","endLine":27,"endColumn":34,"suggestions":"267"},{"ruleId":"256","severity":1,"message":"268","line":2,"column":10,"nodeType":"258","messageId":"259","endLine":2,"endColumn":18},{"ruleId":"256","severity":1,"message":"269","line":22,"column":7,"nodeType":"258","messageId":"259","endLine":22,"endColumn":19},{"ruleId":"240","replacedBy":"270"},{"ruleId":"242","replacedBy":"271"},{"ruleId":"256","severity":1,"message":"272","line":1,"column":8,"nodeType":"258","messageId":"259","endLine":1,"endColumn":13},"no-native-reassign",["273"],"no-negated-in-lhs",["274"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAccessTokenSilently'. Either include it or remove the dependency array.","ArrayExpression",["275"],["276"],"React Hook useEffect has a missing dependency: 'doGetCrags'. Either include it or remove the dependency array.",["277"],["278"],["279"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'loginWithRedirect' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'areaSlug', 'cragSlug', 'getAccessTokenSilently', and 'topoSlug'. Either include them or remove the dependency array.",["280"],"React Hook useEffect has a missing dependency: 'routeLabels'. Either include it or remove the dependency array.",["281"],"React Hook useEffect has a missing dependency: 'existingRoutes'. Either include it or remove the dependency array.",["282"],["283"],"'DateTime' is defined but never used.","'getTimeStamp' is assigned a value but never used.",["273"],["274"],"'Tippy' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},"Update the dependencies array to be: [areaSlug, getAccessTokenSilently, isAuthenticated, isLoading]",{"range":"302","text":"303"},"Update the dependencies array to be: [cragSlug, isLoading, isAuthenticated, getAccessTokenSilently]",{"range":"304","text":"305"},"Update the dependencies array to be: [isLoading, isAuthenticated, doGetCrags]",{"range":"306","text":"307"},"Update the dependencies array to be: [cragSlug, getAccessTokenSilently]",{"range":"308","text":"309"},"Update the dependencies array to be: [areaSlug, getAccessTokenSilently, isAuthenticated, topoSlug]",{"range":"310","text":"311"},"Update the dependencies array to be: [routeSlug, isAuthenticated, isLoading, getAccessTokenSilently, cragSlug, areaSlug, topoSlug]",{"range":"312","text":"313"},"Update the dependencies array to be: [joinedRoutePaths, routeLabels]",{"range":"314","text":"315"},"Update the dependencies array to be: [existingRoutes, routes]",{"range":"316","text":"317"},"Update the dependencies array to be: [isLoading, isAuthenticated, getAccessTokenSilently]",{"range":"318","text":"319"},[1432,1470],"[areaSlug, getAccessTokenSilently, isAuthenticated, isLoading]",[1499,1537],"[cragSlug, isLoading, isAuthenticated, getAccessTokenSilently]",[583,611],"[isLoading, isAuthenticated, doGetCrags]",[1701,1711],"[cragSlug, getAccessTokenSilently]",[2304,2341],"[areaSlug, getAccessTokenSilently, isAuthenticated, topoSlug]",[1444,1483],"[routeSlug, isAuthenticated, isLoading, getAccessTokenSilently, cragSlug, areaSlug, topoSlug]",[1500,1518],"[joinedRoutePaths, routeLabels]",[1838,1846],"[existingRoutes, routes]",[916,944],"[isLoading, isAuthenticated, getAccessTokenSilently]"]