[{"/Users/jamesjohnson/Projects/climbing-topos/app/src/index.js":"1","/Users/jamesjohnson/Projects/climbing-topos/app/src/reportWebVitals.js":"2","/Users/jamesjohnson/Projects/climbing-topos/app/src/App.tsx":"3","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Nav.tsx":"4","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/auth0-provider-with-history.tsx":"5","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/protected-route.tsx":"6","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/area/Area.tsx":"7","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crag/Crag.tsx":"8","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags/Crags.tsx":"9","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-area/CreateArea.tsx":"10","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-crag/CreateCrag.tsx":"11","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-route/CreateRoute.tsx":"12","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-topo/CreateTopo.tsx":"13","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/home/Home.tsx":"14","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/profile/Profile.tsx":"15","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/route/Route.tsx":"16","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/logs.ts":"17","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/crags.ts":"18","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/alerts.ts":"19","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/clipboard.ts":"20","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/pageTitle.ts":"21","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/geolocation.ts":"22","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/nominatim.ts":"23","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ButtonCopyCoordinates.tsx":"24","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/AreaRoutesTable.tsx":"25","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LoadingSpinner.tsx":"26","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToLogModal.tsx":"27","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImage.tsx":"28","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoCanvas.tsx":"29","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLogs.tsx":"30","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/index.ts":"31","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/queryString.ts":"32","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/svg.ts":"33","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Modal.tsx":"34","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImageStartTag.tsx":"35","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/areas.ts":"36","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/globals.ts":"37","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/topos.ts":"38","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/uploads.ts":"39","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/routes.ts":"40"},{"size":500,"mtime":1610219466488,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1610219466497,"results":"43","hashOfConfig":"42"},{"size":2161,"mtime":1610219466459,"results":"44","hashOfConfig":"42"},{"size":2204,"mtime":1610219466471,"results":"45","hashOfConfig":"42"},{"size":859,"mtime":1610219466465,"results":"46","hashOfConfig":"42"},{"size":330,"mtime":1610219466466,"results":"47","hashOfConfig":"42"},{"size":7252,"mtime":1610272385879,"results":"48","hashOfConfig":"42"},{"size":8937,"mtime":1610270898877,"results":"49","hashOfConfig":"42"},{"size":3272,"mtime":1610270898878,"results":"50","hashOfConfig":"42"},{"size":8967,"mtime":1610270898879,"results":"51","hashOfConfig":"42"},{"size":15286,"mtime":1610271414914,"results":"52","hashOfConfig":"42"},{"size":8635,"mtime":1610270898881,"results":"53","hashOfConfig":"42"},{"size":4648,"mtime":1610219466493,"results":"54","hashOfConfig":"42"},{"size":1682,"mtime":1610219466493,"results":"55","hashOfConfig":"42"},{"size":753,"mtime":1610219466495,"results":"56","hashOfConfig":"42"},{"size":4765,"mtime":1610270898882,"results":"57","hashOfConfig":"42"},{"size":2535,"mtime":1610279504733,"results":"58","hashOfConfig":"42"},{"size":1327,"mtime":1610276160873,"results":"59","hashOfConfig":"42"},{"size":1505,"mtime":1610219466477,"results":"60","hashOfConfig":"42"},{"size":99,"mtime":1610219466477,"results":"61","hashOfConfig":"42"},{"size":277,"mtime":1610219466480,"results":"62","hashOfConfig":"42"},{"size":369,"mtime":1610275063708,"results":"63","hashOfConfig":"42"},{"size":342,"mtime":1610219466479,"results":"64","hashOfConfig":"42"},{"size":966,"mtime":1610219466467,"results":"65","hashOfConfig":"42"},{"size":4302,"mtime":1610270898869,"results":"66","hashOfConfig":"42"},{"size":227,"mtime":1610219466469,"results":"67","hashOfConfig":"42"},{"size":10484,"mtime":1610280149420,"results":"68","hashOfConfig":"42"},{"size":3834,"mtime":1610270898875,"results":"69","hashOfConfig":"42"},{"size":7764,"mtime":1610270898874,"results":"70","hashOfConfig":"42"},{"size":1500,"mtime":1610270898871,"results":"71","hashOfConfig":"42"},{"size":246,"mtime":1610219466462,"results":"72","hashOfConfig":"42"},{"size":261,"mtime":1610219466486,"results":"73","hashOfConfig":"42"},{"size":1701,"mtime":1610219466487,"results":"74","hashOfConfig":"42"},{"size":1609,"mtime":1610219466470,"results":"75","hashOfConfig":"42"},{"size":1190,"mtime":1610219466476,"results":"76","hashOfConfig":"42"},{"size":859,"mtime":1610270898853,"results":"77","hashOfConfig":"42"},{"size":493,"mtime":1610278021922,"results":"78","hashOfConfig":"42"},{"size":1462,"mtime":1610270898867,"results":"79","hashOfConfig":"42"},{"size":313,"mtime":1610219466464,"results":"80","hashOfConfig":"42"},{"size":1041,"mtime":1610270898866,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"8wh8os",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"89"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"89"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"89"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"89"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"89"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"89"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"89"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"89"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"89"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"89"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"89"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"/Users/jamesjohnson/Projects/climbing-topos/app/src/index.js",[],["176","177"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/reportWebVitals.js",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/App.tsx",[],["178","179"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Nav.tsx",["180"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nfunction Nav() {\n  const [navBarMenuClass, setNavBarMenuClass] = useState(\"\");\n  const { isAuthenticated, loginWithRedirect } = useAuth0();\n\n  const btnBurgerMenuOnClick = () => {\n    if (navBarMenuClass === \"is-active\") {\n      setNavBarMenuClass(\"\");\n    } else {\n      setNavBarMenuClass(\"is-active\");\n    }\n  };\n\n  return (\n    <nav className=\"navbar has-shadow\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand\">\n        <Link className=\"navbar-item has-text-weight-medium\" to=\"/\">\n          ClimbingTopos.com\n        </Link>\n\n        <a\n          className=\"navbar-burger burger\"\n          aria-label=\"menu\"\n          aria-expanded=\"false\"\n          data-target=\"navbarBasicExample\"\n          onClick={ btnBurgerMenuOnClick }\n        >\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </a>\n      </div>\n\n      <div\n        id=\"navbarBasicExample\"\n        className={`navbar-menu ${navBarMenuClass}`}\n      >\n        <div className=\"navbar-start\">\n          <Link\n            className=\"navbar-item\"\n            to=\"/crags\"\n          >\n            Crags\n          </Link>\n          <Link\n            className=\"navbar-item\"\n            to=\"/crags-map\"\n          >\n            Map\n          </Link>\n        </div>\n\n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n          { isAuthenticated \n            ? <Link to=\"/profile\">\n                <button className=\"button\">\n                  <span className=\"icon\">\n                    <i className=\"fas fa-user\"></i>\n                  </span>\n                  <span>Profile</span>\n                </button>\n              </Link>\n            : <button className=\"button\" onClick={ loginWithRedirect }>\n                <span className=\"icon\">\n                  <i className=\"fas fa-user\"></i>\n                </span>\n                <span>Login</span>\n              </button>\n          }\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/auth0-provider-with-history.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/protected-route.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/area/Area.tsx",["181","182"],"import {useAuth0} from \"@auth0/auth0-react\";\nimport React, {useEffect, useState} from 'react';\nimport {Link, useParams} from 'react-router-dom';\nimport { AreaView, Route } from \"core/types\";\nimport {areas} from \"../../api\";\nimport {useLogRoutes} from '../../api/logs';\nimport AreaRoutesTable from \"../../components/AreaRoutesTable\";\nimport ButtonCopyCoordinates from \"../../components/ButtonCopyCoordinates\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport RoutesAddToLogModal from '../../components/RoutesAddToLogModal';\n// import ButtonCopyCoordinates from '@/components/ButtonCopyCoordinates.svelte';\n// import CragClimbsTable from \"@/components/crag/CragClimbsTable.svelte\";\nimport TopoImage from \"../../components/TopoImage\";\nimport {popupError, toastSuccess} from '../../helpers/alerts';\nimport {clipboardWriteText} from '../../helpers/clipboard';\nimport {usePageTitle} from \"../../helpers/pageTitle\";\n\nfunction Area() {\n  const { getAccessTokenSilently, isAuthenticated, isLoading, loginWithRedirect } = useAuth0();\n  const { \n    selectedRoutes,\n    isSelectingMultipleRoutes,\n    onInitSelectMultipleRoutes,\n    onRouteSelected,\n    onRouteDeselected\n  } = useLogRoutes();\n  const { areaSlug, cragSlug } = useParams<{ areaSlug: string; cragSlug: string }>();\n  const [area, setArea] = useState<AreaView>();\n  const [showLogModal, setShowLogModal] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  usePageTitle(area?.title);\n\n  useEffect(() => {\n    const doGetArea = async () => {\n      try {\n        setLoading(true);\n        const token = isAuthenticated\n          ? await getAccessTokenSilently()\n          : \"\";\n        const area = await areas.getArea(areaSlug, token);\n        setArea(area);\n      } catch (error) {\n        console.error(\"Error loading area\", error);\n        popupError(\"Oh dear, there was a problem loading this area\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isLoading === false) {\n      doGetArea();\n    }\n  }, [areaSlug, isAuthenticated, isLoading]);\n\n  const btnCoordsOnClick = async () => {\n    if (!area) return;\n\n    try {\n      await clipboardWriteText(`${area.latitude}, ${area.longitude}`);\n      toastSuccess('Coordinates have been saved to your clipboard');\n    } catch (error) {\n      console.error('Error saving area coords to clipboard', error);\n    }\n  }\n\n  const btnSaveMultipleToListOnClick = () => {\n    if (isAuthenticated === false) {\n      loginWithRedirect();\n    } else {\n      // TODO\n    }\n  }\n\n  const btnDoneMultipleOnClick = async () => {\n    if (isAuthenticated === false) {\n      loginWithRedirect();\n    } else {\n      setShowLogModal(true);\n    }\n  }\n\n  return (\n    <>\n      <RoutesAddToLogModal\n        routes={ area?.routes?.filter(route => selectedRoutes.includes(`${route.slug}`)) as Route[] }\n        visible={ showLogModal } \n        onCancel={ () => setShowLogModal(false) }\n        onConfirm={ () => setShowLogModal(false) }\n      />\n      { loading && (\n        <section className=\"section\">\n          <div className=\"container\">\n            <LoadingSpinner />\n          </div>\n        </section>\n      )}\n      <section className={`section ${ loading ? \"is-hidden\" : \"\" }`}>\n        <div className=\"container\">\n          <h1 className=\"title is-spaced is-capitalized\">{ area?.title }</h1>\n          <h5 className=\"subtitle\">{ area?.description }</h5>\n          <div className=\"is-flex is-justify-content-flex-end\">\n            <ButtonCopyCoordinates\n              latitude={ `${area?.latitude}` }\n              longitude={ `${area?.longitude}` }\n            />\n            <span className=\"mr-2\"></span>\n            <div className=\"buttons has-addons is-right\">\n              <Link\n                to={ `/crags/${cragSlug}/areas/${areaSlug}/create-topo` }\n                className=\"button is-rounded\"\n              >\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-plus\"></i>\n                </span>\n                <span>Add Topo</span>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {area?.topos && area?.topos.map((topo) => (\n        <>\n          <div className=\"is-hidden-tablet\">\n            <TopoImage\n              routes={ area.routes?.filter(route => route.topoSlug === topo.slug) }\n              background={ `${topo.image}` }\n            />\n          </div>\n          <section className=\"section\">\n            <div className=\"container\">\n              <div className=\"box block\" key={ topo.slug }>\n                <div className=\"columns\">\n                  <div className=\"column is-half-table is-two-thirds-desktop is-hidden-mobile\">\n                    <TopoImage\n                      routes={ area.routes?.filter(route => route.topoSlug === topo.slug) }\n                      background={ `${topo.image}` }\n                    />\n                  </div>\n                  <div className=\"column\">\n                    { area.routes?.filter(route => route.topoSlug === topo.slug).length ? (\n                      <AreaRoutesTable\n                        routes={ area.routes?.filter(route => route.topoSlug === topo.slug) }\n                        loggedRoutes={ area.userLogs }\n                        selectedRoutes={ selectedRoutes }\n                        isSelectingMultiple={ isSelectingMultipleRoutes }\n                        onInitSelectMultiple={ onInitSelectMultipleRoutes }\n                        onRouteSelected={ onRouteSelected }\n                        onRouteDeselected={ onRouteDeselected }\n                      />\n                    ) : \"\"}\n                    <div className=\"buttons is-centered\">\n                      <Link\n                        to={ `/crags/${cragSlug}/areas/${areaSlug}/topos/${topo.slug}/create-route` }\n                        className=\"button is-rounded\"\n                      >\n                        <span className=\"icon is-small\">\n                          <i className=\"fas fa-plus\"></i>\n                        </span>\n                        <span>Add Route</span>\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </>\n      ))}\n\n      {selectedRoutes.length \n        ? (\n          <nav\n            className=\"navbar has-shadow is-fixed-bottom\"\n            role=\"navigation\"\n          >\n            <div className=\"is-justify-content-flex-end navbar-item\" style={{  width: \"100%\"  }}>\n              <div className=\"buttons\">\n                <button className=\"button is-outlined\" onClick={ btnSaveMultipleToListOnClick }>\n                  <span className=\"icon\">\n                    <i className=\"fas fw fa-list\"></i>\n                  </span>\n                  <span>Save to List</span>\n                </button>\n                <button className=\"button is-primary\" onClick={ btnDoneMultipleOnClick }>\n                  <span className=\"icon\">\n                    <i className=\"fas fw fa-check\"></i>\n                  </span>\n                  <span>Done</span>\n                </button>\n              </div>\n            </div>\n          </nav>\n        )\n        : \"\"\n      }\n    </>\n  );\n}\n\nexport default Area;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crag/Crag.tsx",["183","184","185","186","187"],"import {useAuth0} from \"@auth0/auth0-react\";\nimport React, {useEffect, useState} from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\nimport {CragView, Route} from \"../../../../core/types\";\nimport {getCragBySlug} from \"../../api/crags\";\nimport {useLogRoutes} from \"../../api/logs\";\nimport AreaRoutesTable from \"../../components/AreaRoutesTable\";\nimport ButtonCopyCoordinates from \"../../components/ButtonCopyCoordinates\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport RoutesAddToLogModal from \"../../components/RoutesAddToLogModal\";\nimport {popupError} from \"../../helpers/alerts\";\nimport {usePageTitle} from \"../../helpers/pageTitle\";\n\n\nfunction Crag() {\n  const { getAccessTokenSilently, isAuthenticated, isLoading, loginWithRedirect } = useAuth0();\n  const { \n    selectedRoutes,\n    isSelectingMultipleRoutes,\n    onInitSelectMultipleRoutes,\n    onRouteSelected,\n    onRouteDeselected\n  } = useLogRoutes();\n  const { cragSlug } = useParams<{ cragSlug: string }>();\n  const [loading, setLoading] = useState(false);\n  const [crag, setCrag] = useState<CragView>();\n  const [activeTab, setActiveTab] = useState('routes');\n  const [showLogModal, setShowLogModal] = useState(false);\n\n  usePageTitle(crag?.title);\n\n  useEffect(() => {\n    const doGetCrag = async () => {\n      setLoading(true);\n\n      try {\n        const token = isAuthenticated\n          ? await getAccessTokenSilently()\n          : \"\";\n        const newCrag = await getCragBySlug(cragSlug, token);\n        setCrag(newCrag);\n      } catch (error) {\n        console.error(\"Error loading crag\", error);\n        popupError(\"There was an error loading this crag. It's 90% your fault\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isLoading === false ) {\n      doGetCrag();\n    }\n  }, [cragSlug, isLoading, isAuthenticated]);\n\n  const btnSaveMultipleToListOnClick = () => {\n    // TODO repetition with Area.tsx\n    if (isAuthenticated === false) {\n      loginWithRedirect();\n    } else {\n      // TODO\n    }\n  }\n\n  const btnDoneMultipleOnClick = async () => {\n    // TODO repetition with Area.tsx\n    if (isAuthenticated === false) {\n      loginWithRedirect();\n    } else {\n      setShowLogModal(true);\n    }\n  }\n\n  return (\n    <>\n      <RoutesAddToLogModal\n        routes={ crag?.routes?.filter(route => selectedRoutes.includes(`${route.slug}`)) as Route[] }\n        visible={ showLogModal } \n        onCancel={ () => setShowLogModal(false) }\n        onConfirm={ () => setShowLogModal(false) }\n      />\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title is-spaced is-capitalized\">{ crag?.title }</h1>\n          <h5 className=\"subtitle\">{ crag?.description }</h5>\n          <ButtonCopyCoordinates\n            latitude={ `${crag?.latitude}` }\n            longitude={ `${crag?.longitude}` }\n          />\n        </div>\n      </section>\n\n      <section className=\"section\">\n        <div className=\"tabs\">\n          <ul>\n            <li className={ activeTab === 'routes' ? 'is-active' : '' }>\n              <a onClick={ () => setActiveTab('routes') }>Routes</a>\n            </li>\n            <li className={ activeTab === 'areas' ? 'is-active' : '' }>\n              <a onClick={ () => setActiveTab('areas') }>Areas</a>\n            </li>\n            <li className={ activeTab === 'approach' ? 'is-active' : '' }>\n              <a onClick={ () => setActiveTab('approach') }>Approach</a>\n            </li>\n            <li className={ activeTab === 'map' ? 'is-active' : '' }>\n              <a onClick={ () => setActiveTab('map') }>Map</a>\n            </li>\n          </ul>\n        </div>\n        <div className=\"container\">\n          { loading && <LoadingSpinner /> }\n          <div className={`box ${ loading ? \"is-hidden\" : \"\"}`}>\n            <div\n              id=\"routes\"\n              className={`\n                tab-content\n                ${activeTab !== 'routes' ? 'is-hidden' : '' }\n              `}\n            >\n              { crag?.routes.length ? (\n                <AreaRoutesTable\n                  routes={ crag?.routes }\n                  loggedRoutes={ (crag && crag.userLogs) || [] }\n                  selectedRoutes={ selectedRoutes }\n                  isSelectingMultiple={ isSelectingMultipleRoutes }\n                  onInitSelectMultiple={ onInitSelectMultipleRoutes }\n                  onRouteSelected={ onRouteSelected }\n                  onRouteDeselected={ onRouteDeselected }\n                />\n              ) : (\n                <p><b>This crag doesn't have any routes yet</b><br/>To start adding routes: you must first create an area, then upload a topo image</p>\n              )}\n            </div>\n          \n            <div\n              id=\"areas\"\n              className={`\n                tab-content\n                ${activeTab !== 'areas' ? 'is-hidden' : ''}\n              `}\n            >\n              { crag?.areas.length ? (\n                <table className=\"table is-fullwidth\">\n                  <thead>\n                    <tr>\n                      <th>Title</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    { crag?.areas?.map(area => (\n                      <tr key={ area.slug }>\n                        <td>\n                          <Link\n                            to={ `/crags/${cragSlug}/areas/${area.slug}` }\n                            className=\"is-capitalized\"\n                          >\n                            { area.title }\n                          </Link>\n                        </td>\n                      </tr>\n                    )) }\n                  </tbody>\n                </table>\n              ) : (\n                <p><b>This crag doesn't have any areas yet</b><br/>Click below to start adding one</p>\n              )}\n              <div className=\"buttons is-centered\">\n                <a className=\"button is-rounded\" href={ `/crags/${cragSlug}/create-area` }>\n                  <span className=\"icon is-small\">\n                    <i className=\"fas fa-plus\"></i>\n                  </span>\n                  <span>Add Area</span>\n                </a>\n              </div>\n            </div>\n\n            <div\n              id=\"approach\"\n              className={`\n                tab-content\n                ${activeTab !== 'approach' ? 'is-hidden' : ''}\n              `}>\n              <div className=\"block\">\n                <h3 className=\"title\">Approach</h3>\n                {(crag?.approachNotes &&\n                  <p>{ crag?.approachNotes }</p>)\n                  ||\n                  <p>No approach details have been given. Hopefully that means it's an easy walk in 🤷‍♂️</p>\n                }\n              </div>\n              <hr />\n              <div className=\"block\">\n                <h3 className=\"title\">Parking</h3>\n                {crag?.carParks?.map((carPark, index) => (\n                  <React.Fragment key={ index }>\n                    <div className=\"is-flex\">\n                      <h4 className=\"title is-4 is-capitalized\">{ carPark.title }</h4>\n                      <span className=\"ml-2\"></span>\n                      <ButtonCopyCoordinates\n                        latitude={ carPark.latitude }\n                        longitude={ carPark.longitude }\n                      />\n                    </div>\n                    <p className={ carPark.description ? 'm-4' : '' }>\n                      { carPark.description ? carPark.description : '' }\n                    </p>\n                  </React.Fragment>\n                ))}\n              </div>\n            </div>\n\n            <div\n              id=\"map\"\n              className={`\n                tab-content\n                ${activeTab !== 'map' ? 'is-hidden' : ''}\n              `}\n            >\n              <div id=\"map\"></div>\n            </div>\n          </div>\n        </div>\n      </section>\n \n      { /** TODO repetition with Area.tsx */ }\n      {selectedRoutes.length \n        ? (\n          <nav\n            className=\"navbar has-shadow is-fixed-bottom\"\n            role=\"navigation\"\n          >\n            <div className=\"is-justify-content-flex-end navbar-item\" style={{  width: \"100%\"  }}>\n              <div className=\"buttons\">\n                <button className=\"button is-outlined\" onClick={ btnSaveMultipleToListOnClick }>\n                  <span className=\"icon\">\n                    <i className=\"fas fw fa-list\"></i>\n                  </span>\n                  <span>Save to List</span>\n                </button>\n                <button className=\"button is-primary\" onClick={ btnDoneMultipleOnClick }>\n                  <span className=\"icon\">\n                    <i className=\"fas fw fa-check\"></i>\n                  </span>\n                  <span>Done</span>\n                </button>\n              </div>\n            </div>\n          </nav>\n        )\n        : \"\"\n      }   </>\n  );\n};\n\nexport default Crag;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags/Crags.tsx",["188","189"],"import React, { useEffect, useState } from 'react';\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { Link } from 'react-router-dom';\n\nimport CragQuickActions from \"../../components/CragQuickActions\";\nimport { getCrags } from \"../../api/crags\";\nimport { CragView } from '../../../../core/types';\nimport LoadingSpinner from '../../components/LoadingSpinner';\n\nfunction Crags() {\n  const [crags, setCrags] = useState<CragView[]>([]);\n  const [loading, setLoading] = useState(false);\n  const { isAuthenticated, isLoading, getAccessTokenSilently } = useAuth0();\n\n  useEffect(() => {\n    if (isLoading === false) {\n      doGetCrags();\n    }\n  }, [isLoading, isAuthenticated]);\n\n  async function doGetCrags() {\n    try {\n      setLoading(true);\n      const token = isAuthenticated\n        ? await getAccessTokenSilently()\n        : \"\";\n      const crags = await getCrags(token).then(crags => crags.sort((cragA, cragB) => cragA.title > cragB.title ? 1 : -1));\n      setCrags(crags);\n    } catch (error) {\n      console.error('Error loading crags', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title\">Find a Crag</h1>\n          <div className=\"field is-grouped\">\n            <div className=\"control is-expanded has-icons-left\">\n              <span className=\"icon is-icon-left\">\n                <i className=\"fas fa-search\"></i>\n              </span>\n              <input\n                className=\"input is-rounded\"\n                type=\"text\"\n                placeholder=\"Search\"\n              />\n            </div>\n            <div className=\"control\">\n              <Link to=\"/create-crag\" className=\"button is-rounded\">\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-plus\"></i>\n                </span>\n                <span>Add Crag</span>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <table className=\"table is-hoverable is-fullwidth\">\n              <thead>\n                <tr>\n                  <td>Crag</td>\n                  <td>Routes</td>\n                  <td>Areas</td>\n                  <td>Ticks</td>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  crags.map(crag => (\n                    <tr key={ crag.slug }>\n                      <td>\n                        <Link \n                          className=\"is-capitalized\"\n                          to={`/crags/${crag.slug}`}\n                        >\n                          { crag.title }\n                        </Link>\n                      </td>\n                      <td><span>{ crag.routes.length }</span></td>\n                      <td><span>{ crag.areas.length } </span></td>\n                      <td><span>{ crag.logsCount }</span></td>\n                    </tr>\n                  ))\n                }\n              </tbody>\n              { loading && <LoadingSpinner /> }\n            </table>\n          </div>\n        </div>\n      </section>\n    </React.Fragment>\n  )\n}\n\nexport default Crags;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-area/CreateArea.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-crag/CreateCrag.tsx",["190"],"import {useAuth0} from \"@auth0/auth0-react\";\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport React, {useEffect, useState} from \"react\";\nimport {useFieldArray, useForm} from \"react-hook-form\";\nimport {useHistory} from \"react-router-dom\";\nimport * as yup from \"yup\";\nimport {crags, globals} from \"../../api\";\nimport {popupError, popupSuccess} from \"../../helpers/alerts\";\nimport {getCurrentPosition} from '../../helpers/geolocation';\nimport {reverseLookup} from '../../helpers/nominatim';\n\nconst schema = yup.object().shape({\n  title: yup.string().required(\"Required\"),\n  description: yup.string().required(\"Required\"),\n  tags: yup.array().min(1, \"Select at least 1\").of(\n    yup.string()\n  ),\n  latitude: yup.number().typeError(\"Latitiude must be a number\").moreThan(-90, \"Latitude must be a valid latitude\").lessThan(90, \"Must be a valid latitude\"),\n  longitude: yup.number().typeError(\"Longitude must be a number\").moreThan(-180, \"Longitude must be a valid longitude\").lessThan(180, \"Must be a valid longitude\"),\n  access: yup.string().required(),\n  carParks: yup.array().of(\n    yup.object().shape({\n      title: yup.string().required(\"Required\"),\n      latitude: yup.number().typeError(\"Latitude must be a number\").moreThan(-90, \"Latitude must be a valid latitude\").lessThan(90, \"Must be a valid latitude\"),\n      longitude: yup.number().typeError(\"Longitude must be a number\").moreThan(-180, \"Longitude must be a valid longitude\").lessThan(180, \"Must be a valid longitude\"),\n    })\n  ).required(\"Add at least 1\").min(1, \"Add at least 1\"),\n  accessLink: yup.string().url(\"Not a valid URL\").nullable(),\n});\n\ntype CarPark = {\n  title: string;\n  latitude: string;\n  longitude: string;\n  description: string;\n}\n\nfunction CreateCrag() {\n  const history = useHistory();\n  const { getAccessTokenSilently } = useAuth0();\n  const [carParkLocationLoadingIndex, setCarParkLocationLoadingIndex] = useState(-1);\n  const [cragTags, setCragTags] = useState<string[]>([]);\n  const [cragLocationLoading, setCragLocationLoading] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { register, control, setValue, handleSubmit, errors, watch } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      tags: [] as string[],\n      latitude: \"\",\n      longitude: \"\",\n      carParks: [{\n        title: \"\",\n        latitude: \"\",\n        longitude: \"\",\n        description: \"\"\n      }] as CarPark[],\n      access: \"unknown\",\n      accessLink: \"\",\n      accessDetails: \"\",\n      approachNotes: \"\"\n    }\n  });\n\n  const {\n    fields: carParks,\n    append: appendCarPark,\n    remove: removeCarPark,\n    insert: insertCarPark\n  } = useFieldArray({\n    control,\n    name: \"carParks\"\n  });\n\n  const watchTags = watch(\"tags\", []);\n\n  useEffect(() => {\n    doGetTags();\n  }, []);\n\n  const doGetTags = async () => {\n    const cragTags = await globals.getCragTags();\n    setCragTags(cragTags);\n  }\n\n  const btnCragLocationFindMeOnClick = async () => {\n    setCragLocationLoading(true);\n\n    try {\n      const location = await getCurrentPosition();\n      setValue(\"latitude\", `${location.coords.latitude}`);\n      setValue(\"longitude\", `${location.coords.longitude}`);\n    } catch (error) {\n      console.error('Error loading user location', error);\n    } finally {\n      setCragLocationLoading(false);\n    }\n  }\n\n  const getCragNominatim = async (latitude: string, longitude: string) => {\n    const osmData = await reverseLookup(latitude, longitude);\n    return osmData;\n  }\n\n  const btnAddCarParkOnClick = () => {\n    appendCarPark({\n      title: \"\",\n      latitude: \"\",\n      longitude: \"\"\n    });\n  }\n\n  const btnRemoveCarParkOnClick = (index: number) => {\n    removeCarPark(index);\n  }\n\n  const btnCarParkFindMeOnClick = async (index: number) => {\n    setCarParkLocationLoadingIndex(index);\n    const location = await getCurrentPosition();\n    const newCarPark = {\n      ...carParks[index],\n      latitude: `${location.coords.latitude}`,\n      longitude: `${location.coords.longitude}`,\n    };\n\n    removeCarPark(index);\n    insertCarPark(index, newCarPark);\n\n    setCarParkLocationLoadingIndex(-1);\n  }\n\n  const formOnSubmit = handleSubmit(async (formData) => {\n    try {\n      const token = await getAccessTokenSilently();\n      const osmData = await getCragNominatim(formData.latitude, formData.longitude);\n      const { slug } = await crags.createCrag({ ...formData, osmData }, token);\n      await popupSuccess(\"Crag Created!\");\n      history.push(`/crags/${slug}`);\n    } catch (error) {\n      console.error('Error creating crag', error);\n\n      if (error.error === \"Unable to geocode\") {\n        popupError(\"Could not find geolocation data! Check the Crag location coordinates are correct and try again\");\n      } else {\n        popupError(\"Ahh, something has gone wrong...\");\n      }\n    }\n  });\n\n  return (\n    <section className=\"section\">\n      <div className=\"container box\">\n        <form\n          onSubmit={ formOnSubmit }\n          style={{ display: \"flex\", flexDirection: \"column\" }}\n          autoComplete=\"off\"\n        >\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"title\">Title</label>\n            <div className=\"control\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"title\"\n                ref={ register }\n              />\n            </div>\n            <p className=\"help is-danger\">{ errors.title?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"description\">Description</label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                name=\"description\"\n                ref={ register }\n              ></textarea> \n            </div>\n            <p className=\"help is-danger\">{ errors.description?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"approachNotes\">Approach Notes</label>\n            <div className=\"control\">\n              <textarea\n                id=\"approachNotes\"\n                className=\"textarea\"\n                name=\"approachNotes\"\n                ref={ register }\n              ></textarea> \n            </div>\n            <p className=\"help is-danger\">{ errors.approachNotes?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Tags</label>\n            <div className=\"field is-grouped is-grouped-multiline\">\n              <div role=\"group\" className=\"tags\">\n                {cragTags.map(tag => (\n                  <label\n                    key={ tag }\n                    className={`\n                      tag\n                      ${watchTags?.includes(tag) ? \"is-primary\" : \"\"}\n                    `}\n                  >\n                    <input type=\"checkbox\" name=\"tags\" value={ tag } ref={ register } style={{ display: \"none\" }} />\n                    { tag }\n                  </label>\n                ))} \n              </div>\n            </div>\n            <p className=\"help is-danger\">{ (errors.tags as any)?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <div className=\"field\">\n              <label className=\"label\">Crag Location</label>\n              <div className=\"field has-addons\">\n                <div className=\"control is-expanded has-icons-right\">\n                  <input\n                    disabled={ cragLocationLoading }\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Latitude\"\n                    name=\"latitude\"\n                    ref={ register }\n                  />\n                </div>\n                <div className=\"control is-expanded has-icons-right\">\n                  <input\n                    disabled={ cragLocationLoading }\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Logitude\"\n                    name=\"longitude\"\n                    ref={ register }\n                  />\n                </div>\n                <div className=\"control\">\n                  <button\n                    type=\"button\"\n                    className={`\n                      button\n                      ${cragLocationLoading ? \"is-loading\" : \"\"}\n                    `}\n                    onClick={ () => btnCragLocationFindMeOnClick() }\n                  >\n                    <span className=\"icon\">\n                      <i className=\"fas fa-map-marker-alt\"></i>\n                    </span>\n                    <span>Find Me</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"help is-danger\">{ errors.latitude?.message }</div>\n            <div className=\"help is-danger\">{ errors.longitude?.message }</div>\n          </div>\n          \n          <div className=\"field\">\n            <label className=\"label\">Parking Location</label>\n            {carParks.map((_carPark, index) => (\n              <div className=\"field\" key={ index }>\n                <div className=\"field has-addons\">\n                  <div className=\"control is-expanded has-icons-right\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Name\"\n                      className=\"input\"\n                      name={`carParks[${index}].title`}\n                      ref={ register({}) }\n                    />\n                  </div>\n                  {carParks.length && (\n                    <div className=\"control\">\n                      <button\n                        type=\"button\"\n                        className=\"button is-outlined\"\n                        onClick={ () => btnRemoveCarParkOnClick(index) }\n                      >\n                        <span className=\"icon\">\n                          <i className=\"fas fa-trash-alt\"></i>\n                        </span>\n                      </button>\n                    </div>\n                  )}\n                </div>\n                <p className=\"help is-danger\">{ errors.carParks?.[index]?.title?.message }</p>\n                <div className=\"field has-addons\">\n                  <div className=\"control is-expanded has-icons-right\">\n                    <input\n                      className=\"input\"\n                      type=\"text\"\n                      placeholder=\"Latitude\"\n                      name={`carParks[${index}].latitude`}\n                      ref={ register }\n                    />\n                  </div>\n                  <div className=\"control is-expanded has-icons-right\">\n                    <input\n                      className=\"input\"\n                      type=\"text\"\n                      placeholder=\"Longitude\"\n                      name={`carParks[${index}].longitude`}\n                      ref={ register }\n                    />\n                  </div>\n                  <div className=\"control\">\n                    <button\n                      type=\"button\"\n                      className={`\n                        button\n                        ${carParkLocationLoadingIndex === index ? \"is-loading\" : \"\"}\n                      `}\n                      onClick={ () => btnCarParkFindMeOnClick(index) }\n                    >\n                      <span className=\"icon\">\n                        <i className=\"fas fa-map-marker-alt\"></i>\n                      </span>\n                      <span>Find Me</span>\n                    </button>\n                  </div>\n                  <div className=\"help is-danger\">{ errors.carParks?.[index]?.latitude?.message }</div>\n                  <div className=\"help is-danger\">{ errors.carParks?.[index]?.longitude?.message }</div>\n                </div>\n                <div className=\"field\">\n                  <div className=\"control\">\n                    <textarea\n                      placeholder=\"Description\"\n                      className=\"textarea\"\n                      name={`carParks[${index}].description`}\n                      ref={ register }\n                    ></textarea> \n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"field\">\n            <div className=\"control\">\n              <button className=\"button\" type=\"button\" onClick={ btnAddCarParkOnClick }>\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-plus\"></i>\n                </span>\n                <span>Add Car Park</span>\n              </button>\n            </div>\n            {/**\n              <div className=\"help is-danger\">{ errors.carParks?.message }</div>\n            */}\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Access</label>\n            <div className=\"control\">\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"unknown\"\n                  ref={ register }\n                />\n                Unknown\n              </label>\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"permitted\"\n                  ref={ register }\n                />\n                Permitted\n              </label>\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"restricted\"\n                  ref={ register }\n                />\n                Restricted\n              </label>\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"banned\"\n                  ref={ register }\n                />\n                Banned\n              </label>\n            </div>\n            <p className=\"help is-danger\"></p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"accessDetails\">Access Details</label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                name=\"accessDetails\"\n                ref={ register }\n              /> \n            </div>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"accessLink\">Access Details Link</label>\n            <div className=\"control\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"accessLink\"\n                ref={ register }\n              />\n            </div>\n            <p className=\"help is-danger\">{ errors.accessLink?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <div className=\"field is-flex is-justified-end\">\n              <div className=\"control\">\n                <button type=\"submit\" className={`button is-primary ${loading ? \"is-loading\" : \"\"}`}>\n                  <span>Continue</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n}\n\nexport default CreateCrag\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-route/CreateRoute.tsx",["191","192","193","194","195"],"import {useAuth0} from \"@auth0/auth0-react\";\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport React, {useEffect, useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport {useHistory, useParams} from 'react-router-dom';\nimport * as yup from \"yup\";\nimport {AreaView, GradingSystem, RouteDrawing} from \"../../../../core/types\";\nimport {areas, globals, routes, topos} from \"../../api\";\nimport TopoCanvas from \"../../components/TopoCanvas\";\nimport {popupError, popupSuccess} from \"../../helpers/alerts\";\n\n\nconst schema = yup.object().shape({\n  title: yup.string().required(\"Required\"),\n  description: yup.string(),\n  tags: yup.array().min(1, \"Select at least 1\").of(\n    yup.string()\n  ),\n  routeType: yup.string().required(\"Required\"),\n  gradingSystem: yup.string().required(\"Required\"),\n  grade: yup.string().required(\"Required\"),\n});\n\nfunction CreateRoute() {\n  const history = useHistory();\n  const { getAccessTokenSilently, isAuthenticated } = useAuth0();\n  const { areaSlug, cragSlug, topoSlug } = useParams<{ areaSlug: string; cragSlug: string, topoSlug: string }>();\n  const [routeTags, setRouteTags] = useState<string[]>([]);\n  const [routeTypes, setRouteTypes] = useState<string[]>([]);\n  const [gradingSystems, setGradingSystems] = useState<GradingSystem[]>([]);\n  const [grades, setGrades] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [area, setArea] = useState<AreaView | undefined>();\n  const [backgroundImageURL, setBackgroundImageURL] = useState(\"\");\n  const [drawing, setDrawing] = useState<RouteDrawing>({ path: [] });\n\n  const { register, getValues, handleSubmit, errors, watch } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      tags: [] as string[],\n      routeType: \"\",\n      gradingSystem: \"\",\n      grade: \"\"\n    }\n  });\n\n  const watchTags = watch(\"tags\", []);\n  const watchGradingSystem = watch(\"gradingSystem\", \"\");\n\n  useEffect(() => {\n    const doGetArea = async () => {\n      try {\n        const token = isAuthenticated\n          ? await getAccessTokenSilently()\n          : \"\";\n        const area = await areas.getArea(areaSlug, token);\n        setArea(area);\n      } catch (error) {\n        console.error(\"Error loading area\", error);\n        popupError(\"Oh dear, there was a problem loading this area\");\n      }\n    };\n\n    const doGetTopo = async () => {\n      const topo = await topos.getTopo(topoSlug);\n      setBackgroundImageURL(`${topo.image}`);\n    }\n\n    doGetArea();\n    doGetTopo();\n    doGetTags();\n    doGetRouteTypes();\n    doGetGradingSystem();\n  }, [areaSlug, topoSlug]);\n\n  const doGetTags = async () => {\n    const routeTags = await globals.getRouteTags();\n    setRouteTags(routeTags);\n  }\n\n  const doGetRouteTypes = async () => {\n    const routeTypes = await globals.getRouteTypes();\n    setRouteTypes(routeTypes);\n  }\n\n  const doGetGradingSystem = async () => {\n    const gradingSystem = await globals.getGradingSystems();\n    setGradingSystems(gradingSystem);\n  }\n\n  const getGradesFromGradingSystem = (gradingSystem: string) => {\n    const grades = gradingSystems?.find(_gradingSystem => _gradingSystem.title === gradingSystem)?.grades;\n    return grades;\n  }\n\n  const onDrawingChanged = (drawing: RouteDrawing) => {\n    setDrawing(drawing);\n  }\n\n  const formOnSubmit = handleSubmit(async (formData) => {\n    try {\n      const token = await getAccessTokenSilently();\n      const { routeSlug } = await routes.createRoute(\n        {\n          ...formData,\n          drawing,\n          cragSlug,\n          areaSlug,\n          topoSlug\n        },\n        token\n      );\n      await popupSuccess(\"Route Created!\");\n      history.push(`/crags/${cragSlug}/areas/${areaSlug}#${routeSlug}`);\n    } catch (error) {\n      console.error('Error creating crag', error);\n      popupError(\"Ahh, something has gone wrong...\");\n    }\n  });\n\n  return (\n    <>\n      <section className=\"section\">\n        <div className=\"container\">\n          <TopoCanvas\n            routes={ area?.routes?.filter(route => route.topoSlug === topoSlug) }\n            backgroundImageURL={ backgroundImageURL }\n            onDrawingChanged={ onDrawingChanged }\n          />\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container box\">\n          <form\n            onSubmit={ formOnSubmit }\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n            autoComplete=\"off\"\n          >\n            <div className=\"field\">\n              <label className=\"label\" htmlFor=\"title\">Title</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  name=\"title\"\n                  ref={ register }\n                />\n              </div>\n              <p className=\"help is-danger\">{ errors.title?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\" htmlFor=\"description\">Description</label>\n              <div className=\"control\">\n                <textarea\n                  className=\"textarea\"\n                  name=\"description\"\n                  ref={ register }\n                ></textarea> \n              </div>\n              <p className=\"help is-danger\">{ errors.description?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Tags</label>\n              <div className=\"field is-grouped is-grouped-multiline\">\n                <div role=\"group\" className=\"tags\">\n                  {routeTags.map(tag => (\n                    <label\n                      key={ tag }\n                      className={`\n                        tag\n                        ${watchTags?.includes(tag) ? \"is-primary\" : \"\"}\n                      `}\n                    >\n                      <input\n                        type=\"checkbox\"\n                        name=\"tags\"\n                        value={ tag }\n                        ref={ register }\n                        style={{ display: \"none\" }}\n                      />\n                      { tag }\n                    </label>\n                  ))} \n                </div>\n              </div>\n              <p className=\"help is-danger\">{ (errors.tags as any)?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Route Type</label>\n              <div className=\"control is-expanded\">\n                <div className=\"select is-fullwidth\">\n                  <select name=\"routeType\" ref={ register }>\n                    {routeTypes.map((routeType) => (\n                      <option key={ routeType } value={ routeType }>{ routeType }</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <p className=\"help is-danger\">{ errors.routeType?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Grading System</label>\n              <div className=\"control is-expanded\">\n                <div className=\"select is-fullwidth\">\n                  <select name=\"gradingSystem\" ref={ register }>\n                    {gradingSystems.map((gradingSystem) => (\n                      <option key={ gradingSystem.title } value={ gradingSystem.title }>{ gradingSystem.title }</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <p className=\"help is-danger\">{ errors.gradingSystem?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Grade</label>\n              <div className=\"contro is-expandedl\">\n                <div className=\"select is-fullwidth\">\n                  <select name=\"grade\" ref={ register }>\n                    {watchGradingSystem && getGradesFromGradingSystem(getValues(\"gradingSystem\"))?.map((grade) => (\n                      <option key={ grade } value={ grade }>{ grade }</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <p className=\"help is-danger\">{ errors.grade?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <div className=\"field is-flex is-justified-end\">\n                <div className=\"control\">\n                  <button className=\"button is-primary\">Create Route</button>\n                </div>\n              </div>\n            </div>\n          </form>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default CreateRoute;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-topo/CreateTopo.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/home/Home.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/profile/Profile.tsx",["196","197","198"],"import React, { useEffect, useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport ProfileLogs from \"../../components/ProfileLogs\";\n\nfunction Profile() {\n  const { logout, user } = useAuth0();\n  const { name, picture, email } = user;\n\n  return (\n    <>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1>{ name }</h1>\n            <img src={ picture } />\n            <h1>{ email }</h1>\n            <button className=\"button\" onClick={ () => logout() }>\n              Logout\n            </button>\n          </div>\n          <div className=\"box\">\n            <ProfileLogs />\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default Profile;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/route/Route.tsx",["199","200"],"import {useAuth0} from \"@auth0/auth0-react\";\nimport React, {useEffect, useState} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {Route, RouteView} from \"../../../../core/types\";\nimport {routes} from \"../../api\";\nimport RoutesAddToLogModal from \"../../components/RoutesAddToLogModal\";\nimport TopoImage from \"../../components/TopoImage\";\nimport {popupError} from \"../../helpers/alerts\";\nimport {usePageTitle} from \"../../helpers/pageTitle\";\n\n\nfunction RoutePage() {\n  const { getAccessTokenSilently, isAuthenticated, isLoading, loginWithRedirect } = useAuth0();\n  const { cragSlug, areaSlug, topoSlug, routeSlug } = useParams<{ cragSlug: string; areaSlug: string; topoSlug: string; routeSlug: string }>();\n  const [route, setRoute] = useState<RouteView>();\n  const [routeJustLogged, setRouteJustLogged] = useState<Boolean>(false); \n  const [showLogModal, setShowLogModal] = useState(false);\n  usePageTitle(route?.title);\n\n  useEffect(() => {\n    const doGetRoute = async () => {\n      try {\n        const token = isAuthenticated\n          ? await getAccessTokenSilently()\n          : \"\";\n        const newRoute = await routes.getRoute(token, cragSlug, areaSlug, topoSlug, routeSlug);\n        setRoute(newRoute);\n      } catch (error) {\n        console.error(\"Error loading route\", error);\n        popupError(\"Oh dear, there was a problem loading this route\");\n      }\n    }\n\n    if (isLoading === false) {\n      doGetRoute();\n    }\n  }, [routeSlug, isAuthenticated, isLoading]);\n\n  const btnDoneOnClick = () => {\n    setShowLogModal(true);\n  }\n\n  const onRouteLogged = () => {\n    setShowLogModal(false);\n    setRouteJustLogged(true);\n  }\n\n  return (\n    <>\n      { route ? (\n        <RoutesAddToLogModal\n          routes={ [route] as Route[] }\n          visible={ showLogModal } \n          onCancel={ () => setShowLogModal(false) }\n          onConfirm={ onRouteLogged }\n        />\n        ) : \"\"\n      }\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title is-spaced is-capitalized\">{ route?.title }</h1>\n          <h5 className=\"subtitle\">\n            { route?.grade }\n            <span> </span>\n            { route?.routeType }\n          </h5>\n          <p>{ route?.description }</p>\n          <br />\n          <div className=\"columns\">\n            <div className=\"column\">\n              <div role=\"group\" className=\"tags\">\n                {route?.tags.map(tag => (\n                  <label key={ tag } className=\"tag is-primary\">\n                    { tag }\n                  </label>\n                ))} \n              </div>\n            </div>\n            <div className=\"column is-flex is-justified-end\">\n              <div className=\"field has-addons\">\n                <div className=\"control\">\n                  <button className=\"button is-rounded\" onClick={ btnDoneOnClick }>\n                    { route?.userLogs.length || routeJustLogged\n                      ? (\n                        <>\n                          <span className=\"icon is-small\">\n                            <i className=\"fas fw fa-check\"></i>\n                          </span>\n                          <span>Done</span>\n                        </>\n                      )\n                      : (\n                        <>\n                          <span className=\"icon is-small\">\n                            <i className=\"fas fw fa-plus\"></i>\n                          </span>\n                          <span>Log Book</span>\n                        </>\n                      )\n                    }\n                  </button>\n                </div>\n                <div className=\"control\">\n                  <button className=\"button is-rounded\">\n                    <span className=\"icon is-small\">\n                      <i className=\"fas fw fa-list\"></i>\n                    </span>\n                    <span>Save to List</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className=\"is-hidden-tablet\">\n        { route?.drawing\n          ? <TopoImage\n              routes={[route, ...route.siblingRoutes]}\n              highlightedRouteSlug={ route.slug }\n              background={ `${route?.topo?.image}` }\n            />\n          : \"\"\n        }\n      </section>\n      <section className=\"section is-hidden-mobile\">\n        <div className=\"container box\">\n          { route?.drawing\n            ? <TopoImage\n                routes={[route, ...route.siblingRoutes]}\n                highlightedRouteSlug={ route.slug }\n                background={ `${route?.topo?.image}` }\n              />\n            : \"\"\n          }\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default RoutePage;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/logs.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/crags.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/alerts.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/clipboard.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/pageTitle.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/geolocation.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/nominatim.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ButtonCopyCoordinates.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/AreaRoutesTable.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LoadingSpinner.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToLogModal.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImage.tsx",["201"],"import React, {useEffect, useState} from \"react\";\nimport \"./TopoImage.css\";\nimport { SmoothPath } from \"../helpers/svg\";\nimport { Route, RouteDrawing } from \"../../../core/types\";\nimport TopoImageStartTag from \"./TopoImageStartTag\";\n\ninterface PropTypes {\n  routes: Route[];\n  background: string;\n  highlightedRouteSlug?: string;\n}\n\nfunction TopoImage({ routes, background, highlightedRouteSlug }: PropTypes) {\n  const [joinedRoutePaths, setJoinedRoutePaths] = useState<number[][][]>([]);\n  const [routeLabels, setRouteLabels] = useState<{ [key: string]: (string | number)[] }>({});\n\n  useEffect(() => {\n    const newJoinedRoutePaths = routes.map(route => {\n      return joinLinkedRoutes(route.drawing, routes);\n    });\n\n    setJoinedRoutePaths(newJoinedRoutePaths);\n  }, [routes]);\n\n  useEffect(() => {\n    const newRouteLabels = { ...routeLabels };\n\n    joinedRoutePaths.forEach((path, index) => {\n      const startX = Math.floor(path[0][0]);\n      const startY = Math.floor(path[0][1]);\n      const endX = Math.floor(path[path.length - 1][0]);\n      const endY = Math.floor(path[path.length - 1][1]);\n\n      newRouteLabels[`${startX},${startY}`] = Array.from(\n        new Set([\n          ...(newRouteLabels[`${startX},${startY}`] || []),\n          index + 1\n        ])\n      );\n\n      newRouteLabels[`${endX},${endY}`] = Array.from(\n        new Set([\n          ...(newRouteLabels[`${endX},${endY}`] || []),\n          index + 1\n        ])\n      );\n    });\n\n    setRouteLabels(newRouteLabels);\n  }, [joinedRoutePaths]);\n\n  const getRouteStrokeOpacity = (routeSlug: string) => {\n    if (highlightedRouteSlug && highlightedRouteSlug === routeSlug) {\n      return 1;\n    } else if (!highlightedRouteSlug) {\n      return 1;\n    }\n\n    return 0.5;\n  }\n\n  const joinLinkedRoutes = (\n    routeDrawing: RouteDrawing,\n    routes: Route[],\n  ) => {\n    let joinedPathPoints: number[][] = [];\n\n    if (routeDrawing.linkFrom) {\n      const linkFromPath = routes.find(route => route.slug === routeDrawing!.linkFrom!.routeSlug)!.drawing.path;\n      const joinIndex = linkFromPath?.findIndex(([x, y]) => {\n        return Math.abs(x - routeDrawing!.linkFrom!.x) <= 5 && Math.abs(y - routeDrawing!.linkFrom!.y) <= 5;\n      });\n      const slicedPath = linkFromPath!.slice(0, joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    joinedPathPoints = [...joinedPathPoints, ...routeDrawing.path];\n\n    if (routeDrawing.linkTo) {\n      const linkToPath = routes.find(route => route.slug === routeDrawing!.linkTo!.routeSlug)!.drawing.path;\n      const joinIndex = linkToPath?.findIndex(([x, y]) => {\n        return Math.abs(x - routeDrawing!.linkTo!.x) <= 5 && Math.abs(y - routeDrawing!.linkTo!.y) <= 5;\n      });\n      const slicedPath = linkToPath!.slice(joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    return joinedPathPoints;\n  }\n\n  return (\n    <div className=\"area-topo-image\">\n      <img src={ background } alt=\"topo\"/>\n      <div className=\"area-topo-image--canvas\">\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 1000 1000\">\n          {routes?.map((route) => (\n            <path\n              key={ route.slug }\n              d={ SmoothPath(joinLinkedRoutes(route.drawing, routes)) }\n              fill=\"transparent\"\n              stroke=\"yellow\"\n              strokeWidth=\"4\"\n              strokeOpacity={ getRouteStrokeOpacity(`${route.slug}`) }\n            />\n          ))}\n          {Object.entries(routeLabels).map(([ coords, routes ], index) => (\n            <TopoImageStartTag\n              key={ index }\n              content={ routes.join(\", \") }\n              x={ parseInt(coords.split(\",\")[0], 10) }\n              y={ parseInt(coords.split(\",\")[1], 10) }\n            />\n          ))}\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nexport default TopoImage;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoCanvas.tsx",["202"],"import React, {useEffect, useRef, useState} from \"react\";\nimport {Route} from \"../../../core/types\";\nimport { domToSvgPoint, ReducePath, SmoothPath } from \"../helpers/svg\";\nimport { RouteDrawing } from \"../../../core/types\";\n\nimport \"./TopoCanvas.css\";\n\nenum PointerState {\n  up = \"up\",\n  down = \"down\"\n}\n\nconst strokeColor = \"yellow\";\nconst strokeWidth = \"4\";\n\nfunction TopoCanvas({backgroundImageURL, onDrawingChanged, routes}: {backgroundImageURL: string; onDrawingChanged: Function, routes: Route[] | undefined}) {\n  const [finishXY, setFinishXY] = useState([-1, -1]);\n  const [linkFrom, setLinkFrom] = useState<{routeSlug: string; x: number; y: number;} | undefined>();\n  const [linkTo, setLinkTo] = useState<{routeSlug: string; x: number; y: number;} | undefined>();\n  const [pointerState, setPointerState] = useState<PointerState>(PointerState.up);\n  const [existingRoutes, setExistingRoutes] = useState<Map<string, number[][]>>(new Map());\n  const [routePath, setRoutePath] = useState<number[][]>();\n  const [completePath, setCompletePath] = useState<number[][]>([]);\n  const [routeDrawing, setRouteDrawing] = useState<RouteDrawing>();\n\n  const canvasElement = useRef<SVGSVGElement>(document.querySelector(\"svg\") as SVGSVGElement);\n\n  useEffect(() => {\n    if (routes) {\n      const newExistingRoutes = new Map(existingRoutes);\n\n      routes.forEach(route => {\n        const existingRouteCoordinatesArray = route.drawing?.path;\n\n        if (existingRouteCoordinatesArray) {\n          newExistingRoutes.set(`${route.slug}`, existingRouteCoordinatesArray);\n        }\n      });\n\n      setExistingRoutes(newExistingRoutes);\n    }\n  }, [routes]);\n\n  function findRouteUnderPointer(x: number, y: number): {x: number; y: number; parentRouteSlug: string} | undefined {\n    let parentRoute;\n\n    existingRoutes.forEach((pathPoints, routeSlug) => {\n      pathPoints.forEach(([x1, y1]) => {\n        if (Math.abs(x - x1) <= 5 && Math.abs(y - y1) <= 5) {\n          parentRoute = ({x: x1, y: y1, parentRouteSlug: routeSlug});\n        }\n      });\n    });\n\n    return parentRoute;\n  }\n\n  // TODO 99% the same as in TopoImage.tsx\n  function joinLinkedRoutes(\n    routePath: number[][],\n    linkFrom: { routeSlug: string, x: number; y: number } | undefined,\n    linkTo: { routeSlug: string; x: number; y: number } | undefined,\n    routes: Map<string, number[][]>\n  ) {\n    let joinedPathPoints: number[][] = [];\n\n    if (linkFrom) {\n      const linkFromPath = routes.get(linkFrom.routeSlug);\n      const joinIndex = linkFromPath?.findIndex(([x, y]) => {\n        return Math.abs(x - linkFrom.x) <= 5 && Math.abs(y - linkFrom.y) <= 5;\n      });\n      const slicedPath = linkFromPath!.slice(0, joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    joinedPathPoints = [...joinedPathPoints, ...routePath];\n\n    if (linkTo) {\n      const linkToPath = routes.get(linkTo.routeSlug);\n      const joinIndex = linkToPath?.findIndex(([x, y]) => {\n        return Math.abs(x - linkTo.x) <= 5 && Math.abs(y - linkTo.y) <= 5;\n      });\n      const slicedPath = linkToPath!.slice(joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    return joinedPathPoints;\n  }\n\n  function onPointerDown() {\n    setPointerState(PointerState.down);\n    setFinishXY([ -1, -1 ]);\n    setLinkTo(undefined);\n    setRoutePath(undefined);\n    setRouteDrawing({\n      path: [],\n      linkFrom,\n      linkTo\n    });\n  }\n\n  function onPointerUp() {\n    setPointerState(PointerState.up);\n    onDrawingChanged(routeDrawing);\n  }\n\n  function onPointerMove({clientX, clientY}: PointerEvent) {\n    if (pointerState === PointerState.down) {\n      onPointerDrag({clientX, clientY});\n      return;\n    }\n\n    const {x, y} = domToSvgPoint({x: clientX, y: clientY}, canvasElement.current);\n    const targetRoute = findRouteUnderPointer(x, y);\n\n    if (targetRoute && pointerState === PointerState.up) {\n      setLinkFrom({\n        x: Math.round(x * 100) / 100,\n        y: Math.round(y * 100) / 100,\n        routeSlug: targetRoute.parentRouteSlug\n      });\n    } else {\n      setLinkFrom(undefined);\n    }\n  }\n\n  function onPointerDrag({clientX, clientY}: {clientX: number, clientY: number}) {\n    const {x, y} = domToSvgPoint({x: clientX, y: clientY}, canvasElement.current);\n    const targetRoute = findRouteUnderPointer(x, y);\n\n    if (targetRoute && pointerState === PointerState.down) {\n      setLinkTo({\n        x,\n        y,\n        routeSlug: targetRoute.parentRouteSlug\n      });\n    } else {\n      setLinkTo(undefined);\n    }\n\n    setRoutePath(routePath\n      ? [...routePath, [x, y]]\n      : [[x, y]]\n    );\n\n    setRouteDrawing({\n      path: routePath || [],\n      linkFrom: routeDrawing?.linkFrom,\n      linkTo\n    });\n\n    if (routePath) {\n      const completePath = joinLinkedRoutes(\n        routePath,\n        routeDrawing?.linkFrom,\n        routeDrawing?.linkTo,\n        existingRoutes\n      );\n\n      setFinishXY(completePath.slice(-1)[0]);\n      setCompletePath(ReducePath(completePath));\n    }\n  }\n\n  return (\n    <>\n      <div className=\"notification is-primary\">\n        Make sure to draw route lines from <strong>start to finish</strong>\n      </div>\n      <div id=\"canvas-container\">\n        <img id=\"canvas-bg\" src={backgroundImageURL} alt=\"topo drawing canvas\" />\n        <div id=\"canvas\">\n          <svg\n            ref={canvasElement}\n            width=\"100%\"\n            height=\"100%\"\n            viewBox=\"0 0 1000 1000\"\n            onPointerUp={onPointerUp}\n            onPointerMove={e => onPointerMove(e as unknown as PointerEvent)}\n            onPointerDown={onPointerDown}\n          >\n            {existingRoutes && [...existingRoutes.keys()].map(key => (\n              <path\n                key={key}\n                d={SmoothPath(existingRoutes.get(key) as number[][])}\n                strokeWidth={strokeWidth}\n                stroke={strokeColor}\n                strokeOpacity={0.5}\n                fill=\"none\"\n              />\n            ))}\n            {routeDrawing?.path?.length && (\n              <path\n                d={SmoothPath(completePath)}\n                stroke={strokeColor}\n                strokeWidth={strokeWidth}\n                fill=\"none\"\n              />\n            )}\n            {finishXY[0] !== -1 && finishXY[1] !== -1 && routeDrawing?.path?.length && (\n              <foreignObject x={finishXY[0] - 15} y={finishXY[1] - 30} width=\"30px\" height=\"30px\">\n                <div style={{width: \"30px\", height: \"30px\", position: \"relative\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                  <div style={{background: \"rgba(0, 0, 0, 0.8)\", padding: \"5px\", borderRadius: \"50em\", position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0}}></div>\n                  <i style={{fontSize: \"1rem\", zIndex: 1, color: \"#fff\"}} className=\"fas fa-flag\"></i>\n                </div>\n              </foreignObject>\n            )}\n            {((linkFrom && pointerState === \"up\") || (linkTo && pointerState === \"down\")) && (\n              <foreignObject x={(pointerState === \"up\" ? linkFrom!.x : linkTo!.x) - 15} y={(pointerState === \"up\" ? linkFrom!.y : linkTo!.y) - 30} width=\"30px\" height=\"30px\">\n                <div style={{width: \"30px\", height: \"30px\", position: \"relative\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                  <div style={{background: \"rgba(0, 0, 0, 0.8)\", padding: \"5px\", borderRadius: \"50em\", position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0}}></div>\n                  <i style={{fontSize: \"1rem\", zIndex: 1, color: \"#fff\"}} className=\"fas fa-link\"></i>\n                </div>\n              </foreignObject>\n            )}\n          </svg>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default TopoCanvas;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLogs.tsx",["203"],"import {useAuth0} from \"@auth0/auth0-react\";\nimport React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport {Log} from \"../../../core/types\";\nimport {logs} from \"../api\";\nimport {popupError} from \"../helpers/alerts\";\n\nfunction ProfileLogs() {\n  const { getAccessTokenSilently, isLoading, isAuthenticated } = useAuth0();\n  const [loggedRoutes, setLoggedRoutes] = useState<Log[]>([]);\n\n  useEffect(() => {\n    const getProfileDate = async () => {\n      try {\n        const token = await getAccessTokenSilently();\n        const newLoggedRoutes = await logs.getProfileLogs(token);\n        setLoggedRoutes(newLoggedRoutes); \n        console.log(newLoggedRoutes);\n      } catch (error) {\n        console.error(\"Error loading user profile\", error);\n        popupError(\"Something has gone wrong, your profile couldn't be loaded. sorry\");\n      }\n    };\n\n    if (isLoading === false && isAuthenticated === true) {\n      getProfileDate();\n    }\n  }, [isLoading, isAuthenticated]);\n\n  return (\n    <table className=\"table is-fullwidth\">\n      <thead>\n        <tr>\n          <th>Route</th>\n          <th>Grade</th>\n          <th>Stars</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        { loggedRoutes.map(log => (\n          <tr>\n            <td>{ log.title }</td>\n            <td>{ log.gradeTaken }</td>\n            <td>{ log.stars }</td>\n            <td>{ log.dateSent }</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default ProfileLogs;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/index.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/queryString.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/svg.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Modal.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImageStartTag.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/areas.ts",[],["204","205"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/globals.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/topos.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/uploads.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/routes.ts",[],{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":24,"column":9,"nodeType":"212","endLine":30,"endColumn":10},{"ruleId":"213","severity":1,"message":"214","line":54,"column":6,"nodeType":"215","endLine":54,"endColumn":44,"suggestions":"216"},{"ruleId":"217","severity":1,"message":"218","line":56,"column":9,"nodeType":"219","messageId":"220","endLine":56,"endColumn":25},{"ruleId":"213","severity":1,"message":"214","line":53,"column":6,"nodeType":"215","endLine":53,"endColumn":44,"suggestions":"221"},{"ruleId":"210","severity":1,"message":"211","line":96,"column":15,"nodeType":"212","endLine":96,"endColumn":59},{"ruleId":"210","severity":1,"message":"211","line":99,"column":15,"nodeType":"212","endLine":99,"endColumn":58},{"ruleId":"210","severity":1,"message":"211","line":102,"column":15,"nodeType":"212","endLine":102,"endColumn":61},{"ruleId":"210","severity":1,"message":"211","line":105,"column":15,"nodeType":"212","endLine":105,"endColumn":56},{"ruleId":"217","severity":1,"message":"222","line":5,"column":8,"nodeType":"219","messageId":"220","endLine":5,"endColumn":24},{"ruleId":"213","severity":1,"message":"223","line":19,"column":6,"nodeType":"215","endLine":19,"endColumn":34,"suggestions":"224"},{"ruleId":"217","severity":1,"message":"225","line":44,"column":19,"nodeType":"219","messageId":"220","endLine":44,"endColumn":29},{"ruleId":"217","severity":1,"message":"226","line":31,"column":10,"nodeType":"219","messageId":"220","endLine":31,"endColumn":16},{"ruleId":"217","severity":1,"message":"227","line":31,"column":18,"nodeType":"219","messageId":"220","endLine":31,"endColumn":27},{"ruleId":"217","severity":1,"message":"228","line":32,"column":10,"nodeType":"219","messageId":"220","endLine":32,"endColumn":17},{"ruleId":"217","severity":1,"message":"225","line":32,"column":19,"nodeType":"219","messageId":"220","endLine":32,"endColumn":29},{"ruleId":"213","severity":1,"message":"229","line":77,"column":6,"nodeType":"215","endLine":77,"endColumn":26,"suggestions":"230"},{"ruleId":"217","severity":1,"message":"231","line":1,"column":17,"nodeType":"219","messageId":"220","endLine":1,"endColumn":26},{"ruleId":"217","severity":1,"message":"232","line":1,"column":28,"nodeType":"219","messageId":"220","endLine":1,"endColumn":36},{"ruleId":"233","severity":1,"message":"234","line":15,"column":13,"nodeType":"212","endLine":15,"endColumn":36},{"ruleId":"217","severity":1,"message":"235","line":13,"column":63,"nodeType":"219","messageId":"220","endLine":13,"endColumn":80},{"ruleId":"213","severity":1,"message":"236","line":37,"column":6,"nodeType":"215","endLine":37,"endColumn":45,"suggestions":"237"},{"ruleId":"213","severity":1,"message":"238","line":50,"column":6,"nodeType":"215","endLine":50,"endColumn":24,"suggestions":"239"},{"ruleId":"213","severity":1,"message":"240","line":42,"column":6,"nodeType":"215","endLine":42,"endColumn":14,"suggestions":"241"},{"ruleId":"213","severity":1,"message":"214","line":28,"column":6,"nodeType":"215","endLine":28,"endColumn":34,"suggestions":"242"},{"ruleId":"206","replacedBy":"243"},{"ruleId":"208","replacedBy":"244"},"no-native-reassign",["245"],"no-negated-in-lhs",["246"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAccessTokenSilently'. Either include it or remove the dependency array.","ArrayExpression",["247"],"@typescript-eslint/no-unused-vars","'btnCoordsOnClick' is assigned a value but never used.","Identifier","unusedVar",["248"],"'CragQuickActions' is defined but never used.","React Hook useEffect has a missing dependency: 'doGetCrags'. Either include it or remove the dependency array.",["249"],"'setLoading' is assigned a value but never used.","'grades' is assigned a value but never used.","'setGrades' is assigned a value but never used.","'loading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAccessTokenSilently' and 'isAuthenticated'. Either include them or remove the dependency array.",["250"],"'useEffect' is defined but never used.","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'loginWithRedirect' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'areaSlug', 'cragSlug', 'getAccessTokenSilently', and 'topoSlug'. Either include them or remove the dependency array.",["251"],"React Hook useEffect has a missing dependency: 'routeLabels'. Either include it or remove the dependency array.",["252"],"React Hook useEffect has a missing dependency: 'existingRoutes'. Either include it or remove the dependency array.",["253"],["254"],["245"],["246"],"no-global-assign","no-unsafe-negation",{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},"Update the dependencies array to be: [areaSlug, getAccessTokenSilently, isAuthenticated, isLoading]",{"range":"271","text":"272"},"Update the dependencies array to be: [cragSlug, isLoading, isAuthenticated, getAccessTokenSilently]",{"range":"273","text":"274"},"Update the dependencies array to be: [isLoading, isAuthenticated, doGetCrags]",{"range":"275","text":"276"},"Update the dependencies array to be: [areaSlug, getAccessTokenSilently, isAuthenticated, topoSlug]",{"range":"277","text":"278"},"Update the dependencies array to be: [routeSlug, isAuthenticated, isLoading, getAccessTokenSilently, cragSlug, areaSlug, topoSlug]",{"range":"279","text":"280"},"Update the dependencies array to be: [joinedRoutePaths, routeLabels]",{"range":"281","text":"282"},"Update the dependencies array to be: [existingRoutes, routes]",{"range":"283","text":"284"},"Update the dependencies array to be: [isLoading, isAuthenticated, getAccessTokenSilently]",{"range":"285","text":"286"},[2016,2054],"[areaSlug, getAccessTokenSilently, isAuthenticated, isLoading]",[1804,1842],"[cragSlug, isLoading, isAuthenticated, getAccessTokenSilently]",[647,675],"[isLoading, isAuthenticated, doGetCrags]",[2650,2670],"[areaSlug, getAccessTokenSilently, isAuthenticated, topoSlug]",[1453,1492],"[routeSlug, isAuthenticated, isLoading, getAccessTokenSilently, cragSlug, areaSlug, topoSlug]",[1500,1518],"[joinedRoutePaths, routeLabels]",[1639,1647],"[existingRoutes, routes]",[954,982],"[isLoading, isAuthenticated, getAccessTokenSilently]"]