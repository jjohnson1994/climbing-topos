[{"/Users/jamesjohnson/Projects/climbing-topos/app/src/index.js":"1","/Users/jamesjohnson/Projects/climbing-topos/app/src/reportWebVitals.js":"2","/Users/jamesjohnson/Projects/climbing-topos/app/src/App.tsx":"3","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Nav.tsx":"4","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/auth0-provider-with-history.tsx":"5","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/protected-route.tsx":"6","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/area/Area.tsx":"7","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crag/Crag.tsx":"8","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags/Crags.tsx":"9","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-area/CreateArea.tsx":"10","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-crag/CreateCrag.tsx":"11","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-route/CreateRoute.tsx":"12","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-topo/CreateTopo.tsx":"13","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/home/Home.tsx":"14","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/profile/Profile.tsx":"15","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/route/Route.tsx":"16","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/logs.ts":"17","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/crags.ts":"18","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/alerts.ts":"19","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/clipboard.ts":"20","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/pageTitle.ts":"21","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/geolocation.ts":"22","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/nominatim.ts":"23","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ButtonCopyCoordinates.tsx":"24","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/AreaRoutesTable.tsx":"25","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LoadingSpinner.tsx":"26","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToLogModal.tsx":"27","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImage.tsx":"28","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoCanvas.tsx":"29","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLogs.tsx":"30","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/index.ts":"31","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/queryString.ts":"32","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/svg.ts":"33","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Modal.tsx":"34","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImageStartTag.tsx":"35","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/areas.ts":"36","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/globals.ts":"37","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/topos.ts":"38","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/uploads.ts":"39","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/routes.ts":"40","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags-map/CragsMap.tsx":"41","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMap.tsx":"42","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/search/Search.tsx":"43","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResults.tsx":"44","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchBox.tsx":"45","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMapMarkerClusterGroup.jsx":"46","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultCrag.tsx":"47","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultArea.tsx":"48","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultRoute.tsx":"49","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/CragMap.tsx":"50","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RouteLogContext.tsx":"51","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToListModal.tsx":"52","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/lists.ts":"53","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Footer.tsx":"54","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/about/About.tsx":"55","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLists.tsx":"56"},{"size":500,"mtime":1610219466488,"results":"57","hashOfConfig":"58"},{"size":362,"mtime":1610219466497,"results":"59","hashOfConfig":"58"},{"size":3380,"mtime":1610877190782,"results":"60","hashOfConfig":"58"},{"size":2385,"mtime":1610816183776,"results":"61","hashOfConfig":"58"},{"size":859,"mtime":1610704502209,"results":"62","hashOfConfig":"58"},{"size":330,"mtime":1610219466466,"results":"63","hashOfConfig":"58"},{"size":5441,"mtime":1611054387050,"results":"64","hashOfConfig":"58"},{"size":10881,"mtime":1611074155150,"results":"65","hashOfConfig":"58"},{"size":3259,"mtime":1611074513802,"results":"66","hashOfConfig":"58"},{"size":9784,"mtime":1610565221429,"results":"67","hashOfConfig":"58"},{"size":14326,"mtime":1610547878650,"results":"68","hashOfConfig":"58"},{"size":9357,"mtime":1610644472911,"results":"69","hashOfConfig":"58"},{"size":4953,"mtime":1610356859836,"results":"70","hashOfConfig":"58"},{"size":1666,"mtime":1610747575263,"results":"71","hashOfConfig":"58"},{"size":2012,"mtime":1611074132912,"results":"72","hashOfConfig":"58"},{"size":4791,"mtime":1611079596835,"results":"73","hashOfConfig":"58"},{"size":2798,"mtime":1610709082095,"results":"74","hashOfConfig":"58"},{"size":1206,"mtime":1610797644834,"results":"75","hashOfConfig":"58"},{"size":1505,"mtime":1610219466477,"results":"76","hashOfConfig":"58"},{"size":99,"mtime":1610651067802,"results":"77","hashOfConfig":"58"},{"size":290,"mtime":1610448611947,"results":"78","hashOfConfig":"58"},{"size":369,"mtime":1610275063708,"results":"79","hashOfConfig":"58"},{"size":342,"mtime":1610219466479,"results":"80","hashOfConfig":"58"},{"size":994,"mtime":1610723259791,"results":"81","hashOfConfig":"58"},{"size":4411,"mtime":1611006483484,"results":"82","hashOfConfig":"58"},{"size":227,"mtime":1610219466469,"results":"83","hashOfConfig":"58"},{"size":12068,"mtime":1611005841344,"results":"84","hashOfConfig":"58"},{"size":3856,"mtime":1610542678563,"results":"85","hashOfConfig":"58"},{"size":7972,"mtime":1610819317657,"results":"86","hashOfConfig":"58"},{"size":2249,"mtime":1611073671638,"results":"87","hashOfConfig":"58"},{"size":280,"mtime":1610821526319,"results":"88","hashOfConfig":"58"},{"size":261,"mtime":1610219466486,"results":"89","hashOfConfig":"58"},{"size":1701,"mtime":1610219466487,"results":"90","hashOfConfig":"58"},{"size":1866,"mtime":1611079023918,"results":"91","hashOfConfig":"58"},{"size":1190,"mtime":1610219466476,"results":"92","hashOfConfig":"58"},{"size":857,"mtime":1610541443179,"results":"93","hashOfConfig":"58"},{"size":493,"mtime":1610278021922,"results":"94","hashOfConfig":"58"},{"size":1875,"mtime":1611048745316,"results":"95","hashOfConfig":"58"},{"size":313,"mtime":1610219466464,"results":"96","hashOfConfig":"58"},{"size":1047,"mtime":1610540528682,"results":"97","hashOfConfig":"58"},{"size":2151,"mtime":1610797723038,"results":"98","hashOfConfig":"58"},{"size":1748,"mtime":1610702798811,"results":"99","hashOfConfig":"58"},{"size":803,"mtime":1610798296904,"results":"100","hashOfConfig":"58"},{"size":750,"mtime":1611074973415,"results":"101","hashOfConfig":"58"},{"size":1844,"mtime":1610816211075,"results":"102","hashOfConfig":"58"},{"size":439,"mtime":1610663330991,"results":"103","hashOfConfig":"58"},{"size":684,"mtime":1610816014241,"results":"104","hashOfConfig":"58"},{"size":721,"mtime":1610816014244,"results":"105","hashOfConfig":"58"},{"size":734,"mtime":1610816014246,"results":"106","hashOfConfig":"58"},{"size":2909,"mtime":1611074248382,"results":"107","hashOfConfig":"58"},{"size":4935,"mtime":1611005936298,"results":"108","hashOfConfig":"58"},{"size":5543,"mtime":1611075307582,"results":"109","hashOfConfig":"58"},{"size":1614,"mtime":1611079418487,"results":"110","hashOfConfig":"58"},{"size":1035,"mtime":1610877232916,"results":"111","hashOfConfig":"58"},{"size":149,"mtime":1610874072135,"results":"112","hashOfConfig":"58"},{"size":3756,"mtime":1611079363370,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"1xj99ui",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"121"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"121"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"121"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"121"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"121"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"121"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"121"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"121"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jamesjohnson/Projects/climbing-topos/app/src/index.js",[],["238","239"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/reportWebVitals.js",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/App.tsx",[],["240","241"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Nav.tsx",["242"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nfunction Nav() {\n  const [navBarMenuClass, setNavBarMenuClass] = useState(\"\");\n  const { isAuthenticated, loginWithRedirect } = useAuth0();\n\n  const btnBurgerMenuOnClick = () => {\n    if (navBarMenuClass === \"is-active\") {\n      setNavBarMenuClass(\"\");\n    } else {\n      setNavBarMenuClass(\"is-active\");\n    }\n  };\n\n  return (\n    <nav className=\"navbar has-shadow\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand\">\n        <Link className=\"navbar-item has-text-weight-medium\" to=\"/\">\n          ClimbingTopos.com\n        </Link>\n\n        <a\n          className=\"navbar-burger burger\"\n          aria-label=\"menu\"\n          aria-expanded=\"false\"\n          data-target=\"navbarBasicExample\"\n          onClick={ btnBurgerMenuOnClick }\n        >\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </a>\n      </div>\n\n      <div\n        id=\"navbarBasicExample\"\n        className={`navbar-menu ${navBarMenuClass}`}\n      >\n        <div className=\"navbar-start\">\n          <Link\n            className=\"navbar-item\"\n            to=\"/crags\"\n          >\n            Crags\n          </Link>\n          <Link\n            className=\"navbar-item\"\n            to=\"/crags-map\"\n          >\n            Map\n          </Link>\n        </div>\n\n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n            <Link to=\"/search\" className=\"navbar-item\">\n              <i className=\"fas fa-search\"></i>\n            </Link>\n          </div>\n          <div className=\"navbar-item\">\n          { isAuthenticated \n            ? <Link to=\"/profile\">\n                <button className=\"button\">\n                  <span className=\"icon\">\n                    <i className=\"fas fa-user\"></i>\n                  </span>\n                  <span>Profile</span>\n                </button>\n              </Link>\n            : <button className=\"button\" onClick={ loginWithRedirect }>\n                <span className=\"icon\">\n                  <i className=\"fas fa-user\"></i>\n                </span>\n                <span>Login</span>\n              </button>\n          }\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/auth0-provider-with-history.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/protected-route.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/area/Area.tsx",["243"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { Area } from \"core/types\";\nimport { areas } from \"../../api\";\nimport AreaRoutesTable from \"../../components/AreaRoutesTable\";\nimport ButtonCopyCoordinates from \"../../components/ButtonCopyCoordinates\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport TopoImage from \"../../components/TopoImage\";\nimport { popupError } from '../../helpers/alerts';\nimport { usePageTitle } from \"../../helpers/pageTitle\";\n\nfunction AreaView() {\n  const { getAccessTokenSilently, isAuthenticated, isLoading } = useAuth0();\n  const { areaSlug, cragSlug } = useParams<{ areaSlug: string; cragSlug: string }>();\n  const [area, setArea] = useState<Area>();\n  const [loading, setLoading] = useState(true);\n\n  usePageTitle(area?.title);\n\n  useEffect(() => {\n    const doGetArea = async () => {\n      try {\n        setLoading(true);\n        const token = isAuthenticated\n          ? await getAccessTokenSilently()\n          : \"\";\n        const area = await areas.getArea(areaSlug, token);\n        setArea(area);\n      } catch (error) {\n        console.error(\"Error loading area\", error);\n        popupError(\"Oh dear, there was a problem loading this area\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isLoading === false) {\n      doGetArea();\n    }\n  }, [areaSlug, isAuthenticated, isLoading]);\n\n  return (\n    <>\n      { loading && (\n        <section className=\"section\">\n          <div className=\"container\">\n            <LoadingSpinner />\n          </div>\n        </section>\n      )}\n      <section className={`section ${ loading ? \"is-hidden\" : \"\" }`}>\n        <div className=\"container\">\n          <div className=\"columns\">\n            <div className=\"column is-two-thirds\">\n              <h1 className=\"title is-spaced is-capitalized\">{ area?.title }</h1>\n              <h6 className=\"subtitle is-6\">{ area?.description }</h6>\n              <h6 className=\"subtitle is-6\">{ area?.approachNotes }</h6>\n              <h6 className=\"subtitle is-6\">{ area?.accessDetails }</h6>\n            </div>\n            <div className=\"column\">\n              <div role=\"group\" className=\"tags\">\n                <label className={ `tag is-capitalized ${ area?.access === \"banned\" ? \"is-danger \" : \"is-primary\" }` }>\n                  Access { area?.access }\n                </label>\n                {area?.tags.map(tag => (\n                  <label key={ tag } className=\"tag is-primary\">\n                    { tag }\n                  </label>\n                ))} \n              </div>\n              <div className=\"buttons has-addons is-right\">\n                <ButtonCopyCoordinates\n                  latitude={ `${area?.latitude}` }\n                  longitude={ `${area?.longitude}` }\n                />\n                <Link\n                  to={ `/crags/${cragSlug}/areas/${areaSlug}/create-topo` }\n                  className=\"button is-rounded\"\n                >\n                  <span className=\"icon is-small\">\n                    <i className=\"fas fa-plus\"></i>\n                  </span>\n                  <span>Add Topo</span>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"section\">\n        {area?.topos && area?.topos.map((topo) => (\n          <div key={ topo.slug } id={ topo.slug } className=\"container block\">\n            <div className=\"columns\">\n              <div className=\"column\">\n                <TopoImage\n                  routes={ area.routes?.filter(route => route.topoSlug === topo.slug) }\n                  background={ `${topo.image}` }\n                />\n              </div>\n              <div className=\"column\">\n                <div className=\"block is-flex is-justify-content-space-between is-align-items-center\">\n                  <span className=\"icon-text\">\n                    <span className=\"icon\">\n                      <i className=\"fas fa-compass\"></i>\n                    </span>\n                    <span className=\"is-capitalized\">{ topo.orientation }</span>\n                  </span>\n                  <Link\n                    to={ `/crags/${cragSlug}/areas/${areaSlug}/topos/${topo.slug}/create-route` }\n                    className=\"button is-rounded\"\n                  >\n                    <span className=\"icon is-small\">\n                      <i className=\"fas fa-plus\"></i>\n                    </span>\n                    <span>Add Route</span>\n                  </Link>\n                </div>\n                { area.routes?.filter(route => route.topoSlug === topo.slug).length ? (\n                  <div className=\"block box\">\n                    <AreaRoutesTable\n                      routes={ area.routes?.filter(route => route.topoSlug === topo.slug) }\n                      loggedRoutes={ area.userLogs }\n                    />\n                  </div>\n                ) : \"\" }\n              </div>\n            </div>\n          </div>\n        ))}\n      </section>\n\n      { loading === false && area?.topos.length === 0 && (\n        <section className=\"section\">\n          <div className=\"container box\">\n            <p><b>There's nothing here... YET!</b><br/>Click \"Add Topo\" above to start uploding images and drawing routes</p>\n          </div>\n        </section>\n      )}\n    </>\n  );\n}\n\nexport default AreaView;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crag/Crag.tsx",["244","245","246","247","248","249"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags/Crags.tsx",["250"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-area/CreateArea.tsx",["251"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { NewAreaSchema } from \"core/schemas\";\nimport { Crag } from \"core/types\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport * as yup from \"yup\";\nimport { areas, crags } from \"../../api\";\nimport { areaTags as tags, rockTypes } from \"core/globals\";\nimport { popupError, popupSuccess } from \"../../helpers/alerts\";\nimport { getCurrentPosition } from '../../helpers/geolocation';\n\nconst schema = NewAreaSchema(yup);\n\nfunction CreateArea() {\n  const history = useHistory();\n  const { getAccessTokenSilently } = useAuth0();\n  const { cragSlug } = useParams<{ cragSlug: string }>();\n  const [locationLoading, setLocationLoading] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [crag, setCrag] = useState<Crag>();\n\n  const { register, setValue, handleSubmit, errors, watch } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n    defaultValues: {\n      access: \"unknown\",\n      accessDetails: \"\",\n      approachNotes: \"\",\n      description: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      rockType: \"\",\n      tags: [] as string[],\n      title: \"\",\n    }\n  });\n\n  const watchTags = watch(\"tags\", []);\n\n  useEffect(() => {\n    const getCrag = async () => {\n      try {\n        const token = await getAccessTokenSilently();\n        const newCrag = await crags.getCragBySlug(cragSlug, token);\n        setCrag(newCrag);\n      } catch(error) {\n        console.error(\"Error getting area crag\", error);\n      }\n    }\n\n    getCrag();\n  }, [cragSlug]);\n\n  const btnFindMeOnClick = async () => {\n    setLocationLoading(true);\n\n    try {\n      const location = await getCurrentPosition();\n      setValue(\"latitude\", `${location.coords.latitude}`);\n      setValue(\"longitude\", `${location.coords.longitude}`);\n    } catch (error) {\n      console.error('Error loading user location', error);\n    } finally {\n      setLocationLoading(false);\n    }\n  }\n\n  const formOnSubmit = handleSubmit(async (formData) => {\n    setLoading(true);\n\n    try {\n      if (!crag) {\n        throw new Error(\"Cannot create new route, crag not found\");\n      }\n\n      const token = await getAccessTokenSilently();\n      const { slug: areaSlug } = await areas.createArea(\n        {\n          ...formData,\n          country: crag.osmData.address.country,\n          countryCode: crag.osmData.address.country_code,\n          county: crag.osmData.address.county,\n          cragSlug,\n          cragTitle: crag.title,\n          state: crag.osmData.address.state,\n        },\n        token\n      );\n      await popupSuccess(\"Area Created!\");\n      history.push(`/crags/${cragSlug}/areas/${areaSlug}`);\n    } catch (error) {\n      console.error('Error creating crag', error);\n      popupError(\"Ahh, something has gone wrong...\");\n    } finally {\n      setLoading(false);\n    }\n  });\n\n  return (\n    <section className=\"section\">\n      <div className=\"container box\">\n        <form\n          onSubmit={ formOnSubmit }\n          style={{ display: \"flex\", flexDirection: \"column\" }}\n          autoComplete=\"off\"\n        >\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"title\">Title</label>\n            <div className=\"control\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"title\"\n                ref={ register }\n              />\n            </div>\n            <p className=\"help is-danger\">{ errors.title?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"description\">Description</label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                name=\"description\"\n                ref={ register }\n              ></textarea> \n            </div>\n            <p className=\"help is-danger\">{ errors.description?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"approachNotes\">Approach Notes</label>\n            <div className=\"control\">\n              <textarea\n                id=\"approachNotes\"\n                className=\"textarea\"\n                name=\"approachNotes\"\n                ref={ register }\n              ></textarea> \n            </div>\n            <p className=\"help is-danger\">{ errors.approachNotes?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Tags</label>\n            <div className=\"field is-grouped is-grouped-multiline\">\n              <div role=\"group\" className=\"tags\">\n                {tags.map(tag => (\n                  <label\n                    key={ tag }\n                    className={`\n                      tag\n                      ${watchTags?.includes(tag) ? \"is-primary\" : \"\"}\n                    `}\n                  >\n                    <input\n                      type=\"checkbox\"\n                      name=\"tags\"\n                      value={ tag }\n                      ref={ register }\n                      style={{ display: \"none\" }}\n                    />\n                    { tag }\n                  </label>\n                ))} \n              </div>\n            </div>\n            <p className=\"help is-danger\">{ (errors.tags as any)?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Rock Type</label>\n            <div className=\"control is-expanded\">\n              <div className=\"select is-fullwidth\">\n                <select name=\"rockType\" ref={ register }>\n                  {rockTypes.map(rockType => (\n                    <option key={ rockType } value={ rockType }>{ rockType }</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            <p className=\"help is-danger\">{ errors.rockType?.message }</p>\n          </div>\n\n\n          <div className=\"field\">\n            <div className=\"field\">\n              <label className=\"label\">Area Location</label>\n              <div className=\"field has-addons\">\n                <div className=\"control is-expanded has-icons-right\">\n                  <input\n                    disabled={ locationLoading }\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Latitude\"\n                    name=\"latitude\"\n                    ref={ register }\n                  />\n                </div>\n                <div className=\"control is-expanded has-icons-right\">\n                  <input\n                    disabled={ locationLoading }\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Logitude\"\n                    name=\"longitude\"\n                    ref={ register }\n                  />\n                </div>\n                <div className=\"control\">\n                  <button\n                    type=\"button\"\n                    className={`\n                      button\n                      ${locationLoading ? \"is-loading\" : \"\"}\n                    `}\n                    onClick={ () => btnFindMeOnClick() }\n                  >\n                    <span className=\"icon\">\n                      <i className=\"fas fa-map-marker-alt\"></i>\n                    </span>\n                    <span>Find Me</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"help is-danger\">{ errors.latitude?.message }</div>\n            <div className=\"help is-danger\">{ errors.longitude?.message }</div>\n          </div>\n          \n          <div className=\"field\">\n            <label className=\"label\">Access</label>\n            <div className=\"control\">\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"unknown\"\n                  ref={ register }\n                />\n                Unknown\n              </label>\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"permitted\"\n                  ref={ register }\n                />\n                Permitted\n              </label>\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"restricted\"\n                  ref={ register }\n                />\n                Restricted\n              </label>\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"banned\"\n                  ref={ register }\n                />\n                Banned\n              </label>\n            </div>\n            <p className=\"help is-danger\"></p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"accessDetails\">Access Details</label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                name=\"accessDetails\"\n                ref={ register }\n              /> \n            </div>\n          </div>\n\n          <div className=\"field\">\n            <div className=\"field is-flex is-justified-end\">\n              <div className=\"control\">\n                <button type=\"submit\" className={`button is-primary ${loading ? \"is-loading\" : \"\"}`}>\n                  <span>Continue</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n}\n\nexport default CreateArea;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-crag/CreateCrag.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-route/CreateRoute.tsx",["252"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { NewRouteScheme } from \"core/schemas\";\nimport { Area, RouteDrawing } from \"core/types\";\nimport { gradingSystems } from \"core/globals\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from 'react-router-dom';\nimport * as yup from \"yup\";\nimport { areas, globals, routes, topos } from \"../../api\";\nimport TopoCanvas from \"../../components/TopoCanvas\";\nimport { popupError, popupSuccess } from \"../../helpers/alerts\";\n\nconst schema = NewRouteScheme(yup);\n\nfunction CreateRoute() {\n  const history = useHistory();\n  const { getAccessTokenSilently, isAuthenticated } = useAuth0();\n  const { areaSlug, cragSlug, topoSlug } = useParams<{ areaSlug: string; cragSlug: string, topoSlug: string }>();\n  const [routeTags, setRouteTags] = useState<string[]>([]);\n  const [routeTypes, setRouteTypes] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [area, setArea] = useState<Area | undefined>();\n  const [backgroundImageURL, setBackgroundImageURL] = useState(\"\");\n\n  const { register, getValues, setValue, handleSubmit, errors, watch } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n    defaultValues: {\n      areaSlug,\n      cragSlug,\n      description: \"\",\n      drawing: { path: [] },\n      grade: \"\",\n      gradingSystem: \"\",\n      rating: -1,\n      routeType: \"\",\n      tags: [] as string[],\n      title: \"\",\n      topoSlug,\n    }\n  });\n\n  const watchTags = watch(\"tags\");\n  const watchGradingSystem = watch(\"gradingSystem\", \"\");\n\n  useEffect(() => {\n    const doGetArea = async () => {\n      try {\n        const token = isAuthenticated\n          ? await getAccessTokenSilently()\n          : \"\";\n        const area = await areas.getArea(areaSlug, token);\n        setArea(area);\n      } catch (error) {\n        console.error(\"Error loading area\", error);\n        popupError(\"Oh dear, there was a problem loading this area\");\n      }\n    };\n\n    const doGetTopo = async () => {\n      const topo = await topos.getTopo(topoSlug);\n      setBackgroundImageURL(`${topo.image}`);\n    }\n\n    doGetArea();\n    doGetTopo();\n    doGetTags();\n    doGetRouteTypes();\n  }, [areaSlug, isAuthenticated, topoSlug]);\n\n  const doGetTags = async () => {\n    const routeTags = await globals.getRouteTags();\n    setRouteTags(routeTags);\n  }\n\n  const doGetRouteTypes = async () => {\n    const routeTypes = await globals.getRouteTypes();\n    setRouteTypes(routeTypes);\n  }\n\n  const getGradesFromGradingSystem = (gradingSystem: string) => {\n    const grades = gradingSystems?.find(_gradingSystem => _gradingSystem.title === gradingSystem)?.grades;\n    return grades;\n  }\n\n  const onDrawingChanged = (drawing: RouteDrawing) => {\n    setValue(\"drawing\", JSON.stringify(drawing));\n  }\n\n  const formOnSubmit = handleSubmit(async (formData) => {\n    try {\n      setLoading(true);\n\n      if (!area) {\n        throw new Error(\"Error creating route, area not found\");\n      }\n\n      const token = await getAccessTokenSilently();\n      const { routeSlug } = await routes.createRoute(\n        {\n          ...formData,\n          areaTitle: area.title,\n          country: area.country,\n          countryCode: area.countryCode,\n          county: area.county,\n          cragTitle: area.cragTitle,\n          latitude: area.latitude,\n          longitude: area.longitude,\n          rating: -1,\n          rockType: area.rockType,\n          state: area.state,\n        },\n        token\n      );\n      await popupSuccess(\"Route Created!\");\n      history.push(`/crags/${cragSlug}/areas/${areaSlug}#${routeSlug}`);\n    } catch (error) {\n      console.error('Error creating crag', error);\n      popupError(\"Ahh, something has gone wrong...\");\n    } finally {\n      setLoading(false);\n    }\n  });\n\n  return (\n    <>\n      <section className=\"section\">\n        <div className=\"container\">\n          <TopoCanvas\n            routes={ area?.routes?.filter(route => route.topoSlug === topoSlug) }\n            backgroundImageURL={ backgroundImageURL }\n            onDrawingChanged={ onDrawingChanged }\n          />\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container box\">\n          <form\n            onSubmit={ formOnSubmit }\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n            autoComplete=\"off\"\n          >\n            <input\n              className=\"is-hidden\"\n              name=\"cragSlug\"\n              defaultValue={ cragSlug }\n              ref={ register }\n            />\n            <input\n              className=\"is-hidden\"\n              name=\"areaSlug\"\n              defaultValue={ areaSlug }\n              ref={ register }\n            />\n            <input\n              className=\"is-hidden\"\n              name=\"topoSlug\"\n              defaultValue={ topoSlug }\n              ref={ register }\n            />\n            <input\n              className=\"is-hidden\"\n              name=\"drawing\"\n              ref={ register }\n            />\n            <div className=\"field\">\n              <label className=\"label\" htmlFor=\"title\">Title</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  name=\"title\"\n                  ref={ register }\n                />\n              </div>\n              <p className=\"help is-danger\">{ errors.title?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\" htmlFor=\"description\">Description</label>\n              <div className=\"control\">\n                <textarea\n                  className=\"textarea\"\n                  name=\"description\"\n                  ref={ register }\n                ></textarea> \n              </div>\n              <p className=\"help is-danger\">{ errors.description?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Tags</label>\n              <div className=\"field is-grouped is-grouped-multiline\">\n                <div role=\"group\" className=\"tags\">\n                  {routeTags.map(tag => (\n                    <label\n                      key={ tag }\n                      className={`\n                        tag\n                        ${watchTags?.includes(tag) ? \"is-primary\" : \"\"}\n                      `}\n                    >\n                      <input\n                        type=\"checkbox\"\n                        name=\"tags\"\n                        value={ tag }\n                        ref={ register }\n                        style={{ display: \"none\" }}\n                      />\n                      { tag }\n                    </label>\n                  ))} \n                </div>\n              </div>\n              <p className=\"help is-danger\">{ (errors.tags as any)?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Route Type</label>\n              <div className=\"control is-expanded\">\n                <div className=\"select is-fullwidth\">\n                  <select name=\"routeType\" ref={ register }>\n                    {routeTypes.map((routeType) => (\n                      <option key={ routeType } value={ routeType }>{ routeType }</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <p className=\"help is-danger\">{ errors.routeType?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Grading System</label>\n              <div className=\"control is-expanded\">\n                <div className=\"select is-fullwidth\">\n                  <select name=\"gradingSystem\" ref={ register }>\n                    {gradingSystems.map((gradingSystem) => (\n                      <option key={ gradingSystem.title } value={ gradingSystem.title }>{ gradingSystem.title }</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <p className=\"help is-danger\">{ errors.gradingSystem?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Grade</label>\n              <div className=\"contro is-expandedl\">\n                <div className=\"select is-fullwidth\">\n                  <select name=\"grade\" ref={ register }>\n                    {watchGradingSystem && getGradesFromGradingSystem(getValues(\"gradingSystem\"))?.map((grade) => (\n                      <option key={ grade } value={ grade }>{ grade }</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <p className=\"help is-danger\">{ errors.grade?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <div className=\"field is-flex is-justified-end\">\n                <div className=\"control\">\n                  <button\n                    className={ `button is-primary ${ loading ? \"is-loading\" : \"\" }` }\n                  >\n                    Create Route\n                  </button>\n                </div>\n              </div>\n            </div>\n          </form>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default CreateRoute;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-topo/CreateTopo.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/home/Home.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/profile/Profile.tsx",["253","254"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/route/Route.tsx",["255","256","257","258","259","260"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/logs.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/crags.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/alerts.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/clipboard.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/pageTitle.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/geolocation.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/nominatim.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ButtonCopyCoordinates.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/AreaRoutesTable.tsx",["261"],"import Tippy from '@tippyjs/react';\nimport React, { ChangeEvent, useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Log, Route } from \"../../../core/types\";\nimport { RouteLogContext } from './RouteLogContext';\n\ninterface Props {\n  routes: Route[] | undefined;\n  loggedRoutes: Log[];\n}\n\nfunction AreaRoutesTable({ routes, loggedRoutes, }: Props) {\n  const context = useContext(RouteLogContext);\n\n  const chkRouteOnChange = (event: ChangeEvent<HTMLInputElement>, route: Route) => {\n    if (context.selectedRoutes.findIndex(({ slug }) => slug === route.slug) > -1) {\n      context.onRouteDeselected(route);\n    } else {\n      context.onRouteSelected(route);\n    }\n  }\n\n  const hasUserLoggedRoute = (routeSlug: string) => {\n    return loggedRoutes.findIndex(log => log.routeSlug === routeSlug) !== -1\n      || context.routesJustLogged.findIndex(route => route.slug === routeSlug) !== -1;\n  }\n\n  return (\n    <table className=\"table is-fullwidth\">\n      <thead>\n        <tr>\n          <th></th>\n          <th>Route</th>\n          <th>Grade</th>\n          <th>Rating</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        {routes?.map((route, index) => (\n          <tr key={ route.title } className={ hasUserLoggedRoute(String(route.slug)) ? \"line-through\" : \"\" }>\n            <td>{ index + 1 }</td>\n            <td className=\"is-capitalized\">\n              <Link to={ `/crags/${route.cragSlug}/areas/${route.areaSlug}/topo/${route.topoSlug}/routes/${route.slug}` }>{ route.title }</Link>\n            </td>\n            <td>{ route.grade }</td>\n            <td>{ route.rating !== -1 ? route.rating : \"\" }</td>\n            <td> { context.isSelectingMultiple\n              ? (\n                  <input\n                    type=\"checkbox\"\n                    checked={ context.selectedRoutes.findIndex(({ slug }) => slug === route.slug) !== -1 }\n                    onChange={ (e) => chkRouteOnChange(e, route) }\n                  />\n                )\n              : (\n                  <Tippy\n                    trigger=\"click\"\n                    interactive={ true }\n                    theme=\"light-border\"\n                    placement=\"bottom-end\"\n                    hideOnClick={ true }\n                    content={\n                      <div className=\"dropdown is-active\">\n                        <div className=\"dropdown-menu\" style={{ position: \"relative\" }}>\n                          <div className=\"dropdown-content\">\n                            <button\n                              className=\"dropdown-item button is-white is-cursor-pointer\"\n                              onClick={ () => { context.onSingleRouteDone(route) } }\n                            >\n                              <span className=\"icon\">\n                                <i className=\"fas fw fa-check\"></i>\n                              </span>\n                              <span>Done</span>\n                            </button>\n                            <button\n                              className=\"dropdown-item button is-white is-cursor-pointer\"\n                              onClick={ () => { context.onSingleRouteAddToList(route) } }\n                            >\n                              <span className=\"icon\">\n                                <i className=\"fas fw fa-list\"></i>\n                              </span>\n                              <span>Save to List</span>\n                            </button>\n                            <hr className=\"dropdown-divider\" />\n                            <button\n                              className=\"dropdown-item button is-white is-cursor-pointer\"\n                              onClick={ () => context.onInitSelectMultiple(true, route) }\n                            >\n                              <span className=\"icon\">\n                                <i className=\"far fw fa-check-square\"></i>\n                              </span>\n                              <span>Select Multiple</span>\n                            </button> \n                          </div>\n                        </div>\n                      </div>\n                    }\n                  >\n                    <i className=\"fas fa-ellipsis-h\"></i>\n                  </Tippy>\n                )\n              }\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport default AreaRoutesTable;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LoadingSpinner.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToLogModal.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImage.tsx",["262"],"import React, {useEffect, useState} from \"react\";\nimport \"./TopoImage.css\";\nimport { SmoothPath } from \"../helpers/svg\";\nimport { Route, RouteDrawing } from \"../../../core/types\";\nimport TopoImageStartTag from \"./TopoImageStartTag\";\n\ninterface PropTypes {\n  routes: Route[];\n  background: string;\n  highlightedRouteSlug?: string;\n}\n\nfunction TopoImage({ routes, background, highlightedRouteSlug }: PropTypes) {\n  const [joinedRoutePaths, setJoinedRoutePaths] = useState<number[][][]>([]);\n  const [routeLabels, setRouteLabels] = useState<{ [key: string]: (string | number)[] }>({});\n\n  useEffect(() => {\n    const newJoinedRoutePaths = routes.map(route => {\n      return joinLinkedRoutes(route.drawing, routes);\n    });\n\n    setJoinedRoutePaths(newJoinedRoutePaths);\n  }, [routes]);\n\n  useEffect(() => {\n    const newRouteLabels = { ...routeLabels };\n\n    joinedRoutePaths.forEach((path, index) => {\n      const startX = Math.floor(path[0][0]);\n      const startY = Math.floor(path[0][1]);\n      const endX = Math.floor(path[path.length - 1][0]);\n      const endY = Math.floor(path[path.length - 1][1]);\n\n      newRouteLabels[`${startX},${startY}`] = Array.from(\n        new Set([\n          ...(newRouteLabels[`${startX},${startY}`] || []),\n          index + 1\n        ])\n      );\n\n      newRouteLabels[`${endX},${endY}`] = Array.from(\n        new Set([\n          ...(newRouteLabels[`${endX},${endY}`] || []),\n          index + 1\n        ])\n      );\n    });\n\n    setRouteLabels(newRouteLabels);\n  }, [joinedRoutePaths]);\n\n  const getRouteStrokeOpacity = (routeSlug: string) => {\n    if (highlightedRouteSlug && highlightedRouteSlug === routeSlug) {\n      return 1;\n    } else if (!highlightedRouteSlug) {\n      return 1;\n    }\n\n    return 0.5;\n  }\n\n  const joinLinkedRoutes = (\n    routeDrawing: RouteDrawing,\n    routes: Route[],\n  ) => {\n    let joinedPathPoints: number[][] = [];\n\n    if (routeDrawing.linkFrom?.routeSlug) {\n      const linkFromPath = routes.find(route => route.slug === routeDrawing!.linkFrom!.routeSlug)!.drawing.path;\n      const joinIndex = linkFromPath?.findIndex(([x, y]) => {\n        return Math.abs(x - routeDrawing!.linkFrom!.x) <= 5 && Math.abs(y - routeDrawing!.linkFrom!.y) <= 5;\n      });\n      const slicedPath = linkFromPath!.slice(0, joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    joinedPathPoints = [...joinedPathPoints, ...routeDrawing.path];\n\n    if (routeDrawing.linkTo?.routeSlug) {\n      const linkToPath = routes.find(route => route.slug === routeDrawing!.linkTo!.routeSlug)!.drawing.path;\n      const joinIndex = linkToPath?.findIndex(([x, y]) => {\n        return Math.abs(x - routeDrawing!.linkTo!.x) <= 5 && Math.abs(y - routeDrawing!.linkTo!.y) <= 5;\n      });\n      const slicedPath = linkToPath!.slice(joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    return joinedPathPoints;\n  }\n\n  return (\n    <div className=\"area-topo-image\">\n      <img src={ background } alt=\"topo\"/>\n      <div className=\"area-topo-image--canvas\">\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 1000 1000\">\n          {routes?.map((route) => (\n            <path\n              key={ route.slug }\n              d={ SmoothPath(joinLinkedRoutes(route.drawing, routes)) }\n              fill=\"transparent\"\n              stroke=\"yellow\"\n              strokeWidth=\"4\"\n              strokeOpacity={ getRouteStrokeOpacity(`${route.slug}`) }\n            />\n          ))}\n          {Object.entries(routeLabels).map(([ coords, routes ], index) => (\n            <TopoImageStartTag\n              key={ index }\n              content={ routes.join(\", \") }\n              x={ parseInt(coords.split(\",\")[0], 10) }\n              y={ parseInt(coords.split(\",\")[1], 10) }\n            />\n          ))}\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nexport default TopoImage;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoCanvas.tsx",["263"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { Route } from \"../../../core/types\";\nimport { domToSvgPoint, ReducePath, SmoothPath } from \"../helpers/svg\";\nimport { RouteDrawing } from \"../../../core/types\";\n\nimport \"./TopoCanvas.css\";\n\nenum PointerState {\n  up = \"up\",\n  down = \"down\"\n}\n\nconst strokeColor = \"yellow\";\nconst strokeWidth = \"4\";\n\nfunction TopoCanvas({backgroundImageURL, onDrawingChanged, routes}: {backgroundImageURL: string; onDrawingChanged: Function, routes: Route[] | undefined}) {\n  const [finishXY, setFinishXY] = useState([-1, -1]);\n  const [linkFrom, setLinkFrom] = useState<{routeSlug: string; x: number; y: number;} | undefined>();\n  const [linkTo, setLinkTo] = useState<{routeSlug: string; x: number; y: number;} | undefined>();\n  const [pointerState, setPointerState] = useState<PointerState>(PointerState.up);\n  const [existingRoutes, setExistingRoutes] = useState<Map<string, number[][]>>(new Map());\n  const [routePath, setRoutePath] = useState<number[][]>();\n  const [completePath, setCompletePath] = useState<number[][]>([]);\n  const [routeDrawing, setRouteDrawing] = useState<RouteDrawing>();\n\n  const canvasElement = useRef<SVGSVGElement>(document.querySelector(\"svg\") as SVGSVGElement);\n\n  useEffect(() => {\n    if (canvasElement.current) {\n      canvasElement.current.addEventListener(\"touchstart\", event => {\n        event.preventDefault();\n      });\n    }\n  }, [canvasElement]);\n\n  useEffect(() => {\n    if (routes) {\n      const newExistingRoutes = new Map(existingRoutes);\n\n      routes.forEach(route => {\n        const existingRouteCoordinatesArray = route.drawing?.path;\n\n        if (existingRouteCoordinatesArray) {\n          newExistingRoutes.set(`${route.slug}`, existingRouteCoordinatesArray);\n        }\n      });\n\n      setExistingRoutes(newExistingRoutes);\n    }\n  }, [routes]);\n\n  function findRouteUnderPointer(x: number, y: number): {x: number; y: number; parentRouteSlug: string} | undefined {\n    let parentRoute;\n\n    existingRoutes.forEach((pathPoints, routeSlug) => {\n      pathPoints.forEach(([x1, y1]) => {\n        if (Math.abs(x - x1) <= 5 && Math.abs(y - y1) <= 5) {\n          parentRoute = ({x: x1, y: y1, parentRouteSlug: routeSlug});\n        }\n      });\n    });\n\n    return parentRoute;\n  }\n\n  // TODO 99% the same as in TopoImage.tsx\n  function joinLinkedRoutes(\n    routePath: number[][],\n    linkFrom: { routeSlug: string, x: number; y: number } | undefined,\n    linkTo: { routeSlug: string; x: number; y: number } | undefined,\n    routes: Map<string, number[][]>\n  ) {\n    let joinedPathPoints: number[][] = [];\n\n    if (linkFrom) {\n      const linkFromPath = routes.get(linkFrom.routeSlug);\n      const joinIndex = linkFromPath?.findIndex(([x, y]) => {\n        return Math.abs(x - linkFrom.x) <= 5 && Math.abs(y - linkFrom.y) <= 5;\n      });\n      const slicedPath = linkFromPath!.slice(0, joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    joinedPathPoints = [...joinedPathPoints, ...routePath];\n\n    if (linkTo) {\n      const linkToPath = routes.get(linkTo.routeSlug);\n      const joinIndex = linkToPath?.findIndex(([x, y]) => {\n        return Math.abs(x - linkTo.x) <= 5 && Math.abs(y - linkTo.y) <= 5;\n      });\n      const slicedPath = linkToPath!.slice(joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    return joinedPathPoints;\n  }\n\n  function onPointerDown() {\n    setPointerState(PointerState.down);\n    setFinishXY([ -1, -1 ]);\n    setLinkTo(undefined);\n    setRoutePath(undefined);\n    setRouteDrawing({\n      path: [],\n      linkFrom,\n      linkTo\n    });\n  }\n\n  function onPointerUp() {\n    setPointerState(PointerState.up);\n    onDrawingChanged(routeDrawing);\n  }\n\n  function onPointerMove({clientX, clientY}: PointerEvent) {\n    if (pointerState === PointerState.down) {\n      onPointerDrag({clientX, clientY});\n      return;\n    }\n\n    const {x, y} = domToSvgPoint({x: clientX, y: clientY}, canvasElement.current);\n    const targetRoute = findRouteUnderPointer(x, y);\n\n    if (targetRoute && pointerState === PointerState.up) {\n      setLinkFrom({\n        x: Math.round(x * 100) / 100,\n        y: Math.round(y * 100) / 100,\n        routeSlug: targetRoute.parentRouteSlug\n      });\n    } else {\n      setLinkFrom(undefined);\n    }\n  }\n\n  function onPointerDrag({clientX, clientY}: {clientX: number, clientY: number}) {\n    const {x, y} = domToSvgPoint({x: clientX, y: clientY}, canvasElement.current);\n    const targetRoute = findRouteUnderPointer(x, y);\n\n    if (targetRoute && pointerState === PointerState.down) {\n      setLinkTo({\n        x,\n        y,\n        routeSlug: targetRoute.parentRouteSlug\n      });\n    } else {\n      setLinkTo(undefined);\n    }\n\n    setRoutePath(routePath\n      ? [...routePath, [x, y]]\n      : [[x, y]]\n    );\n\n    setRouteDrawing({\n      path: routePath || [],\n      linkFrom: routeDrawing?.linkFrom,\n      linkTo\n    });\n\n    if (routePath) {\n      const completePath = joinLinkedRoutes(\n        routePath,\n        routeDrawing?.linkFrom,\n        routeDrawing?.linkTo,\n        existingRoutes\n      );\n\n      setFinishXY(completePath.slice(-1)[0]);\n      setCompletePath(ReducePath(completePath));\n    }\n  }\n\n  return (\n    <>\n      <div className=\"notification is-primary\">\n        Make sure to draw route lines from <strong>start to finish</strong>\n      </div>\n      <div id=\"canvas-container\">\n        <img id=\"canvas-bg\" src={backgroundImageURL} alt=\"topo drawing canvas\" />\n        <div id=\"canvas\">\n          <svg\n            ref={canvasElement}\n            width=\"100%\"\n            height=\"100%\"\n            viewBox=\"0 0 1000 1000\"\n            onPointerUp={onPointerUp}\n            onPointerMove={ event => onPointerMove(event as unknown as PointerEvent)}\n            onPointerDown={onPointerDown}\n          >\n            {existingRoutes && [...existingRoutes.keys()].map(key => (\n              <path\n                key={key}\n                d={SmoothPath(existingRoutes.get(key) as number[][])}\n                strokeWidth={strokeWidth}\n                stroke={strokeColor}\n                strokeOpacity={0.5}\n                fill=\"none\"\n              />\n            ))}\n            {routeDrawing?.path?.length && (\n              <path\n                d={SmoothPath(completePath)}\n                stroke={strokeColor}\n                strokeWidth={strokeWidth}\n                fill=\"none\"\n              />\n            )}\n            {finishXY[0] !== -1 && finishXY[1] !== -1 && routeDrawing?.path?.length && (\n              <foreignObject x={finishXY[0] - 15} y={finishXY[1] - 30} width=\"30px\" height=\"30px\">\n                <div style={{width: \"30px\", height: \"30px\", position: \"relative\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                  <div style={{background: \"rgba(0, 0, 0, 0.8)\", padding: \"5px\", borderRadius: \"50em\", position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0}}></div>\n                  <i style={{fontSize: \"1rem\", zIndex: 1, color: \"#fff\"}} className=\"fas fa-flag\"></i>\n                </div>\n              </foreignObject>\n            )}\n            {((linkFrom && pointerState === \"up\") || (linkTo && pointerState === \"down\")) && (\n              <foreignObject x={(pointerState === \"up\" ? linkFrom!.x : linkTo!.x) - 15} y={(pointerState === \"up\" ? linkFrom!.y : linkTo!.y) - 30} width=\"30px\" height=\"30px\">\n                <div style={{width: \"30px\", height: \"30px\", position: \"relative\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                  <div style={{background: \"rgba(0, 0, 0, 0.8)\", padding: \"5px\", borderRadius: \"50em\", position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0}}></div>\n                  <i style={{fontSize: \"1rem\", zIndex: 1, color: \"#fff\"}} className=\"fas fa-link\"></i>\n                </div>\n              </foreignObject>\n            )}\n          </svg>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default TopoCanvas;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLogs.tsx",["264"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/index.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/queryString.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/svg.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Modal.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImageStartTag.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/areas.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/globals.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/topos.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/uploads.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/routes.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags-map/CragsMap.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMap.tsx",["265","266"],"import { useEffect } from \"react\";\nimport { DateTime } from \"luxon\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css';\nimport \"leaflet.markercluster/dist/MarkerCluster.css\";\nimport \"leaflet.markercluster/dist/MarkerCluster.Default.css\";\n\nimport leaflet from \"leaflet\";\nimport \"leaflet.markercluster\";\nimport \"leaflet-defaulticon-compatibility\";\n\ninterface Props {\n  markers: leaflet.Marker[],\n  height?: string,\n  center?: [number, number],\n  zoom?: number\n}\n\nlet map: leaflet.Map;\n\nconst getTimeStamp = async () => {\n  const res = await fetch(\"https://tilecache.rainviewer.com/api/maps.json\");\n  const dates = await res.json();\n\n  return dates.pop();\n}\n\nfunction LeafletMap({ markers, height = \"600px\", center, zoom }: Props) {\n\n  useEffect(() => {\n    const initMap = async () => {\n      if (map?.off) {\n        map.off();\n        map.remove();\n      }\n\n      const tiles = leaflet.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxNativeZoom: 19,\n        maxZoom: 20,\n      });\n\n      // const timestamp = await getTimeStamp();\n      // const precipitationNow = leaflet.tileLayer(`https://tilecache.rainviewer.com/v2/radar/${timestamp}/256/{z}/{x}/{y}/2/1_1.png`, {\n      //   maxNativeZoom: 19,\n      //   maxZoom: 20,\n      // });\n\n      map = leaflet.map('map', {\n        layers: [tiles],\n        ...(center && { center }),\n        ...(zoom && { zoom })\n      });\n\n      if (!center && !zoom) {\n        map.fitWorld();\n      }\n\n      const markersLayer = leaflet.markerClusterGroup();\n\n      markers.forEach(marker => {\n        markersLayer.addLayer(marker);\n      });\n\n      map.addLayer(markersLayer);\n    }\n\n    initMap();\n  });\n\n  return <div id=\"map\" style={{ width: \"100%\", height }}></div>;\n}\n\nexport default LeafletMap;\n",["267","268"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/search/Search.tsx",["269"],"import Tippy from '@tippyjs/react';\nimport SearchBox from \"../../components/SearchBox\";\nimport SearchResults from \"../../components/SearchResults\";\n\nfunction Search() {\n  return (\n    <>\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title\">Search</h1>\n          <div className=\"field is-grouped\">\n            <div className=\"control is-expanded has-icons-left\">\n              <span className=\"icon is-icon-left\">\n                <i className=\"fas fa-search\"></i>\n              </span>\n              <SearchBox />\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container\">\n          <SearchResults />\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default Search;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResults.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchBox.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMapMarkerClusterGroup.jsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultCrag.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultArea.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultRoute.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/CragMap.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RouteLogContext.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToListModal.tsx",["270"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/lists.ts",["271"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Footer.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/about/About.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLists.tsx",["272","273"],{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","replacedBy":"277"},{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","severity":1,"message":"279","line":24,"column":9,"nodeType":"280","endLine":30,"endColumn":10},{"ruleId":"281","severity":1,"message":"282","line":41,"column":6,"nodeType":"283","endLine":41,"endColumn":44,"suggestions":"284"},{"ruleId":"281","severity":1,"message":"282","line":51,"column":6,"nodeType":"283","endLine":51,"endColumn":44,"suggestions":"285"},{"ruleId":"278","severity":1,"message":"279","line":109,"column":21,"nodeType":"280","endLine":109,"endColumn":64},{"ruleId":"278","severity":1,"message":"279","line":113,"column":19,"nodeType":"280","endLine":113,"endColumn":63},{"ruleId":"278","severity":1,"message":"279","line":116,"column":19,"nodeType":"280","endLine":116,"endColumn":62},{"ruleId":"278","severity":1,"message":"279","line":119,"column":19,"nodeType":"280","endLine":119,"endColumn":65},{"ruleId":"278","severity":1,"message":"279","line":122,"column":19,"nodeType":"280","endLine":122,"endColumn":60},{"ruleId":"281","severity":1,"message":"286","line":18,"column":6,"nodeType":"283","endLine":18,"endColumn":34,"suggestions":"287"},{"ruleId":"281","severity":1,"message":"282","line":54,"column":6,"nodeType":"283","endLine":54,"endColumn":16,"suggestions":"288"},{"ruleId":"281","severity":1,"message":"282","line":70,"column":6,"nodeType":"283","endLine":70,"endColumn":43,"suggestions":"289"},{"ruleId":"278","severity":1,"message":"279","line":40,"column":15,"nodeType":"280","endLine":40,"endColumn":57},{"ruleId":"278","severity":1,"message":"279","line":43,"column":15,"nodeType":"280","endLine":43,"endColumn":58},{"ruleId":"290","severity":1,"message":"291","line":3,"column":9,"nodeType":"292","messageId":"293","endLine":3,"endColumn":13},{"ruleId":"290","severity":1,"message":"294","line":6,"column":8,"nodeType":"292","messageId":"293","endLine":6,"endColumn":27},{"ruleId":"290","severity":1,"message":"295","line":15,"column":63,"nodeType":"292","messageId":"293","endLine":15,"endColumn":80},{"ruleId":"290","severity":1,"message":"296","line":19,"column":10,"nodeType":"292","messageId":"293","endLine":19,"endColumn":25},{"ruleId":"290","severity":1,"message":"297","line":19,"column":27,"nodeType":"292","messageId":"293","endLine":19,"endColumn":45},{"ruleId":"281","severity":1,"message":"298","line":44,"column":6,"nodeType":"283","endLine":44,"endColumn":45,"suggestions":"299"},{"ruleId":"290","severity":1,"message":"300","line":2,"column":42,"nodeType":"292","messageId":"293","endLine":2,"endColumn":50},{"ruleId":"281","severity":1,"message":"301","line":50,"column":6,"nodeType":"283","endLine":50,"endColumn":24,"suggestions":"302"},{"ruleId":"281","severity":1,"message":"303","line":50,"column":6,"nodeType":"283","endLine":50,"endColumn":14,"suggestions":"304"},{"ruleId":"281","severity":1,"message":"282","line":32,"column":6,"nodeType":"283","endLine":32,"endColumn":34,"suggestions":"305"},{"ruleId":"290","severity":1,"message":"306","line":2,"column":10,"nodeType":"292","messageId":"293","endLine":2,"endColumn":18},{"ruleId":"290","severity":1,"message":"307","line":22,"column":7,"nodeType":"292","messageId":"293","endLine":22,"endColumn":19},{"ruleId":"274","replacedBy":"308"},{"ruleId":"276","replacedBy":"309"},{"ruleId":"290","severity":1,"message":"310","line":1,"column":8,"nodeType":"292","messageId":"293","endLine":1,"endColumn":13},{"ruleId":"281","severity":1,"message":"311","line":56,"column":6,"nodeType":"283","endLine":56,"endColumn":8,"suggestions":"312"},{"ruleId":"290","severity":1,"message":"313","line":1,"column":16,"nodeType":"292","messageId":"293","endLine":1,"endColumn":21},{"ruleId":"290","severity":1,"message":"314","line":2,"column":16,"nodeType":"292","messageId":"293","endLine":2,"endColumn":25},{"ruleId":"281","severity":1,"message":"282","line":37,"column":6,"nodeType":"283","endLine":37,"endColumn":34,"suggestions":"315"},"no-native-reassign",["316"],"no-negated-in-lhs",["317"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAccessTokenSilently'. Either include it or remove the dependency array.","ArrayExpression",["318"],["319"],"React Hook useEffect has a missing dependency: 'doGetCrags'. Either include it or remove the dependency array.",["320"],["321"],["322"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'RoutesAddToLogModal' is defined but never used.","'loginWithRedirect' is assigned a value but never used.","'routeJustLogged' is assigned a value but never used.","'setRouteJustLogged' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'areaSlug', 'cragSlug', 'getAccessTokenSilently', and 'topoSlug'. Either include them or remove the dependency array.",["323"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'routeLabels'. Either include it or remove the dependency array.",["324"],"React Hook useEffect has a missing dependency: 'existingRoutes'. Either include it or remove the dependency array.",["325"],["326"],"'DateTime' is defined but never used.","'getTimeStamp' is assigned a value but never used.",["316"],["317"],"'Tippy' is defined but never used.","React Hook useEffect has a missing dependency: 'getUserLists'. Either include it or remove the dependency array.",["327"],"'Route' is defined but never used.","'ListRoute' is defined but never used.",["328"],"no-global-assign","no-unsafe-negation",{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"345","fix":"349"},"Update the dependencies array to be: [areaSlug, getAccessTokenSilently, isAuthenticated, isLoading]",{"range":"350","text":"351"},"Update the dependencies array to be: [cragSlug, isLoading, isAuthenticated, getAccessTokenSilently]",{"range":"352","text":"353"},"Update the dependencies array to be: [isLoading, isAuthenticated, doGetCrags]",{"range":"354","text":"355"},"Update the dependencies array to be: [cragSlug, getAccessTokenSilently]",{"range":"356","text":"357"},"Update the dependencies array to be: [areaSlug, getAccessTokenSilently, isAuthenticated, topoSlug]",{"range":"358","text":"359"},"Update the dependencies array to be: [routeSlug, isAuthenticated, isLoading, getAccessTokenSilently, cragSlug, areaSlug, topoSlug]",{"range":"360","text":"361"},"Update the dependencies array to be: [joinedRoutePaths, routeLabels]",{"range":"362","text":"363"},"Update the dependencies array to be: [existingRoutes, routes]",{"range":"364","text":"365"},"Update the dependencies array to be: [isLoading, isAuthenticated, getAccessTokenSilently]",{"range":"366","text":"367"},"Update the dependencies array to be: [getUserLists]",{"range":"368","text":"369"},{"range":"370","text":"367"},[1432,1470],"[areaSlug, getAccessTokenSilently, isAuthenticated, isLoading]",[1734,1772],"[cragSlug, isLoading, isAuthenticated, getAccessTokenSilently]",[583,611],"[isLoading, isAuthenticated, doGetCrags]",[1701,1711],"[cragSlug, getAccessTokenSilently]",[2304,2341],"[areaSlug, getAccessTokenSilently, isAuthenticated, topoSlug]",[1694,1733],"[routeSlug, isAuthenticated, isLoading, getAccessTokenSilently, cragSlug, areaSlug, topoSlug]",[1500,1518],"[joinedRoutePaths, routeLabels]",[1838,1846],"[existingRoutes, routes]",[1113,1141],"[isLoading, isAuthenticated, getAccessTokenSilently]",[1719,1721],"[getUserLists]",[1386,1414]]