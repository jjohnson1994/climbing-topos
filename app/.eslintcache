[{"/Users/jamesjohnson/Projects/climbing-topos/app/src/index.js":"1","/Users/jamesjohnson/Projects/climbing-topos/app/src/reportWebVitals.js":"2","/Users/jamesjohnson/Projects/climbing-topos/app/src/App.tsx":"3","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Nav.tsx":"4","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/auth0-provider-with-history.tsx":"5","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/protected-route.tsx":"6","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/area/Area.tsx":"7","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crag/Crag.tsx":"8","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags/Crags.tsx":"9","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-area/CreateArea.tsx":"10","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-crag/CreateCrag.tsx":"11","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-route/CreateRoute.tsx":"12","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-topo/CreateTopo.tsx":"13","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/home/Home.tsx":"14","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/profile/Profile.tsx":"15","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/route/Route.tsx":"16","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/logs.ts":"17","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/crags.ts":"18","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/alerts.ts":"19","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/clipboard.ts":"20","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/pageTitle.ts":"21","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/geolocation.ts":"22","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/nominatim.ts":"23","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ButtonCopyCoordinates.tsx":"24","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/AreaRoutesTable.tsx":"25","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LoadingSpinner.tsx":"26","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToLogModal.tsx":"27","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImage.tsx":"28","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoCanvas.tsx":"29","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLogs.tsx":"30","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/index.ts":"31","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/queryString.ts":"32","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/svg.ts":"33","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Modal.tsx":"34","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImageStartTag.tsx":"35","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/areas.ts":"36","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/globals.ts":"37","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/topos.ts":"38","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/uploads.ts":"39","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/routes.ts":"40","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags-map/CragsMap.tsx":"41","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMap.tsx":"42","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/search/Search.tsx":"43","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResults.tsx":"44","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchBox.tsx":"45","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMapMarkerClusterGroup.jsx":"46","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultCrag.tsx":"47","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultArea.tsx":"48","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultRoute.tsx":"49","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/CragMap.tsx":"50","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RouteLogContext.tsx":"51","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToListModal.tsx":"52","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/lists.ts":"53","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Footer.tsx":"54","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/about/About.tsx":"55","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLists.tsx":"56","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileSettings.tsx":"57","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/profile.ts":"58","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/users.ts":"59"},{"size":500,"mtime":1610219466488,"results":"60","hashOfConfig":"61"},{"size":362,"mtime":1610219466497,"results":"62","hashOfConfig":"61"},{"size":4228,"mtime":1612814451388,"results":"63","hashOfConfig":"61"},{"size":2385,"mtime":1610816183776,"results":"64","hashOfConfig":"61"},{"size":859,"mtime":1612464942440,"results":"65","hashOfConfig":"61"},{"size":330,"mtime":1610219466466,"results":"66","hashOfConfig":"61"},{"size":5468,"mtime":1612648249859,"results":"67","hashOfConfig":"61"},{"size":10954,"mtime":1612634365680,"results":"68","hashOfConfig":"61"},{"size":3304,"mtime":1611080831376,"results":"69","hashOfConfig":"61"},{"size":7415,"mtime":1612627375654,"results":"70","hashOfConfig":"61"},{"size":13871,"mtime":1612626737439,"results":"71","hashOfConfig":"61"},{"size":8676,"mtime":1612635213429,"results":"72","hashOfConfig":"61"},{"size":4497,"mtime":1611871054244,"results":"73","hashOfConfig":"61"},{"size":1666,"mtime":1610747575263,"results":"74","hashOfConfig":"61"},{"size":2376,"mtime":1611136993240,"results":"75","hashOfConfig":"61"},{"size":5550,"mtime":1612898456120,"results":"76","hashOfConfig":"61"},{"size":2839,"mtime":1612898664739,"results":"77","hashOfConfig":"61"},{"size":1206,"mtime":1611506475203,"results":"78","hashOfConfig":"61"},{"size":1505,"mtime":1610219466477,"results":"79","hashOfConfig":"61"},{"size":99,"mtime":1610651067802,"results":"80","hashOfConfig":"61"},{"size":290,"mtime":1610448611947,"results":"81","hashOfConfig":"61"},{"size":369,"mtime":1610275063708,"results":"82","hashOfConfig":"61"},{"size":342,"mtime":1610219466479,"results":"83","hashOfConfig":"61"},{"size":994,"mtime":1610723259791,"results":"84","hashOfConfig":"61"},{"size":4736,"mtime":1612476224898,"results":"85","hashOfConfig":"61"},{"size":227,"mtime":1610219466469,"results":"86","hashOfConfig":"61"},{"size":8756,"mtime":1612635595300,"results":"87","hashOfConfig":"61"},{"size":4092,"mtime":1612898049074,"results":"88","hashOfConfig":"61"},{"size":7972,"mtime":1610819317657,"results":"89","hashOfConfig":"61"},{"size":2436,"mtime":1612816076217,"results":"90","hashOfConfig":"61"},{"size":352,"mtime":1612388118447,"results":"91","hashOfConfig":"61"},{"size":261,"mtime":1610219466486,"results":"92","hashOfConfig":"61"},{"size":1701,"mtime":1610219466487,"results":"93","hashOfConfig":"61"},{"size":1866,"mtime":1611079023918,"results":"94","hashOfConfig":"61"},{"size":1190,"mtime":1610219466476,"results":"95","hashOfConfig":"61"},{"size":857,"mtime":1611506850559,"results":"96","hashOfConfig":"61"},{"size":2321,"mtime":1612301176856,"results":"97","hashOfConfig":"61"},{"size":1862,"mtime":1611870324927,"results":"98","hashOfConfig":"61"},{"size":313,"mtime":1610219466464,"results":"99","hashOfConfig":"61"},{"size":930,"mtime":1612634218356,"results":"100","hashOfConfig":"61"},{"size":2151,"mtime":1610797723038,"results":"101","hashOfConfig":"61"},{"size":1748,"mtime":1610702798811,"results":"102","hashOfConfig":"103"},{"size":803,"mtime":1610798296904,"results":"104","hashOfConfig":"61"},{"size":750,"mtime":1611074973415,"results":"105","hashOfConfig":"61"},{"size":1844,"mtime":1610816211075,"results":"106","hashOfConfig":"61"},{"size":439,"mtime":1610663330991,"results":"107","hashOfConfig":"61"},{"size":684,"mtime":1610816014241,"results":"108","hashOfConfig":"61"},{"size":753,"mtime":1612636559911,"results":"109","hashOfConfig":"61"},{"size":741,"mtime":1611946733258,"results":"110","hashOfConfig":"61"},{"size":2909,"mtime":1612303393182,"results":"111","hashOfConfig":"61"},{"size":4935,"mtime":1611005936298,"results":"112","hashOfConfig":"61"},{"size":5543,"mtime":1611075307582,"results":"113","hashOfConfig":"61"},{"size":1614,"mtime":1611079418487,"results":"114","hashOfConfig":"61"},{"size":1035,"mtime":1610877232916,"results":"115","hashOfConfig":"61"},{"size":149,"mtime":1610874072135,"results":"116","hashOfConfig":"61"},{"size":3991,"mtime":1612120544616,"results":"117","hashOfConfig":"61"},{"size":3647,"mtime":1612635221938,"results":"118","hashOfConfig":"61"},{"size":1441,"mtime":1612120848730,"results":"119","hashOfConfig":"61"},{"size":300,"mtime":1612388157827,"results":"120","hashOfConfig":"61"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"609ugr",{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"128"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"128"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"128"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"128"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"128"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"128"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"128"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"128"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"128"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"128"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"128"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"128"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"128"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"221"},"1xj99ui",{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"128"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"128"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"128"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"128"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"128"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"128"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"/Users/jamesjohnson/Projects/climbing-topos/app/src/index.js",[],["262","263"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/reportWebVitals.js",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/App.tsx",[],["264","265"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Nav.tsx",["266"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nfunction Nav() {\n  const [navBarMenuClass, setNavBarMenuClass] = useState(\"\");\n  const { isAuthenticated, loginWithRedirect } = useAuth0();\n\n  const btnBurgerMenuOnClick = () => {\n    if (navBarMenuClass === \"is-active\") {\n      setNavBarMenuClass(\"\");\n    } else {\n      setNavBarMenuClass(\"is-active\");\n    }\n  };\n\n  return (\n    <nav className=\"navbar has-shadow\" role=\"navigation\" aria-label=\"main navigation\">\n      <div className=\"navbar-brand\">\n        <Link className=\"navbar-item has-text-weight-medium\" to=\"/\">\n          ClimbingTopos.com\n        </Link>\n\n        <a\n          className=\"navbar-burger burger\"\n          aria-label=\"menu\"\n          aria-expanded=\"false\"\n          data-target=\"navbarBasicExample\"\n          onClick={ btnBurgerMenuOnClick }\n        >\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </a>\n      </div>\n\n      <div\n        id=\"navbarBasicExample\"\n        className={`navbar-menu ${navBarMenuClass}`}\n      >\n        <div className=\"navbar-start\">\n          <Link\n            className=\"navbar-item\"\n            to=\"/crags\"\n          >\n            Crags\n          </Link>\n          <Link\n            className=\"navbar-item\"\n            to=\"/crags-map\"\n          >\n            Map\n          </Link>\n        </div>\n\n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n            <Link to=\"/search\" className=\"navbar-item\">\n              <i className=\"fas fa-search\"></i>\n            </Link>\n          </div>\n          <div className=\"navbar-item\">\n          { isAuthenticated \n            ? <Link to=\"/profile\">\n                <button className=\"button\">\n                  <span className=\"icon\">\n                    <i className=\"fas fa-user\"></i>\n                  </span>\n                  <span>Profile</span>\n                </button>\n              </Link>\n            : <button className=\"button\" onClick={ loginWithRedirect }>\n                <span className=\"icon\">\n                  <i className=\"fas fa-user\"></i>\n                </span>\n                <span>Login</span>\n              </button>\n          }\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/auth0-provider-with-history.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/protected-route.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/area/Area.tsx",["267"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { Area } from \"core/types\";\nimport { areas } from \"../../api\";\nimport AreaRoutesTable from \"../../components/AreaRoutesTable\";\nimport ButtonCopyCoordinates from \"../../components/ButtonCopyCoordinates\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport TopoImage from \"../../components/TopoImage\";\nimport { popupError } from '../../helpers/alerts';\nimport { usePageTitle } from \"../../helpers/pageTitle\";\nimport { useGlobals } from \"../../api/globals\";\n\nfunction AreaView() {\n  const { getAccessTokenSilently, isAuthenticated, isLoading } = useAuth0();\n  const { areaSlug, cragSlug } = useParams<{ areaSlug: string; cragSlug: string }>();\n  const [area, setArea] = useState<Area>();\n  const { getOrientationsTitleById } = useGlobals();\n  const [loading, setLoading] = useState(true);\n\n  usePageTitle(area?.title);\n\n  useEffect(() => {\n    const doGetArea = async () => {\n      try {\n        setLoading(true);\n        const token = isAuthenticated\n          ? await getAccessTokenSilently()\n          : \"\";\n        const area = await areas.getArea(areaSlug, token);\n        setArea(area);\n      } catch (error) {\n        console.error(\"Error loading area\", error);\n        popupError(\"Oh dear, there was a problem loading this area\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isLoading === false) {\n      doGetArea();\n    }\n  }, [areaSlug, isAuthenticated, isLoading]);\n\n  return (\n    <>\n      { loading && (\n        <section className=\"section\">\n          <div className=\"container\">\n            <LoadingSpinner />\n          </div>\n        </section>\n      )}\n      <section className={`section ${ loading ? \"is-hidden\" : \"\" }`}>\n        <div className=\"container\">\n          <div className=\"columns\">\n            <div className=\"column is-two-thirds\">\n              <h1 className=\"title is-spaced is-capitalized\">{ area?.title }</h1>\n              <h6 className=\"subtitle is-6\">{ area?.description }</h6>\n              <h6 className=\"subtitle is-6\">{ area?.approachDetails }</h6>\n            </div>\n            <div className=\"column\">\n              <div role=\"group\" className=\"tags is-capitalized\">\n                {area?.tags.map(tag => (\n                  <label key={ tag } className=\"tag is-primary\">\n                    { tag }\n                  </label>\n                ))} \n              </div>\n              <div className=\"buttons has-addons is-right\">\n                <ButtonCopyCoordinates\n                  latitude={ `${area?.latitude}` }\n                  longitude={ `${area?.longitude}` }\n                />\n                <Link\n                  to={ `/crags/${cragSlug}/areas/${areaSlug}/create-topo` }\n                  className=\"button is-rounded\"\n                >\n                  <span className=\"icon is-small\">\n                    <i className=\"fas fa-plus\"></i>\n                  </span>\n                  <span>Add Topo</span>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      { loading === false && area?.topos.length ? (\n        <section className=\"section\">\n          {area?.topos && area?.topos.map((topo) => (\n            <div key={ topo.slug } id={ topo.slug } className=\"container block\">\n              <div className=\"columns\">\n                <div className=\"column\">\n                  <TopoImage\n                    routes={ area.routes?.filter(route => route.topoId === topo.id) }\n                    background={ `${topo.image}` }\n                  />\n                </div>\n                <div className=\"column\">\n                  <div className=\"block is-flex is-justify-content-space-between is-align-items-center\">\n                    <span className=\"icon-text\">\n                      <span className=\"icon\">\n                        <i className=\"fas fa-compass\"></i>\n                      </span>\n                      <span className=\"is-capitalized\">{ getOrientationsTitleById(topo.orientationId) }</span>\n                    </span>\n                    <Link\n                      to={ `/crags/${cragSlug}/areas/${areaSlug}/topos/${topo.slug}/create-route` }\n                      className=\"button is-rounded\"\n                    >\n                      <span className=\"icon is-small\">\n                        <i className=\"fas fa-plus\"></i>\n                      </span>\n                      <span>Add Route</span>\n                    </Link>\n                  </div>\n                  { area.routes?.filter(route => route.topoId === topo.id).length ? (\n                    <div className=\"block box\">\n                      <AreaRoutesTable\n                        routes={ area.routes?.filter(route => route.topoId === topo.id) }\n                        loggedRoutes={ area.userLogs }\n                      />\n                    </div>\n                  ) : \"\" }\n                </div>\n              </div>\n            </div>\n          ))}\n        </section>\n      ) : \"\" }\n\n      { loading === false && area?.topos.length === 0 ? (\n        <section className=\"section\">\n          <div className=\"container box\">\n            <p><b>There's nothing here... YET!</b><br/>Click \"Add Topo\" above to start uploding images and drawing routes</p>\n          </div>\n        </section>\n      ) : \"\"}\n    </>\n  );\n}\n\nexport default AreaView;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crag/Crag.tsx",["268","269","270","271","272","273"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { HashLink } from \"react-router-hash-link\";\nimport { Area, Crag, Topo } from \"core/types\";\nimport { getCragBySlug } from \"../../api/crags\";\nimport AreaRoutesTable from \"../../components/AreaRoutesTable\";\nimport ButtonCopyCoordinates from \"../../components/ButtonCopyCoordinates\";\nimport CragMap from \"../../components/CragMap\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport TopoImage from \"../../components/TopoImage\";\nimport { popupError } from \"../../helpers/alerts\";\nimport { usePageTitle } from \"../../helpers/pageTitle\";\nimport { useGlobals } from \"../../api/globals\";\n\nfunction CragView() {\n  const { getAccessTokenSilently, isAuthenticated, isLoading } = useAuth0();\n  const { cragSlug } = useParams<{ cragSlug: string }>();\n  const { getOrientationsTitleById } = useGlobals();\n  const [loading, setLoading] = useState(true);\n  const [crag, setCrag] = useState<Crag>();\n  const [activeTab, setActiveTab] = useState(\"routes\");\n\n  usePageTitle(crag?.title);\n\n  useEffect(() => {\n    const doGetCrag = async () => {\n      setLoading(true);\n\n      try {\n        const token = isAuthenticated\n          ? await getAccessTokenSilently()\n          : \"\";\n        const newCrag = await getCragBySlug(cragSlug, token);\n        setCrag(newCrag);\n\n        if (newCrag.routes.length) {\n          setActiveTab(\"guide\");\n        } else {\n          setActiveTab(\"routes\");\n        }\n      } catch (error) {\n        console.error(\"Error loading crag\", error);\n        popupError(\"There was an error loading this crag. It's 90% your fault\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isLoading === false ) {\n      doGetCrag();\n    }\n  }, [cragSlug, isLoading, isAuthenticated]);\n\n  const areaTopos = (area: Area) => {\n    return crag?.topos.filter(topo => topo.areaId === area.id);\n  }\n\n  const topoRoutes = (topo: Topo) => {\n    return crag?.routes.filter(route => route.topoId === topo.id) || [];\n  }\n\n  return (\n    <>\n      { loading ? (\n        <section className=\"section\">\n          <div className=\"container\">\n            <LoadingSpinner />\n          </div>\n        </section>\n      ) : (\n        <>\n          { /*\n          { crag && crag.access === \"banned\" && (\n            <div className=\"notification is-danger\">\n              Climbing at this crag is <b>banned</b>, probably best to find somewhere else\n            </div>\n          )}\n          */}\n          <section className=\"section\">\n            <div className=\"container\">\n              <div className=\"columns\">\n                <div className=\"column is-two-thirds\">\n                  <h1 className=\"title is-spaced is-capitalized\">{ crag?.title }</h1>\n                  <h5 className=\"subtitle is-5\">{ crag?.description }</h5>\n                </div>\n                <div className=\"column\">\n                  <div role=\"group\" className=\"tags\">\n                    <label className=\"tag is-capitalized is-primary\">\n                      Access { crag?.access }\n                    </label>\n                    { crag?.tags?.map(tag => (\n                      <label key={ tag } className=\"tag is-primary is-capitalized\">\n                        { tag }\n                      </label>\n                    ))} \n                  </div>\n                  <div className=\"buttons is-right\">\n                    <ButtonCopyCoordinates\n                      latitude={ `${crag?.latitude}` }\n                      longitude={ `${crag?.longitude}` }\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n          <section className=\"section\">\n            <div className=\"tabs\">\n              <ul>\n                { crag?.routes.length ? (\n                  <li className={ activeTab === 'guide' ? 'is-active' : '' }>\n                    <a onClick={ () => setActiveTab('guide') }>Guide</a>\n                  </li>\n                ): \"\" }\n                <li className={ activeTab === 'routes' ? 'is-active' : '' }>\n                  <a onClick={ () => setActiveTab('routes') }>Routes</a>\n                </li>\n                <li className={ activeTab === 'areas' ? 'is-active' : '' }>\n                  <a onClick={ () => setActiveTab('areas') }>Areas</a>\n                </li>\n                <li className={ activeTab === 'approach' ? 'is-active' : '' }>\n                  <a onClick={ () => setActiveTab('approach') }>Approach</a>\n                </li>\n                <li className={ activeTab === 'map' ? 'is-active' : '' }>\n                  <a onClick={ () => setActiveTab('map') }>Map</a>\n                </li>\n              </ul>\n            </div>\n\n            { activeTab === \"guide\" && crag?.areas?.map(area => (\n              <div key={ area.slug } className=\"container\">\n                <div className=\"block\">\n                  <div className=\"columns\">\n                    <div className=\"column is-two-thirds\">\n                      <Link to={ `/crags/${crag.slug}/areas/${area.slug}` }>\n                        <h1 className=\"title\" style={{ whiteSpace: \"nowrap\" }}>{ area.title }</h1>\n                      </Link>\n                      <p className=\"subtitle is-6\">{ area.description }</p>\n                    </div>\n                    <div className=\"column\">\n                      <div className=\"tags is-capitalized\">\n                        { area.tags.map(tag => (\n                          <label key={ tag } className=\"tag\">{ tag }</label>\n                        ))}\n                      </div>\n                      <div className=\"buttons is-right\">\n                        <ButtonCopyCoordinates\n                          latitude={ area.latitude }\n                          longitude={ area.longitude }\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"block\">\n                  { areaTopos(area)?.map(topo => (\n                    <div key={ topo.slug } className={ `columns ${ topoRoutes(topo).length ? \"\" : \"is-hidden\" }` }>\n                      <div className=\"column\">\n                        <HashLink to={ `/crags/${crag.slug}/areas/${area.slug}#${topo.slug}` }>\n                          <TopoImage\n                            routes={ topoRoutes(topo) }\n                            background={ String(topo.image) }\n                          />\n                        </HashLink>\n                      </div>\n                      <div className=\"column\">\n                        <div className=\"is-flex is-justify-content-flex-end\">\n                          <span className=\"icon-text\">\n                            <span className=\"icon\">\n                              <i className=\"fas fa-compass\"></i>\n                            </span>\n                            <span className=\"is-capitalized\">{ getOrientationsTitleById(topo.orientationId) }</span>\n                          </span>\n                        </div>\n                        <div className=\"box mt-1\">\n                          <AreaRoutesTable\n                            routes={ topoRoutes(topo) }\n                            loggedRoutes= { crag.userLogs }\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <hr />\n              </div>\n            ))}\n\n            { activeTab === \"routes\" && (\n              <div id=\"routes\" className=\"container box\">\n                { crag?.routes.length ? (\n                  <AreaRoutesTable\n                    showIndex={ false }\n                    routes={ crag?.routes }\n                    loggedRoutes={ (crag && crag.userLogs) || [] }\n                  />\n                ) : (\n                  <p><b>This crag doesn't have any routes yet</b><br/>To start adding routes: you must first create an area, then upload a topo image</p>\n                )}\n              </div>\n            )}\n            { activeTab === \"routes\" && crag?.routes.length ? (\n              <p className=\"has-text-centered\"><b>Hint: </b>New routes can be added from an <b>areas</b> page</p>\n            ) : \"\"}\n\n            { activeTab === \"areas\" && (\n              <div id=\"areas\" className=\"container box\">\n                { crag?.areas.length ? (\n                  <table className=\"table is-fullwidth\">\n                    <thead>\n                      <tr>\n                        <th>Title</th>\n                        <th>Routes</th>\n                        <th>Logs</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      { crag?.areas?.map(area => (\n                        <tr key={ area.slug }>\n                          <td>\n                            <Link\n                              to={ `/crags/${cragSlug}/areas/${area.slug}` }\n                              className=\"is-capitalized\"\n                            >\n                              { area.title }\n                            </Link>\n                          </td>\n                          <td>{ area.routeCount }</td>\n                          <td>{ area.logCount }</td>\n                        </tr>\n                      )) }\n                    </tbody>\n                  </table>\n                ) : (\n                  <p><b>This crag doesn't have any areas yet</b><br/>Click below to start adding one</p>\n                )}\n                <div className=\"buttons is-centered\">\n                  <a className=\"button is-rounded\" href={ `/crags/${cragSlug}/create-area` }>\n                    <span className=\"icon is-small\">\n                      <i className=\"fas fa-plus\"></i>\n                    </span>\n                    <span>Add Area</span>\n                  </a>\n                </div>\n              </div>\n            )}\n\n            { activeTab === \"approach\" && (\n              <div id=\"approach\" className=\"container\">\n                <div className=\"box\">\n                  <h3 className=\"title\">Approach</h3>\n                  {(crag?.approachDetails &&\n                    <p>{ crag?.approachDetails }</p>)\n                    ||\n                    <p>No approach details have been given. Hopefully that means it's an easy walk in 🤷‍♂️</p>\n                  }\n                </div>\n                <div className=\"box\">\n                  <h3 className=\"title\">Access</h3>\n                  <span className=\"tag is-primary is-capitalized\">{ crag?.access }</span>\n                  <p>{ crag?.accessDetails }</p>\n                </div>\n              </div>\n            )}\n\n            { activeTab === \"map\" && crag && (\n              <CragMap crag={ crag } />\n            )}\n          </section>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default CragView;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags/Crags.tsx",["274"],"import React, { useEffect, useState } from 'react';\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { Link } from 'react-router-dom';\n\nimport { getCrags } from \"../../api/crags\";\nimport { CragBrief } from '../../../../core/types';\nimport LoadingSpinner from '../../components/LoadingSpinner';\n\nfunction Crags() {\n  const [crags, setCrags] = useState<CragBrief[]>([]);\n  const [loading, setLoading] = useState(false);\n  const { isAuthenticated, isLoading, getAccessTokenSilently } = useAuth0();\n\n  useEffect(() => {\n    if (isLoading === false) {\n      doGetCrags();\n    }\n  }, [isLoading, isAuthenticated]);\n\n  async function doGetCrags() {\n    try {\n      setLoading(true);\n      const token = isAuthenticated\n        ? await getAccessTokenSilently()\n        : \"\";\n      const crags = await getCrags(token).then(crags => crags.sort((cragA, cragB) => cragA.title > cragB.title ? 1 : -1));\n      setCrags(crags);\n    } catch (error) {\n      console.error('Error loading crags', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"block\">\n            <div className=\"field is-grouped\">\n              <div className=\"control is-expanded has-icons-left\">\n                <span className=\"icon is-icon-left\">\n                  <i className=\"fas fa-search\"></i>\n                </span>\n                <input\n                  className=\"input is-rounded\"\n                  type=\"text\"\n                  placeholder=\"Filter\"\n                />\n              </div>\n              <div className=\"control\">\n                <Link to=\"/create-crag\" className=\"button is-rounded\">\n                  <span className=\"icon is-small\">\n                    <i className=\"fas fa-plus\"></i>\n                  </span>\n                  <span>Add Crag</span>\n                </Link>\n              </div>\n            </div>\n          </div>\n          { loading && (\n            <div className=\"block\">\n              <LoadingSpinner />\n            </div>\n          )}\n          { crags.map(crag => (\n            <div key={ crag.slug } className=\"block\">\n              <Link key={ crag.slug } to={ `/crags/${crag.slug}` }>\n                <div className=\"block box\">\n                  <div className=\"is-flex is-flex-column\">\n                    <p className=\"is-capitalized\"><b>{ crag.title }</b></p>\n                    <div className=\"columns\">\n                      <div className=\"column\">\n                        <p className=\"is-capitalized\">{ crag.osmData.address.county }, { crag.osmData.address.country }</p>\n                      </div>\n                      <div className=\"column\">\n                        <div className=\"tags is-justify-content-flex-end\">\n                          <span className=\"tag\">Routes { crag.routeCount }</span>\n                          <span className=\"tag\">Areas { crag.areaCount }</span>\n                          <span className=\"tag\">Logs { crag.logCount }</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            </div>\n          ))}\n        </div>\n      </section>\n    </React.Fragment>\n  )\n}\n\nexport default Crags;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-area/CreateArea.tsx",["275"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { NewAreaSchema } from \"core/schemas\";\nimport { Crag } from \"core/types\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport * as yup from \"yup\";\nimport { areas, crags } from \"../../api\";\nimport { useGlobals } from \"../../api/globals\";\nimport { popupError, popupSuccess } from \"../../helpers/alerts\";\nimport { getCurrentPosition } from '../../helpers/geolocation';\n\nconst schema = NewAreaSchema(yup);\n\nfunction CreateArea() {\n  const history = useHistory();\n  const { getAccessTokenSilently } = useAuth0();\n  const { cragSlug } = useParams<{ cragSlug: string }>();\n  const { areaTags: tags } = useGlobals();\n  const [locationLoading, setLocationLoading] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [crag, setCrag] = useState<Crag>();\n\n  const { register, setValue, handleSubmit, errors, watch } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n    defaultValues: {\n      approachDetails: \"\",\n      description: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      tags: [] as string[],\n      title: \"\",\n    }\n  });\n\n  const watchTags = watch(\"tags\", []);\n\n  useEffect(() => {\n    const getCrag = async () => {\n      try {\n        const token = await getAccessTokenSilently();\n        const newCrag = await crags.getCragBySlug(cragSlug, token);\n        setCrag(newCrag);\n      } catch(error) {\n        console.error(\"Error getting area crag\", error);\n      }\n    }\n\n    getCrag();\n  }, [cragSlug]);\n\n  const btnFindMeOnClick = async () => {\n    setLocationLoading(true);\n\n    try {\n      const location = await getCurrentPosition();\n      setValue(\"latitude\", `${location.coords.latitude}`);\n      setValue(\"longitude\", `${location.coords.longitude}`);\n    } catch (error) {\n      console.error('Error loading user location', error);\n    } finally {\n      setLocationLoading(false);\n    }\n  }\n\n  const formOnSubmit = handleSubmit(async (formData) => {\n    setLoading(true);\n\n    try {\n      if (!crag) {\n        throw new Error(\"Cannot create new route, crag not found\");\n      }\n\n      const token = await getAccessTokenSilently();\n      const { slug: areaSlug } = await areas.createArea(\n        {\n          ...formData,\n          cragSlug,\n        },\n        token\n      );\n      await popupSuccess(\"Area Created!\");\n      history.push(`/crags/${cragSlug}/areas/${areaSlug}`);\n    } catch (error) {\n      console.error('Error creating crag', error);\n      popupError(\"Ahh, something has gone wrong...\");\n    } finally {\n      setLoading(false);\n    }\n  });\n\n  return (\n    <section className=\"section\">\n      <div className=\"container box\">\n        <form\n          onSubmit={ formOnSubmit }\n          style={{ display: \"flex\", flexDirection: \"column\" }}\n          autoComplete=\"off\"\n        >\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"title\">Title</label>\n            <div className=\"control\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"title\"\n                ref={ register }\n              />\n            </div>\n            <p className=\"help is-danger\">{ errors.title?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"description\">Description</label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                name=\"description\"\n                ref={ register }\n              ></textarea> \n            </div>\n            <p className=\"help is-danger\">{ errors.description?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"approachDetails\">Approach Details</label>\n            <div className=\"control\">\n              <textarea\n                id=\"approachDetails\"\n                className=\"textarea\"\n                name=\"approachDetails\"\n                ref={ register }\n              ></textarea> \n            </div>\n            <p className=\"help is-danger\">{ errors.approachDetails?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Tags</label>\n            <div className=\"field is-grouped is-grouped-multiline\">\n              <div role=\"group\" className=\"tags\">\n                {tags.map(tag => (\n                  <label\n                    key={ tag.id }\n                    className={`\n                      tag\n                      is-capitalized\n                      ${watchTags.includes(`${tag.id}`) ? \"is-primary\" : \"\"}\n                    `}\n                  >\n                    <input\n                      type=\"checkbox\"\n                      name=\"tags\"\n                      value={ tag.id }\n                      ref={ register }\n                      style={{ display: \"none\" }}\n                    />\n                    { tag.title }\n                  </label>\n                ))} \n              </div>\n            </div>\n            <p className=\"help is-danger\">{ (errors.tags as any)?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <div className=\"field\">\n              <label className=\"label\">Area Location</label>\n              <div className=\"field has-addons\">\n                <div className=\"control is-expanded has-icons-right\">\n                  <input\n                    disabled={ locationLoading }\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Latitude\"\n                    name=\"latitude\"\n                    ref={ register }\n                  />\n                </div>\n                <div className=\"control is-expanded has-icons-right\">\n                  <input\n                    disabled={ locationLoading }\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Logitude\"\n                    name=\"longitude\"\n                    ref={ register }\n                  />\n                </div>\n                <div className=\"control\">\n                  <button\n                    type=\"button\"\n                    className={`\n                      button\n                      ${locationLoading ? \"is-loading\" : \"\"}\n                    `}\n                    onClick={ () => btnFindMeOnClick() }\n                  >\n                    <span className=\"icon\">\n                      <i className=\"fas fa-map-marker-alt\"></i>\n                    </span>\n                    <span>Find Me</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"help is-danger\">{ errors.latitude?.message }</div>\n            <div className=\"help is-danger\">{ errors.longitude?.message }</div>\n          </div>\n          \n          <div className=\"field\">\n            <div className=\"field is-flex is-justified-end\">\n              <div className=\"control\">\n                <button type=\"submit\" className={`button is-primary ${loading ? \"is-loading\" : \"\"}`}>\n                  <span>Continue</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n}\n\nexport default CreateArea;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-crag/CreateCrag.tsx",["276","277"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { NewCragSchema } from \"core/schemas\";\nimport { useEffect, useState } from \"react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport * as yup from \"yup\";\nimport { crags, globals } from \"../../api\";\nimport { useGlobals } from \"../../api/globals\";\nimport { popupError, popupSuccess } from \"../../helpers/alerts\";\nimport { getCurrentPosition } from '../../helpers/geolocation';\nimport { reverseLookup } from '../../helpers/nominatim';\n\nconst schema = NewCragSchema(yup);\n\ntype CarPark = {\n  title: string;\n  latitude: string;\n  longitude: string;\n  description: string;\n}\n\nfunction CreateCrag() {\n  const history = useHistory();\n  const { getAccessTokenSilently } = useAuth0();\n  const { accessTypes, cragTags, rockTypes } = useGlobals();\n  const [carParkLocationLoadingIndex, setCarParkLocationLoadingIndex] = useState(-1);\n  const [cragLocationLoading, setCragLocationLoading] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { register, control, setValue, handleSubmit, errors, watch } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n    defaultValues: {\n      accessDetails: \"\",\n      accessTypeId: \"\",\n      approachDetails: \"\",\n      carParks: [{\n        description: \"\",\n        latitude: \"\",\n        longitude: \"\",\n        title: \"\",\n      }] as CarPark[],\n      description: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      rockTypeId: \"\",\n      tags: [] as string[],\n      title: \"\",\n    }\n  });\n\n  const {\n    fields: carParks,\n    append: appendCarPark,\n    remove: removeCarPark,\n    insert: insertCarPark\n  } = useFieldArray({\n    control,\n    name: \"carParks\"\n  });\n\n  const watchTags = watch(\"tags\", []);\n\n  const btnCragLocationFindMeOnClick = async () => {\n    setCragLocationLoading(true);\n\n    try {\n      const location = await getCurrentPosition();\n      setValue(\"latitude\", `${location.coords.latitude}`);\n      setValue(\"longitude\", `${location.coords.longitude}`);\n    } catch (error) {\n      console.error('Error loading user location', error);\n    } finally {\n      setCragLocationLoading(false);\n    }\n  }\n\n  const getCragNominatim = async (latitude: string, longitude: string) => {\n    const osmData = await reverseLookup(latitude, longitude);\n    return osmData;\n  }\n\n  const btnAddCarParkOnClick = () => {\n    appendCarPark({\n      title: \"\",\n      latitude: \"\",\n      longitude: \"\"\n    });\n  }\n\n  const btnRemoveCarParkOnClick = (index: number) => {\n    removeCarPark(index);\n  }\n\n  const btnCarParkFindMeOnClick = async (index: number) => {\n    setCarParkLocationLoadingIndex(index);\n    const location = await getCurrentPosition();\n    const newCarPark = {\n      ...carParks[index],\n      latitude: `${location.coords.latitude}`,\n      longitude: `${location.coords.longitude}`,\n    };\n\n    removeCarPark(index);\n    insertCarPark(index, newCarPark);\n\n    setCarParkLocationLoadingIndex(-1);\n  }\n\n  const formOnSubmit = handleSubmit(async (formData) => {\n    try {\n      setLoading(true);\n      const token = await getAccessTokenSilently();\n      const osmData = await getCragNominatim(formData.latitude, formData.longitude);\n      const { slug } = await crags.createCrag({ ...formData, osmData }, token);\n      await popupSuccess(\"Crag Created!\");\n      history.push(`/crags/${slug}`);\n    } catch (error) {\n      console.error('Error creating crag', error);\n\n      if (error.error === \"Unable to geocode\") {\n        popupError(\"Could not find geolocation data! Check the Crag location coordinates are correct and try again\");\n      } else {\n        popupError(\"Ahh, something has gone wrong...\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  });\n\n  return (\n    <section className=\"section\">\n      <div className=\"container box\">\n        <form\n          onSubmit={ formOnSubmit }\n          style={{ display: \"flex\", flexDirection: \"column\" }}\n          autoComplete=\"off\"\n        >\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"title\">Title</label>\n            <div className=\"control\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"title\"\n                ref={ register() }\n              />\n            </div>\n            <p className=\"help is-danger\">{ errors.title?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"description\">Description</label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                name=\"description\"\n                ref={ register }\n              ></textarea> \n            </div>\n            <p className=\"help is-danger\">{ errors.description?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Rock Type</label>\n            <div className=\"control is-expanded\">\n              <div className=\"select is-fullwidth\">\n                <select name=\"rockTypeId\" ref={ register }>\n                  <option key=\"\" value=\"\">Select One</option>\n                  {rockTypes.map(rockType => (\n                    <option key={ rockType.id } value={ rockType.id }>{ rockType.title }</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            <p className=\"help is-danger\">{ errors.rockTypeId?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"approachDetails\">Approach Notes</label>\n            <div className=\"control\">\n              <textarea\n                id=\"approachDetails\"\n                className=\"textarea\"\n                name=\"approachDetails\"\n                ref={ register }\n              ></textarea> \n            </div>\n            <p className=\"help is-danger\">{ errors.approachDetails?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Tags</label>\n            <div className=\"field is-grouped is-grouped-multiline\">\n              <div role=\"group\" className=\"tags\">\n                {cragTags.map(tag => (\n                  <label\n                    key={ tag.id }\n                    className={`\n                      tag\n                      is-capitalized\n                      ${watchTags.includes(`${tag.id}`) ? \"is-primary\" : \"\"}\n                    `}\n                  >\n                    <input type=\"checkbox\" name=\"tags\" value={ tag.id } ref={ register } style={{ display: \"none\" }} />\n                    { tag.title }\n                  </label>\n                ))} \n              </div>\n            </div>\n            <p className=\"help is-danger\">{ (errors.tags as any)?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <div className=\"field\">\n              <label className=\"label\">Crag Location</label>\n              <div className=\"field has-addons\">\n                <div className=\"control is-expanded has-icons-right\">\n                  <input\n                    disabled={ cragLocationLoading }\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Latitude\"\n                    name=\"latitude\"\n                    ref={ register }\n                  />\n                </div>\n                <div className=\"control is-expanded has-icons-right\">\n                  <input\n                    disabled={ cragLocationLoading }\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Logitude\"\n                    name=\"longitude\"\n                    ref={ register }\n                  />\n                </div>\n                <div className=\"control\">\n                  <button\n                    type=\"button\"\n                    className={`\n                      button\n                      ${cragLocationLoading ? \"is-loading\" : \"\"}\n                    `}\n                    onClick={ () => btnCragLocationFindMeOnClick() }\n                  >\n                    <span className=\"icon\">\n                      <i className=\"fas fa-map-marker-alt\"></i>\n                    </span>\n                    <span>Find Me</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"help is-danger\">{ errors.latitude?.message }</div>\n            <div className=\"help is-danger\">{ errors.longitude?.message }</div>\n          </div>\n          \n          <div className=\"field\">\n            <label className=\"label\">Parking Location</label>\n            {carParks.map((_carPark, index) => (\n              <div className=\"field\" key={ index }>\n                <div className=\"field has-addons\">\n                  <div className=\"control is-expanded has-icons-right\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Name\"\n                      className=\"input\"\n                      name={`carParks[${index}].title`}\n                      ref={ register({}) }\n                    />\n                  </div>\n                  {carParks.length && (\n                    <div className=\"control\">\n                      <button\n                        type=\"button\"\n                        className=\"button is-outlined\"\n                        onClick={ () => btnRemoveCarParkOnClick(index) }\n                      >\n                        <span className=\"icon\">\n                          <i className=\"fas fa-trash-alt\"></i>\n                        </span>\n                      </button>\n                    </div>\n                  )}\n                </div>\n                <p className=\"help is-danger\">{ errors.carParks?.[index]?.title?.message }</p>\n                <div className=\"field has-addons\">\n                  <div className=\"control is-expanded has-icons-right\">\n                    <input\n                      className=\"input\"\n                      type=\"text\"\n                      placeholder=\"Latitude\"\n                      name={`carParks[${index}].latitude`}\n                      ref={ register }\n                    />\n                  </div>\n                  <div className=\"control is-expanded has-icons-right\">\n                    <input\n                      className=\"input\"\n                      type=\"text\"\n                      placeholder=\"Longitude\"\n                      name={`carParks[${index}].longitude`}\n                      ref={ register }\n                    />\n                  </div>\n                  <div className=\"control\">\n                    <button\n                      type=\"button\"\n                      className={`\n                        button\n                        ${carParkLocationLoadingIndex === index ? \"is-loading\" : \"\"}\n                      `}\n                      onClick={ () => btnCarParkFindMeOnClick(index) }\n                    >\n                      <span className=\"icon\">\n                        <i className=\"fas fa-map-marker-alt\"></i>\n                      </span>\n                      <span>Find Me</span>\n                    </button>\n                  </div>\n                </div>\n                <div className=\"help is-danger\">{ errors.carParks?.[index]?.latitude?.message }</div>\n                <div className=\"help is-danger\">{ errors.carParks?.[index]?.longitude?.message }</div>\n                <div className=\"field\">\n                  <div className=\"control\">\n                    <textarea\n                      placeholder=\"Description\"\n                      className=\"textarea\"\n                      name={`carParks[${index}].description`}\n                      ref={ register }\n                    ></textarea> \n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"field\">\n            <div className=\"control\">\n              <button className=\"button\" type=\"button\" onClick={ btnAddCarParkOnClick }>\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-plus\"></i>\n                </span>\n                <span>Add Car Park</span>\n              </button>\n            </div>\n            {/**\n              <div className=\"help is-danger\">{ errors.carParks?.message }</div>\n            */}\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Access</label>\n            <div className=\"control is-expanded\">\n              <div className=\"select is-fullwidth\">\n                <select name=\"accessTypeId\" ref={ register }>\n                  <option key=\"\" value=\"\">Select One</option>\n                  {accessTypes.map(accessType => (\n                    <option key={ accessType.id } value={ accessType.id }>{ accessType.title }</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            <p className=\"help is-danger\">{ errors.accessTypeId?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"accessDetails\">Access Details</label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                name=\"accessDetails\"\n                ref={ register }\n              /> \n            </div>\n          </div>\n\n          <div className=\"field\">\n            <div className=\"field is-flex is-justified-end\">\n              <div className=\"control\">\n                <button type=\"submit\" className={`button is-primary ${loading ? \"is-loading\" : \"\"}`}>\n                  <span>Create Crag</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n}\n\nexport default CreateCrag\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-route/CreateRoute.tsx",["278"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { NewRouteScheme } from \"core/schemas\";\nimport { Area, RouteDrawing } from \"core/types\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from 'react-router-dom';\nimport * as yup from \"yup\";\nimport { areas, routes, topos } from \"../../api\";\nimport TopoCanvas from \"../../components/TopoCanvas\";\nimport { popupError, popupSuccess } from \"../../helpers/alerts\";\nimport { useGlobals } from \"../../api/globals\";\n\nconst schema = NewRouteScheme(yup);\n\nfunction CreateRoute() {\n  const history = useHistory();\n  const { getAccessTokenSilently, isAuthenticated } = useAuth0();\n  const { areaSlug, cragSlug, topoSlug } = useParams<{ areaSlug: string; cragSlug: string, topoSlug: string }>();\n  const { routeTags, routeTypes, gradingSystems } = useGlobals();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [area, setArea] = useState<Area | undefined>();\n  const [backgroundImageURL, setBackgroundImageURL] = useState(\"\");\n\n  const { register, getValues, setValue, handleSubmit, errors, watch } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n    defaultValues: {\n      areaSlug,\n      cragSlug,\n      description: \"\",\n      drawing: { path: [] },\n      gradeIndex: \"\",\n      gradingSystemId: \"\",\n      rating: -1,\n      routeTypeId: \"\",\n      tags: [] as string[],\n      title: \"\",\n      topoSlug,\n    }\n  });\n\n  const watchTags = watch(\"tags\", []);\n  const watchGradingSystem = watch(\"gradingSystemId\", \"\");\n\n  useEffect(() => {\n    const doGetArea = async () => {\n      try {\n        const token = isAuthenticated\n          ? await getAccessTokenSilently()\n          : \"\";\n        const area = await areas.getArea(areaSlug, token);\n        setArea(area);\n      } catch (error) {\n        console.error(\"Error loading area\", error);\n        popupError(\"Oh dear, there was a problem loading this area\");\n      }\n    };\n\n    const doGetTopo = async () => {\n      const topo = await topos.getTopo(topoSlug);\n      setBackgroundImageURL(`${topo.image}`);\n    }\n\n    doGetArea();\n    doGetTopo();\n  }, [areaSlug, isAuthenticated, topoSlug]);\n\n  const getGradesFromGradingSystem = (gradingSystemId: string): [string, number][] => {\n    const grades = gradingSystems.find(({ id }) => `${id}` === gradingSystemId)?.grades;\n    const gradesTitleValueMap = (grades || [])?.reduce((acc, cur, idx) => {\n      acc.set(cur, idx);\n      return acc;\n    }, new Map());\n\n    return Array.from(gradesTitleValueMap);\n  }\n\n  const onDrawingChanged = (drawing: RouteDrawing) => {\n    setValue(\"drawing\", JSON.stringify(drawing));\n  }\n\n  const formOnSubmit = handleSubmit(async (formData) => {\n    try {\n      setLoading(true);\n\n      if (!area) {\n        throw new Error(\"Error creating route, area not found\");\n      }\n\n      const token = await getAccessTokenSilently();\n      const { routeSlug } = await routes.createRoute(\n        {\n          ...formData,\n          rating: -1,\n        },\n        token\n      );\n      await popupSuccess(\"Route Created!\");\n      history.push(`/crags/${cragSlug}/areas/${areaSlug}#${routeSlug}`);\n    } catch (error) {\n      console.error('Error creating crag', error);\n      popupError(\"Ahh, something has gone wrong...\");\n    } finally {\n      setLoading(false);\n    }\n  });\n\n  return (\n    <>\n      <section className=\"section\">\n        <div className=\"container\">\n          <TopoCanvas\n            routes={ area?.routes?.filter(route => route.topoSlug === topoSlug) }\n            backgroundImageURL={ backgroundImageURL }\n            onDrawingChanged={ onDrawingChanged }\n          />\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container box\">\n          <form\n            onSubmit={ formOnSubmit }\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n            autoComplete=\"off\"\n          >\n            <input\n              className=\"is-hidden\"\n              name=\"topoSlug\"\n              defaultValue={ topoSlug }\n              ref={ register }\n            />\n            <input\n              className=\"is-hidden\"\n              name=\"drawing\"\n              ref={ register }\n            />\n            <div className=\"field\">\n              <label className=\"label\" htmlFor=\"title\">Title</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  name=\"title\"\n                  ref={ register }\n                />\n              </div>\n              <p className=\"help is-danger\">{ errors.title?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\" htmlFor=\"description\">Description</label>\n              <div className=\"control\">\n                <textarea\n                  className=\"textarea\"\n                  name=\"description\"\n                  ref={ register }\n                ></textarea> \n              </div>\n              <p className=\"help is-danger\">{ errors.description?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Tags</label>\n              <div className=\"field is-grouped is-grouped-multiline\">\n                <div role=\"group\" className=\"tags\">\n                  {routeTags.map(tag => (\n                    <label\n                      key={ tag.id }\n                      className={`\n                        tag\n                        is-capitalized\n                        ${watchTags.includes(`${tag.id}`) ? \"is-primary\" : \"\"}\n                      `}\n                    >\n                      <input\n                        type=\"checkbox\"\n                        name=\"tags\"\n                        value={ tag.id }\n                        ref={ register() }\n                        style={{ display: \"none\" }}\n                      />\n                      { tag.title }\n                    </label>\n                  ))} \n                </div>\n              </div>\n              <p className=\"help is-danger\">{ (errors.tags as any)?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Route Type</label>\n              <div className=\"control is-expanded\">\n                <div className=\"select is-fullwidth\">\n                  <select name=\"routeTypeId\" ref={ register }>\n                    {routeTypes.map((routeType) => (\n                      <option key={ routeType.id } value={ routeType.id }>{ routeType.title }</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <p className=\"help is-danger\">{ errors.routeTypeId?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Grading System</label>\n              <div className=\"control is-expanded\">\n                <div className=\"select is-fullwidth\">\n                  <select name=\"gradingSystemId\" ref={ register }>\n                    {gradingSystems.map((gradingSystem) => (\n                      <option key={ gradingSystem.title } value={ gradingSystem.id }>{ gradingSystem.title }</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              <p className=\"help is-danger\">{ errors.gradingSystemId?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Grade</label>\n              <div className=\"contro is-expandedl\">\n                <div className=\"select is-fullwidth\">\n                  <select name=\"gradeIndex\" ref={ register }>\n                    {watchGradingSystem\n                      && getGradesFromGradingSystem(getValues(\"gradingSystemId\"))?.map(grade => (\n                        <option key={ grade[1] } value={ grade[1] }>{ grade[0] }</option>\n                      ))\n                    }\n                  </select>\n                </div>\n              </div>\n              <p className=\"help is-danger\">{ errors.gradeIndex?.message }</p>\n            </div>\n\n            <div className=\"field\">\n              <div className=\"field is-flex is-justified-end\">\n                <div className=\"control\">\n                  <button\n                    className={ `button is-primary ${ loading ? \"is-loading\" : \"\" }` }\n                  >\n                    Create Route\n                  </button>\n                </div>\n              </div>\n            </div>\n          </form>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default CreateRoute;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-topo/CreateTopo.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/home/Home.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/profile/Profile.tsx",["279","280","281"],"import React, { useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport ProfileLogs from \"../../components/ProfileLogs\";\nimport ProfileLists from \"../../components/ProfileLists\";\nimport ProfileSettings from \"../../components/ProfileSettings\";\n\nfunction Profile() {\n  const { logout, user } = useAuth0();\n  const { name, picture, email } = user;\n  const [activeTab, setActiveTab] = useState(\"logs\");\n\n  return (\n    <>\n      <section className=\"section\">\n        <div className=\"container box\">\n          <div className=\"columns is-mobile is-multiline is-centered\">\n            <div className=\"column is-narrow\">\n              <img src={ picture } alt=\"profile\" />\n            </div>            \n            <div className=\"column\">\n              <div className=\"is-flex is-flex-column is-align-content-space-between\" style={{ height: \"100%\" }}>\n                <div className=\"is-flex-grow-1\">\n                  <span><b>Username </b> { name } </span>\n                  <br />\n                  <span><b>Email </b> { email } </span>\n                </div>\n                <div>\n                  <button className=\"button\" onClick={ () => logout() }>\n                    Logout\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"tabs\">\n          <ul>\n            <li className={ activeTab === \"logs\" ? \"is-active\" : \"\" }>\n              <a onClick={ () => setActiveTab(\"logs\") }>Logs</a>\n            </li>\n            <li className={ activeTab === \"lists\" ? \"is-active\" : \"\" }>\n              <a onClick={ () => setActiveTab(\"lists\") }>Lists</a>\n            </li>\n            <li className={ activeTab === \"settings\" ? \"is-active\" : \"\" }>\n              <a onClick={ () => setActiveTab(\"settings\") }>Settings</a>\n            </li>\n          </ul>\n        </div>\n        <div className={ `container ${ activeTab === \"logs\" ? \"\" : \"is-hidden\" }` }>\n          <ProfileLogs />\n        </div>\n        <div className={ `container ${ activeTab === \"lists\" ? \"\" : \"is-hidden\" }` }>\n          <ProfileLists />\n        </div>\n        <div className={ `container ${ activeTab === \"settings\" ? \"\" : \"is-hidden\" }` }>\n          <ProfileSettings />\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default Profile;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/route/Route.tsx",["282","283"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport { Route } from \"core/types\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { routes } from \"../../api\";\nimport { useGlobals } from \"../../api/globals\";\nimport { useUserPreferences } from \"../../api/profile\";\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport { RouteLogContext } from '../../components/RouteLogContext';\nimport TopoImage from \"../../components/TopoImage\";\nimport { popupError } from \"../../helpers/alerts\";\nimport { usePageTitle } from \"../../helpers/pageTitle\";\n\n\nfunction RoutePage() {\n  const { getAccessTokenSilently, isAuthenticated, isLoading } = useAuth0();\n  const { routeSlug } = useParams<{ cragSlug: string; areaSlug: string; topoSlug: string; routeSlug: string }>();\n  const [loading, setLoading] = useState(true);\n  const [route, setRoute] = useState<Route>();\n  const { convertGradeToUserPreference } = useUserPreferences();\n  const { getRouteTypeTitleById } = useGlobals();\n\n  const context = useContext(RouteLogContext);\n\n  usePageTitle(route?.title);\n\n  useEffect(() => {\n    const doGetRoute = async () => {\n      try {\n        setLoading(true);\n        const token = isAuthenticated\n          ? await getAccessTokenSilently()\n          : \"\";\n        const newRoute = await routes.getRoute(token, routeSlug);\n        setRoute(newRoute);\n      } catch (error) {\n        console.error(\"Error loading route\", error);\n        popupError(\"Oh dear, there was a problem loading this route\");\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    if (isLoading === false) {\n      doGetRoute();\n    }\n  }, [routeSlug, isAuthenticated, isLoading]);\n\n  const btnDoneOnClick = () => {\n    if (route) {\n      context.onSingleRouteDone(route);\n    }\n  }\n\n  const btnSaveToListOnClick = () => {\n    if (route) {\n      context.onSingleRouteAddToList(route);\n    }\n  }\n\n  const hasUserLoggedRoute = () => {\n    if (route) {\n      return route.userLogs.length\n        || context.routesJustLogged.findIndex(route => route.slug === routeSlug) !== -1;\n    }\n\n    return false;\n  }\n\n  return (\n    <>\n      { loading && (\n        <section className=\"section\">\n          <LoadingSpinner />\n        </section>\n      )}\n      <section className={ `section ${ loading ? \"is-hidden\" : \"\" }` }>\n        <div className=\"container\">\n          <div className=\"block\">\n            <div className=\"columns\">\n              <div className=\"column\">\n                <h1 className=\"title is-spaced is-capitalized is-whitespace-nowrap\">{ route?.title }</h1>\n                <h6 className=\"subtitle is-6\">\n                  { route ? convertGradeToUserPreference(parseInt(route.gradeIndex), route.gradingSystemId, route.routeTypeId) : \"\" }\n                  <span> </span>\n                  <span className=\"is-capitalized\">{ route ? getRouteTypeTitleById(route.routeTypeId) : \"\" }</span>\n                </h6>\n                <h6 className=\"subtitle is-6 is-capitalized\">{ route?.description }</h6>\n              </div>\n              <div className=\"column\">\n                <div className=\"is-flex is-flex-direction-column is-justify-content-space-between\" style={{ height: \"100%\" }}>\n                  <div className=\"is-flex is-justify-content-flex-end\">\n                    <div className=\"tags mb-1\">\n                      {route?.tags.map(tag => (\n                        <label key={ tag } className=\"tag is-primary is-capitalize\">\n                          { tag }\n                        </label>\n                      ))} \n                    </div>\n                  </div>\n                  <div className=\"field has-addons has-addons-right is-horizontal\">\n                    <p className=\"control\">\n                      <button className=\"button\">\n                        { hasUserLoggedRoute()\n                          ? (\n                            <>\n                              <span className=\"icon is-small\">\n                                <i className=\"fas fw fa-check\"></i>\n                              </span>\n                              <span>Done</span>\n                            </>\n                          )\n                          : (\n                            <>\n                              <span className=\"icon is-small\">\n                                <i className=\"fas fw fa-plus\"></i>\n                              </span>\n                              <span>Log Book</span>\n                            </>\n                          )\n                        }\n                      </button>\n                    </p>\n                    <p className=\"control\">\n                      <button className=\"button\" onClick={ btnSaveToListOnClick }>\n                        <span className=\"icon is-small\">\n                          <i className=\"fas fw fa-list\"></i>\n                        </span>\n                        <span>Save to List</span>\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"block\">\n            { route?.drawing\n              ? <TopoImage\n                  filter={ route.slug }\n                  routes={[route, ...route.siblingRoutes]}\n                  highlightedRouteSlug={ route.slug }\n                  background={ `${route.topoImage}` }\n                />\n              : \"\"\n            }\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default RoutePage;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/logs.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/crags.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/alerts.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/clipboard.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/pageTitle.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/geolocation.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/nominatim.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ButtonCopyCoordinates.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/AreaRoutesTable.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LoadingSpinner.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToLogModal.tsx",["284","285"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport React from \"react\";\nimport { useForm} from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { LogRequest, Route } from \"core/types\";\nimport { NewLogsSchema } from \"core/schemas\";\nimport { logs } from \"../api\";\nimport { popupError, toastSuccess } from \"../helpers/alerts\";\nimport Modal from \"./Modal\";\nimport \"./RoutesAddToLogModal.css\";\nimport { useUserPreferences } from \"../api/profile\";\nimport { useGlobals } from \"../api/globals\";\n\ninterface Props {\n  routes: Route[];\n  visible: boolean;\n  onCancel?: Function;\n  onConfirm?: Function;\n  onRoutesLogged?: Function\n}\n\nconst schema = NewLogsSchema(yup);\n\nfunction RoutesAddToLogModal({ routes, visible, onCancel, onConfirm, onRoutesLogged }: Props) {\n  const { getAccessTokenSilently } = useAuth0();\n  const { routeTags, gradingSystems } = useGlobals();\n  const { convertGradeToUserPreference, preferedGradingSystems } = useUserPreferences();\n\n  const { register,  handleSubmit, errors, watch } = useForm({\n    resolver: yupResolver(schema),\n    mode: \"onChange\"\n  });\n\n  const watchLogs = watch(\"logs\", []);\n\n  const getGradesFromGradingSystem = (gradingSystemId: string): [string, number][] => {\n    const grades = gradingSystems.find(({ id }) => id === gradingSystemId)?.grades;\n    const gradesTitleValueMap = (grades || [])?.reduce((acc, cur, idx) => {\n      acc.set(cur, idx);\n      return acc;\n    }, new Map());\n\n    return Array.from(gradesTitleValueMap);\n  }\n\n  const btnLogRoutesConfirmOnClick = handleSubmit(async data => {\n    await logRoutes(data.logs as LogRequest[]);\n\n    if (onRoutesLogged) {\n      onRoutesLogged();\n    }\n  });\n\n  const btnLogRoutesCancelOnClick = () => {\n    if (onCancel) {\n      onCancel();\n    }\n  }\n\n  const logRoutes = async (routes: LogRequest[]) => {\n    try {\n      const token = await getAccessTokenSilently();\n      await logs.logRoutes(routes, token);\n      toastSuccess(\"Routes Logged\");\n\n      if (onConfirm) {\n        onConfirm();\n      }\n    } catch (error) {\n      console.error(\"Error logging routes\", error);\n      popupError(\"Ah, there's been an error and those climbs could not be logged\");\n    }\n  }\n\n  return (\n    <Modal\n      btnCancelOnClick={ btnLogRoutesCancelOnClick }\n      btnConfirmOnClick={ btnLogRoutesConfirmOnClick }\n      btnConfirmText=\"Save to Log Book\"\n      title=\"Add Routes to Log Book\"\n      visible={ visible }\n    >\n      <form>\n        {routes && routes.map((route, index) => (\n          <div className=\"log-route-review-dropdown\" key={ route.slug }>\n            <input\n              id={ `chkRoute${route.slug}` }\n              type=\"radio\"\n              name=\"showLogRouteDetails\"\n              defaultChecked={ index === 0 ? true: false }\n            />\n            <label htmlFor={ `chkRoute${route.slug}` } className=\"label is-capitalized\">\n              {routes.length > 1 && (\n                <>\n                  <i className=\"far fas fa-chevron-up checked mr-2\"></i>\n                  <i className=\"far fas fa-chevron-down not-checked mr-2\"></i>\n                </>\n              )}\n              <span>{ route.title }</span>\n              <span className=\"has-text-danger\">{ errors.logs?.[index] ? \" Has Errors! \" : \"\" }</span>\n            </label>\n            <div>\n              <input\n                type=\"text\"\n                name={ `logs.[${index}].routeSlug` }\n                ref={ register({}) }\n                defaultValue={ route.slug }\n                className=\"is-hidden\"\n              />\n              <div className=\"field is-grouped\">\n                <div className=\"control\">\n                  <div className=\"field\">\n                    <label className=\"label\">Date Sent</label>\n                    <div className=\"control\">\n                      <input\n                        className=\"input\"\n                        type=\"date\"\n                        name={`logs.[${index}].dateSent`}\n                        ref={register({})}\n                        defaultValue={ new Date().toISOString().substr(0, 10) }\n                      />\n                    </div>\n                    <p className=\"help is-danger\">{ errors.logs?.[index]?.dateSent?.message }</p>\n                  </div>\n                </div>\n                <div className=\"control\">\n                  <div className=\"field\">\n                    <label className=\"label\">Grade</label>\n                    <div className=\"control\">\n                      <div className=\"select\">\n                        <select\n                          name={ `logs.[${index}].gradeTaken` }\n                          defaultValue={ route.gradeIndex }\n                          ref={ register({}) }\n                        >\n                          {getGradesFromGradingSystem(route!.routeTypeId)?.map(grade => (\n                            <option value={ grade[1] } key={ grade[1] }>\n                              { grade[0] }\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                    </div>\n                    <p className=\"help is-danger\">{ errors.logs?.[index]?.gradeTaken?.message }</p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"field is-grouped\">\n                <div className=\"control\">\n                  <div className=\"field\">\n                    <label className=\"label\">Stars</label>\n                    <div className=\"control\">\n                      <div className=\"select\">\n                        <select name={`logs.[${index}].stars`} ref={register({})}>\n                          <option value=\"0\">0</option>\n                          <option value=\"1\">1</option>\n                          <option value=\"2\">2</option>\n                          <option value=\"3\">3</option>\n                          <option value=\"4\">4</option>\n                          <option value=\"5\">5</option>\n                        </select>\n                      </div>\n                    </div>\n                    <p className=\"help is-danger\">{ errors.logs?.[index]?.stars?.message }</p>\n                  </div>\n                </div>\n                <div className=\"control\">\n                  <div className=\"field\">\n                    <label className=\"label\">Attempts</label>\n                    <div className=\"control\">\n                      <div className=\"select\">\n                        <select name={ `logs.[${index}].attempts` } ref={register({})}>\n                          <option value=\"0\">Flash</option>\n                          <option value=\"1\">1</option>\n                          <option value=\"2\">2</option>\n                          <option value=\"3\">3+</option>\n                        </select>\n                      </div>\n                    </div>\n                    <p className=\"help is-danger\">{ errors.logs?.[index]?.attempts?.message }</p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"field\">\n                <label className=\"label\">Comments</label>\n                <div className=\"control\">\n                  <textarea\n                    className=\"textarea\"\n                    name={ `logs.[${index}].comment` }\n                    ref={register({})} \n                  ></textarea>\n                </div>\n                <p className=\"help is-danger\">{ errors.logs?.[index]?.comment?.message }</p>\n              </div>\n              <div className=\"field\">\n                <label className=\"label\">Tags</label>\n                <div className=\"field is-grouped is-grouped-multiline\">\n                  <div role=\"group\" className=\"tags\">\n                    {routeTags.map(tag => (\n                      <label\n                        key={ tag.id }\n                        className={`\n                          tag\n                          is-capitalized\n                          ${watchLogs[index]?.tags?.includes(`${tag.id}`) ? \"is-primary\" : \"\"}\n                        `}\n                      >\n                        <input\n                          type=\"checkbox\"\n                          name={ `logs.[${index}].tags` }\n                          value={ tag.id }\n                          ref={ register() }\n                          style={{ display: \"none\" }}\n                        />\n                        { tag.title }\n                      </label>\n                    ))} \n                  </div>\n                </div>\n                <p className=\"help is-danger\">{ errors.logs?.[index]?.tags?.message }</p>\n              </div>\n            </div>\n          </div>\n        ))}\n      </form>\n    </Modal>\n  );\n}\n\nexport default RoutesAddToLogModal;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImage.tsx",["286"],"import React, {useEffect, useState} from \"react\";\nimport \"./TopoImage.css\";\nimport { SmoothPath } from \"../helpers/svg\";\nimport { Route, RouteDrawing } from \"../../../core/types\";\nimport TopoImageStartTag from \"./TopoImageStartTag\";\n\ninterface PropTypes {\n  filter?: string;\n  routes: Route[];\n  background: string;\n  highlightedRouteSlug?: string;\n}\n\nfunction TopoImage({ filter, routes, background, highlightedRouteSlug }: PropTypes) {\n  const [joinedRoutePaths, setJoinedRoutePaths] = useState<number[][][]>([]);\n  const [routeLabels, setRouteLabels] = useState<{ [key: string]: (string | number)[] }>({});\n\n  useEffect(() => {\n    const newJoinedRoutePaths = routes\n      .filter(route => filter ? route.slug === filter : true)\n      .map(route => {\n        return joinLinkedRoutes(route.drawing, routes);\n      });\n\n    setJoinedRoutePaths(newJoinedRoutePaths);\n  }, [routes, filter]);\n\n  useEffect(() => {\n    const newRouteLabels = { ...routeLabels };\n\n    joinedRoutePaths.forEach((path, index) => {\n      const startX = Math.floor(path[0][0]);\n      const startY = Math.floor(path[0][1]);\n      const endX = Math.floor(path[path.length - 1][0]);\n      const endY = Math.floor(path[path.length - 1][1]);\n\n      newRouteLabels[`${startX},${startY}`] = Array.from(\n        new Set([\n          ...(newRouteLabels[`${startX},${startY}`] || []),\n          index + 1\n        ])\n      );\n\n      newRouteLabels[`${endX},${endY}`] = Array.from(\n        new Set([\n          ...(newRouteLabels[`${endX},${endY}`] || []),\n          index + 1\n        ])\n      );\n    });\n\n    setRouteLabels(newRouteLabels);\n  }, [joinedRoutePaths]);\n\n  const getRouteStrokeOpacity = (routeSlug: string) => {\n    if (highlightedRouteSlug && highlightedRouteSlug === routeSlug) {\n      return 1;\n    } else if (!highlightedRouteSlug) {\n      return 1;\n    }\n\n    return 0.5;\n  }\n\n  const joinLinkedRoutes = (\n    routeDrawing: RouteDrawing,\n    routes: Route[],\n  ) => {\n    let joinedPathPoints: number[][] = [];\n\n    if (routeDrawing.linkFrom?.routeSlug) {\n      const linkFromPath = routes.find(route => route.slug === routeDrawing!.linkFrom!.routeSlug)!.drawing.path;\n      const joinIndex = linkFromPath?.findIndex(([x, y]) => {\n        return Math.abs(x - routeDrawing!.linkFrom!.x) <= 5 && Math.abs(y - routeDrawing!.linkFrom!.y) <= 5;\n      });\n      const slicedPath = linkFromPath!.slice(0, joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    joinedPathPoints = [...joinedPathPoints, ...routeDrawing.path];\n\n    if (routeDrawing.linkTo?.routeSlug) {\n      const linkToPath = routes.find(route => route.slug === routeDrawing!.linkTo!.routeSlug)!.drawing.path;\n      const joinIndex = linkToPath?.findIndex(([x, y]) => {\n        return Math.abs(x - routeDrawing!.linkTo!.x) <= 5 && Math.abs(y - routeDrawing!.linkTo!.y) <= 5;\n      });\n      const slicedPath = linkToPath!.slice(joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    return joinedPathPoints;\n  }\n\n  const filteredRoutes = () => {\n    return routes\n      .filter(route => filter ? route.slug === filter : true);\n  }\n\n  return (\n    <div className=\"area-topo-image\">\n      <img src={ background } alt=\"topo\"/>\n      <div className=\"area-topo-image--canvas\">\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 1000 1000\">\n          {filteredRoutes().map((route) => (\n            <path\n              key={ route.slug }\n              d={ SmoothPath(joinLinkedRoutes(route.drawing, routes)) }\n              fill=\"transparent\"\n              stroke=\"yellow\"\n              strokeWidth=\"4\"\n              strokeOpacity={ getRouteStrokeOpacity(`${route.slug}`) }\n            />\n          ))}\n          {Object.entries(routeLabels).map(([ coords, routes ], index) => (\n            <TopoImageStartTag\n              key={ index }\n              content={ routes.join(\", \") }\n              x={ parseInt(coords.split(\",\")[0], 10) }\n              y={ parseInt(coords.split(\",\")[1], 10) }\n            />\n          ))}\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nexport default TopoImage;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoCanvas.tsx",["287"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { Route } from \"../../../core/types\";\nimport { domToSvgPoint, ReducePath, SmoothPath } from \"../helpers/svg\";\nimport { RouteDrawing } from \"../../../core/types\";\n\nimport \"./TopoCanvas.css\";\n\nenum PointerState {\n  up = \"up\",\n  down = \"down\"\n}\n\nconst strokeColor = \"yellow\";\nconst strokeWidth = \"4\";\n\nfunction TopoCanvas({backgroundImageURL, onDrawingChanged, routes}: {backgroundImageURL: string; onDrawingChanged: Function, routes: Route[] | undefined}) {\n  const [finishXY, setFinishXY] = useState([-1, -1]);\n  const [linkFrom, setLinkFrom] = useState<{routeSlug: string; x: number; y: number;} | undefined>();\n  const [linkTo, setLinkTo] = useState<{routeSlug: string; x: number; y: number;} | undefined>();\n  const [pointerState, setPointerState] = useState<PointerState>(PointerState.up);\n  const [existingRoutes, setExistingRoutes] = useState<Map<string, number[][]>>(new Map());\n  const [routePath, setRoutePath] = useState<number[][]>();\n  const [completePath, setCompletePath] = useState<number[][]>([]);\n  const [routeDrawing, setRouteDrawing] = useState<RouteDrawing>();\n\n  const canvasElement = useRef<SVGSVGElement>(document.querySelector(\"svg\") as SVGSVGElement);\n\n  useEffect(() => {\n    if (canvasElement.current) {\n      canvasElement.current.addEventListener(\"touchstart\", event => {\n        event.preventDefault();\n      });\n    }\n  }, [canvasElement]);\n\n  useEffect(() => {\n    if (routes) {\n      const newExistingRoutes = new Map(existingRoutes);\n\n      routes.forEach(route => {\n        const existingRouteCoordinatesArray = route.drawing?.path;\n\n        if (existingRouteCoordinatesArray) {\n          newExistingRoutes.set(`${route.slug}`, existingRouteCoordinatesArray);\n        }\n      });\n\n      setExistingRoutes(newExistingRoutes);\n    }\n  }, [routes]);\n\n  function findRouteUnderPointer(x: number, y: number): {x: number; y: number; parentRouteSlug: string} | undefined {\n    let parentRoute;\n\n    existingRoutes.forEach((pathPoints, routeSlug) => {\n      pathPoints.forEach(([x1, y1]) => {\n        if (Math.abs(x - x1) <= 5 && Math.abs(y - y1) <= 5) {\n          parentRoute = ({x: x1, y: y1, parentRouteSlug: routeSlug});\n        }\n      });\n    });\n\n    return parentRoute;\n  }\n\n  // TODO 99% the same as in TopoImage.tsx\n  function joinLinkedRoutes(\n    routePath: number[][],\n    linkFrom: { routeSlug: string, x: number; y: number } | undefined,\n    linkTo: { routeSlug: string; x: number; y: number } | undefined,\n    routes: Map<string, number[][]>\n  ) {\n    let joinedPathPoints: number[][] = [];\n\n    if (linkFrom) {\n      const linkFromPath = routes.get(linkFrom.routeSlug);\n      const joinIndex = linkFromPath?.findIndex(([x, y]) => {\n        return Math.abs(x - linkFrom.x) <= 5 && Math.abs(y - linkFrom.y) <= 5;\n      });\n      const slicedPath = linkFromPath!.slice(0, joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    joinedPathPoints = [...joinedPathPoints, ...routePath];\n\n    if (linkTo) {\n      const linkToPath = routes.get(linkTo.routeSlug);\n      const joinIndex = linkToPath?.findIndex(([x, y]) => {\n        return Math.abs(x - linkTo.x) <= 5 && Math.abs(y - linkTo.y) <= 5;\n      });\n      const slicedPath = linkToPath!.slice(joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    return joinedPathPoints;\n  }\n\n  function onPointerDown() {\n    setPointerState(PointerState.down);\n    setFinishXY([ -1, -1 ]);\n    setLinkTo(undefined);\n    setRoutePath(undefined);\n    setRouteDrawing({\n      path: [],\n      linkFrom,\n      linkTo\n    });\n  }\n\n  function onPointerUp() {\n    setPointerState(PointerState.up);\n    onDrawingChanged(routeDrawing);\n  }\n\n  function onPointerMove({clientX, clientY}: PointerEvent) {\n    if (pointerState === PointerState.down) {\n      onPointerDrag({clientX, clientY});\n      return;\n    }\n\n    const {x, y} = domToSvgPoint({x: clientX, y: clientY}, canvasElement.current);\n    const targetRoute = findRouteUnderPointer(x, y);\n\n    if (targetRoute && pointerState === PointerState.up) {\n      setLinkFrom({\n        x: Math.round(x * 100) / 100,\n        y: Math.round(y * 100) / 100,\n        routeSlug: targetRoute.parentRouteSlug\n      });\n    } else {\n      setLinkFrom(undefined);\n    }\n  }\n\n  function onPointerDrag({clientX, clientY}: {clientX: number, clientY: number}) {\n    const {x, y} = domToSvgPoint({x: clientX, y: clientY}, canvasElement.current);\n    const targetRoute = findRouteUnderPointer(x, y);\n\n    if (targetRoute && pointerState === PointerState.down) {\n      setLinkTo({\n        x,\n        y,\n        routeSlug: targetRoute.parentRouteSlug\n      });\n    } else {\n      setLinkTo(undefined);\n    }\n\n    setRoutePath(routePath\n      ? [...routePath, [x, y]]\n      : [[x, y]]\n    );\n\n    setRouteDrawing({\n      path: routePath || [],\n      linkFrom: routeDrawing?.linkFrom,\n      linkTo\n    });\n\n    if (routePath) {\n      const completePath = joinLinkedRoutes(\n        routePath,\n        routeDrawing?.linkFrom,\n        routeDrawing?.linkTo,\n        existingRoutes\n      );\n\n      setFinishXY(completePath.slice(-1)[0]);\n      setCompletePath(ReducePath(completePath));\n    }\n  }\n\n  return (\n    <>\n      <div className=\"notification is-primary\">\n        Make sure to draw route lines from <strong>start to finish</strong>\n      </div>\n      <div id=\"canvas-container\">\n        <img id=\"canvas-bg\" src={backgroundImageURL} alt=\"topo drawing canvas\" />\n        <div id=\"canvas\">\n          <svg\n            ref={canvasElement}\n            width=\"100%\"\n            height=\"100%\"\n            viewBox=\"0 0 1000 1000\"\n            onPointerUp={onPointerUp}\n            onPointerMove={ event => onPointerMove(event as unknown as PointerEvent)}\n            onPointerDown={onPointerDown}\n          >\n            {existingRoutes && [...existingRoutes.keys()].map(key => (\n              <path\n                key={key}\n                d={SmoothPath(existingRoutes.get(key) as number[][])}\n                strokeWidth={strokeWidth}\n                stroke={strokeColor}\n                strokeOpacity={0.5}\n                fill=\"none\"\n              />\n            ))}\n            {routeDrawing?.path?.length && (\n              <path\n                d={SmoothPath(completePath)}\n                stroke={strokeColor}\n                strokeWidth={strokeWidth}\n                fill=\"none\"\n              />\n            )}\n            {finishXY[0] !== -1 && finishXY[1] !== -1 && routeDrawing?.path?.length && (\n              <foreignObject x={finishXY[0] - 15} y={finishXY[1] - 30} width=\"30px\" height=\"30px\">\n                <div style={{width: \"30px\", height: \"30px\", position: \"relative\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                  <div style={{background: \"rgba(0, 0, 0, 0.8)\", padding: \"5px\", borderRadius: \"50em\", position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0}}></div>\n                  <i style={{fontSize: \"1rem\", zIndex: 1, color: \"#fff\"}} className=\"fas fa-flag\"></i>\n                </div>\n              </foreignObject>\n            )}\n            {((linkFrom && pointerState === \"up\") || (linkTo && pointerState === \"down\")) && (\n              <foreignObject x={(pointerState === \"up\" ? linkFrom!.x : linkTo!.x) - 15} y={(pointerState === \"up\" ? linkFrom!.y : linkTo!.y) - 30} width=\"30px\" height=\"30px\">\n                <div style={{width: \"30px\", height: \"30px\", position: \"relative\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                  <div style={{background: \"rgba(0, 0, 0, 0.8)\", padding: \"5px\", borderRadius: \"50em\", position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0}}></div>\n                  <i style={{fontSize: \"1rem\", zIndex: 1, color: \"#fff\"}} className=\"fas fa-link\"></i>\n                </div>\n              </foreignObject>\n            )}\n          </svg>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default TopoCanvas;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLogs.tsx",["288"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Log } from \"core/types\";\nimport { logs } from \"../api\";\nimport { useUserPreferences } from \"../api/profile\";\nimport { popupError } from \"../helpers/alerts\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\nfunction ProfileLogs() {\n  const { getAccessTokenSilently, isLoading, isAuthenticated } = useAuth0();\n  const [loggedRoutes, setLoggedRoutes] = useState<Log[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { convertGradeToUserPreference } = useUserPreferences();\n\n  useEffect(() => {\n    const getProfileDate = async () => {\n      try {\n        setLoading(true);\n        const token = await getAccessTokenSilently();\n        const newLoggedRoutes = await logs.getProfileLogs(token);\n        setLoggedRoutes(newLoggedRoutes); \n      } catch (error) {\n        console.error(\"Error loading user profile\", error);\n        popupError(\"Something has gone wrong, your profile couldn't be loaded. sorry\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isLoading === false && isAuthenticated === true) {\n      getProfileDate();\n    }\n  }, [isLoading, isAuthenticated]);\n\n  return (\n    <>\n      { loading && ( <LoadingSpinner /> ) }\n      { !loading && !loggedRoutes.length ? (\n        <div className=\"block box\">\n          <p>It looks like you haven't logged any routes yet</p>\n        </div>\n      ) : \"\" }\n      { !loading && loggedRoutes.length ? (\n        <table className=\"box table is-fullwidth\">\n          <thead>\n            <tr>\n              <th>Route</th>\n              <th>Grade</th>\n              <th>Stars</th>\n              <th>Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            { loggedRoutes.map(log => (\n              <tr key={ log.id } >\n                <td>\n                  <Link to={ `/crags/${log.cragSlug}/areas/${log.areaSlug}/topo/${log.topoSlug}/routes/${log.routeSlug}` }>\n                    { log.routeTitle }\n                  </Link>\n                </td>\n                <td>{ convertGradeToUserPreference(parseInt(log.gradeTaken), log.gradingSystemId, log.routeTypeTitle) }</td>\n                <td>{ log.stars }</td>\n                <td>{ log.dateSent }</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : \"\" }\n    </>\n  );\n}\n\nexport default ProfileLogs;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/index.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/queryString.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/svg.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Modal.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImageStartTag.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/areas.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/globals.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/topos.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/uploads.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/routes.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags-map/CragsMap.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMap.tsx",["289","290"],"import { useEffect } from \"react\";\nimport { DateTime } from \"luxon\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css';\nimport \"leaflet.markercluster/dist/MarkerCluster.css\";\nimport \"leaflet.markercluster/dist/MarkerCluster.Default.css\";\n\nimport leaflet from \"leaflet\";\nimport \"leaflet.markercluster\";\nimport \"leaflet-defaulticon-compatibility\";\n\ninterface Props {\n  markers: leaflet.Marker[],\n  height?: string,\n  center?: [number, number],\n  zoom?: number\n}\n\nlet map: leaflet.Map;\n\nconst getTimeStamp = async () => {\n  const res = await fetch(\"https://tilecache.rainviewer.com/api/maps.json\");\n  const dates = await res.json();\n\n  return dates.pop();\n}\n\nfunction LeafletMap({ markers, height = \"600px\", center, zoom }: Props) {\n\n  useEffect(() => {\n    const initMap = async () => {\n      if (map?.off) {\n        map.off();\n        map.remove();\n      }\n\n      const tiles = leaflet.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxNativeZoom: 19,\n        maxZoom: 20,\n      });\n\n      // const timestamp = await getTimeStamp();\n      // const precipitationNow = leaflet.tileLayer(`https://tilecache.rainviewer.com/v2/radar/${timestamp}/256/{z}/{x}/{y}/2/1_1.png`, {\n      //   maxNativeZoom: 19,\n      //   maxZoom: 20,\n      // });\n\n      map = leaflet.map('map', {\n        layers: [tiles],\n        ...(center && { center }),\n        ...(zoom && { zoom })\n      });\n\n      if (!center && !zoom) {\n        map.fitWorld();\n      }\n\n      const markersLayer = leaflet.markerClusterGroup();\n\n      markers.forEach(marker => {\n        markersLayer.addLayer(marker);\n      });\n\n      map.addLayer(markersLayer);\n    }\n\n    initMap();\n  });\n\n  return <div id=\"map\" style={{ width: \"100%\", height }}></div>;\n}\n\nexport default LeafletMap;\n",["291","292"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/search/Search.tsx",["293"],"import Tippy from '@tippyjs/react';\nimport SearchBox from \"../../components/SearchBox\";\nimport SearchResults from \"../../components/SearchResults\";\n\nfunction Search() {\n  return (\n    <>\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title\">Search</h1>\n          <div className=\"field is-grouped\">\n            <div className=\"control is-expanded has-icons-left\">\n              <span className=\"icon is-icon-left\">\n                <i className=\"fas fa-search\"></i>\n              </span>\n              <SearchBox />\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container\">\n          <SearchResults />\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default Search;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResults.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchBox.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMapMarkerClusterGroup.jsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultCrag.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultArea.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResultRoute.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/CragMap.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RouteLogContext.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToListModal.tsx",["294"],"import { useAuth0} from \"@auth0/auth0-react\";\nimport { yupResolver} from \"@hookform/resolvers/yup\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm} from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { List, Route } from \"core/types\";\nimport { lists } from \"../api\";\nimport { popupError, toastSuccess } from \"../helpers/alerts\";\nimport Modal from \"./Modal\";\nimport \"./RoutesAddToLogModal.css\";\n\ninterface Props {\n  routes: Route[];\n  visible: boolean;\n  onCancel: Function;\n  onConfirm: Function;\n}\n\nfunction RoutesAddToListModal({ routes, visible, onCancel, onConfirm }: Props) {\n  const [userLists, setUserLists] = useState<List[]>([]);\n  const { getAccessTokenSilently } = useAuth0();\n\n  const { register, handleSubmit, setValue, errors, watch } = useForm({\n    resolver: yupResolver(yup.object().shape({\n      newOrExisting: yup.string().required(\"Required\").oneOf([\"new\", \"existing\"]),\n      title: yup.string()\n        .when(\"newOrExisting\", (newOrExisting: string) => {\n          if (newOrExisting === \"new\") {\n            return yup.string().required(\"Required\");\n          } else {\n            return yup.string();\n          }\n        }),\n      listSlug: yup.string()\n        .when(\"newOrExisting\", (newOrExisting: string) => {\n          if (newOrExisting === \"existing\") {\n            return yup.string().required(\"Required\");\n          } else {\n            return yup.string();\n          }\n        }),\n      routes: yup.array().of(yup.string())\n    })),\n    mode: \"onChange\",\n    defaultValues: {\n      newOrExisting: \"existing\",\n      title: \"\",\n      listSlug: \"\",\n    }\n  });\n\n  const watchNewOrExisting = watch(\"newOrExisting\");\n\n  useEffect(() => {\n    getUserLists();\n  }, []);\n\n  const getUserLists = async () => {\n    try {\n      const token = await getAccessTokenSilently();\n      const newUserLists = await lists.getLists(token);\n      setUserLists(newUserLists);\n    } catch (error) {\n      console.error(\"Error getting user lists\", error);\n    }\n  }\n\n  const createNewList = async (title: string) => {\n    try {\n      const token = await getAccessTokenSilently();\n      const { slug } = await lists.addList(token, title);\n\n      return slug;\n    } catch (error) {\n      console.error(\"Error creating new list\", error);\n      popupError(\"There was an error creating your new list, try again\");\n      throw error;\n    }\n  }\n\n  const addRoutesToList = async (listSlug: string) => {\n    try {\n      const token = await getAccessTokenSilently();\n      await lists.addRoutesToList(\n        token,\n        listSlug,\n        routes.map(route => ({\n          cragSlug: route.cragSlug,\n          areaSlug: route.areaSlug,\n          topoSlug: route.topoSlug,\n          routeSlug: route.slug\n        }))\n      );\n    } catch (error) {\n      console.error(\"Error creating new list\", error);\n      popupError(\"There was an error adding routes to your list, try again\");\n      throw error;\n    }\n  }\n\n  const btnSaveToListConfirmOnClick = handleSubmit(async data => {\n    try {\n      const listSlug = data.newOrExisting === \"new\"\n        ? await createNewList(data.title)\n        : data.listSlug;\n\n      getUserLists();\n      setValue(\"newOrExisting\", \"existing\");\n      setValue(\"listSlug\", listSlug);\n\n      await addRoutesToList(listSlug);\n\n      toastSuccess(\"Routes Saved to List\");\n      onConfirm();\n    } catch (error) {\n      console.error(\"Error saving routes to list\", error);\n    }\n  })\n\n  const btnSaveToListCancelOnClick = () => {\n    onCancel();\n  }\n\n  return (\n    <Modal\n      btnCancelOnClick={ btnSaveToListCancelOnClick }\n      btnConfirmOnClick={ btnSaveToListConfirmOnClick }\n      btnConfirmText=\"Save to List\"\n      title=\"Save Routes to List\"\n      visible={ visible }\n    >\n      <form>\n        <div className=\"field\">\n          <label className=\"label\">Save to</label>\n          <div className=\"control\">\n            <label className=\"radio\">\n              <input type=\"radio\" name=\"newOrExisting\" value=\"existing\" ref={ register } />\n              Existing List\n            </label>\n            <label className=\"radio\">\n              <input type=\"radio\" name=\"newOrExisting\" value=\"new\" ref={ register } placeholder=\"e.g. 'Projects' or 'Font 2021'\" />\n              New List\n            </label>\n          </div>\n        </div>\n\n        { watchNewOrExisting === \"existing\" && (\n          <div className=\"field\">\n            <label className=\"label\">List</label>\n            <div className=\"control is-expanded\">\n              <div className=\"select is-fullwidth\">\n                <select name=\"listSlug\" ref={ register }>\n                  {userLists.map(list => (\n                    <option key={ list.slug } value={ list.slug }>{ list.title }</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            <p className=\"help is-danger\">{ errors.listSlug?.message }</p>\n          </div>\n        )}\n\n        { watchNewOrExisting === \"new\" && (\n          <div className=\"field\">\n            <label className=\"label\">Title</label>\n            <div className=\"control\">\n              <input type=\"text\" className=\"input\" name=\"title\" ref={ register } />\n            </div>\n            <p className=\"help is-danger\">{ errors.title?.message }</p>\n          </div>\n        )}\n\n        <input\n          type=\"text\"\n          className=\"input is-hidden\"\n          name=\"routes\"\n          ref={ register }\n          defaultValue={ JSON.stringify(routes) }\n        />\n      </form>\n    </Modal>\n  );\n}\n\nexport default RoutesAddToListModal;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/lists.ts",["295"],"import { List, Route } from \"core/types\";\n\nexport async function addList(token: string, title: string): Promise<List> {\n  const res = await fetch(\"http://localhost:3001/dev/lists\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({ title }),\n  });\n\n  const json = await res.json();\n\n  if (res.status !== 200) {\n    throw json;\n  }\n\n  return json\n}\n\nexport async function addRoutesToList(\n  token: string, \n  listSlug: string, \n  routes: { \n    cragSlug: string; \n    areaSlug: string; \n    topoSlug: string; \n    routeSlug: string \n  }[]\n) {\n  const res = await fetch(`http://localhost:3001/dev/lists?listSlug=${listSlug}`, {\n    method: \"PATCH\",\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({ routes }),\n  });\n\n  const json = await res.json();\n\n  if (res.status !== 200) {\n    throw json;\n  }\n\n  return json\n}\n\nexport async function getLists(token: string): Promise<List[]> {\n  const res = await fetch(`http://localhost:3001/dev/lists`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  const json = await res.json();\n\n  if (res.status !== 200) {\n    throw json;\n  }\n\n  return json;\n}\n\nexport async function getList(token: string, listSlug: string): Promise<List> {\n  const res = await fetch(`http://localhost:3001/dev/lists/${listSlug}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  const json = await res.json();\n\n  if (res.status !== 200) {\n    throw json;\n  }\n\n  return json;\n}\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Footer.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/about/About.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLists.tsx",["296","297"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport { List, ListRoute } from \"core/types\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { lists } from \"../api\";\nimport { useUserPreferences } from \"../api/profile\";\nimport { popupError } from \"../helpers/alerts\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport Modal from \"./Modal\";\n\nfunction ProfileLists() {\n  const { getAccessTokenSilently, isLoading, isAuthenticated } = useAuth0();\n  const [userLists, setUserLists] = useState<List[]>([]);\n  const [activeList, setActiveList] = useState<List>();\n  const [loadingListView, setLoadingListView] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [listViewModalVisible, setListViewModalVisible] = useState(false);\n  const [viewingListSlug, setViewingListSlug] = useState(\"\");\n  const { convertGradeToUserPreference } = useUserPreferences();\n\n  useEffect(() => {\n    const getProfileDate = async () => {\n      try {\n        setLoading(true);\n        const token = await getAccessTokenSilently();\n        const newUserLists = await lists.getLists(token);\n        setUserLists(newUserLists); \n      } catch (error) {\n        console.error(\"Error loading user profile\", error);\n        popupError(\"Something has gone wrong, your profile couldn't be loaded. sorry\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (isLoading === false && isAuthenticated === true) {\n      getProfileDate();\n    }\n  }, [isLoading, isAuthenticated]);\n\n  const btnListRouteOnClick = async (listSlug: string) => {\n    try {\n      setViewingListSlug(listSlug);\n      setLoadingListView(true);\n      setListViewModalVisible(true);\n\n      const token = await getAccessTokenSilently();\n      const newActiveList = await lists.getList(token, listSlug);\n\n      setActiveList(newActiveList);\n    } catch (error) {\n    } finally {\n      setLoadingListView(false);\n    }\n  }\n\n  const modalTitle = () => {\n    return userLists.find(({ slug }) => slug === viewingListSlug)?.title;\n  }\n\n  return (\n    <>\n      <Modal\n        title={ `${modalTitle()}` }\n        visible={ listViewModalVisible }\n        btnConfirmOnClick={ () => setListViewModalVisible(false) }\n        btnCancelOnClick={ () => setListViewModalVisible(false) }\n        hasConfirmButton={ false }\n        btnCancelText=\"Close\"\n      >\n        <>\n          { loadingListView ? (\n            <LoadingSpinner />\n          ) : (\n            <table className=\"table is-fullwidth\">\n              <thead>\n                <tr>\n                  <th>Title</th>\n                  <th>Crag</th>\n                  <th>Type</th>\n                  <th>Grade</th>\n                </tr>\n              </thead>\n              <tbody>\n                { activeList?.routes.map(route => (\n                  <tr key={ route.slug }>\n                    <td>\n                      <Link to={`/crags/${route.cragSlug}/areas/${route.areaSlug}/topos/${route.topoSlug}/routes/${route.routeSlug}`}>\n                        { route.title }\n                      </Link>\n                    </td>\n                    <td>{ route.cragTitle }</td>\n                    <td>{ route.routeType }</td>\n                    <td>{ convertGradeToUserPreference(parseInt(route.grade), route.gradingSystemId, route.routeType) }</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </>\n      </Modal>\n      { loading && ( <LoadingSpinner /> ) }\n      { !loading && !userLists.length ? (\n        <div className=\"block box\">\n          <p>It looks like you haven't created any lists yet</p>\n        </div>\n      ) : \"\" }\n      { !loading && userLists.map(list => (\n        <div key={ list.slug } className=\"box block\" onClick={ () => btnListRouteOnClick(list.slug) }>\n          <p><b>{ list.title }</b></p>\n          <span className=\"tag\">Routes { list.routeCount }</span>\n        </div>\n      ))}\n    </>\n  )\n}\n\nexport default ProfileLists;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileSettings.tsx",["298","299"],"import { gradingSystems } from \"core/globals\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { profile } from \"../api\";\nimport { popupError, toastSuccess } from \"../helpers/alerts\";\n\nfunction ProfileSettings() {\n  const [preferedGradingSystems, setPreferedGradingSystems] = useState<{ [key: string]: string }>({});\n  const [loading, setLoading] = useState(false);\n  const { register, setValue, handleSubmit } = useForm();\n\n  useEffect(() => {\n    const getProfileSettings = async () => {\n      const newPreferedGradingSystems = await profile.getPreferedGradingSystems();\n      setValue(\"preferedGradingSystems.Boulder\", newPreferedGradingSystems.Boulder);\n      setValue(\"preferedGradingSystems.Sport\", newPreferedGradingSystems.Sport);\n      setValue(\"preferedGradingSystems.Trad\", newPreferedGradingSystems.Trad);\n    };\n\n    try {\n      getProfileSettings();\n    } catch (error) {\n      console.error(\"Error loading user profile settings\", error);\n      popupError(\"Something has gone wrong, try again or give up\");\n    }\n  }, []);\n\n  const formOnSubmit = handleSubmit(async data => {\n    try {\n      setLoading(true);\n      await profile.setPreferedGradingSystems(data.preferedGradingSystems);\n      toastSuccess(\"Preferences Updated\");\n    } catch (error) {\n      console.error(\"Error setting profile prefered grading systems\", error);\n      popupError(\"Sorry, something broke and your preferenced couldn't be updated\");\n    } finally {\n      setLoading(false);\n    }\n  });\n\n  const gradeOptions = () => {\n    return gradingSystems.map(gradingSystem => (\n      <option key={ gradingSystem.title } value={ gradingSystem.title }>{ gradingSystem.title }</option>\n    ));\n  }\n\n  return (\n    <div className=\"block box\">\n      <form className=\"form\" onSubmit={ formOnSubmit }>\n        <div className=\"field\">\n          <label className=\"label\">Bouldering Grading System</label>\n          <div className=\"control is-expanded\">\n            <div className=\"select is-fullwidth\">\n              <select\n                name=\"preferedGradingSystems.Boulder\"\n                defaultValue={ preferedGradingSystems[\"Boulder\"] }\n                ref={ register() }\n              >\n                { gradeOptions() }\n              </select>\n            </div>\n          </div>\n        </div>\n        <div className=\"field\">\n          <label className=\"label\">Sport Grading System</label>\n          <div className=\"control is-expanded\">\n            <div className=\"select is-fullwidth\">\n              <select\n                name=\"preferedGradingSystems.Sport\"\n                defaultValue={ preferedGradingSystems[\"Sport\"] }\n                ref={ register() }\n              >\n                { gradeOptions() }\n              </select>\n            </div>\n          </div>\n        </div>\n        <div className=\"field\">\n          <label className=\"label\">Trad Grading System</label>\n          <div className=\"control is-expanded\">\n            <div className=\"select is-fullwidth\">\n              <select\n                name=\"preferedGradingSystems.Trad\"\n                defaultValue={ preferedGradingSystems[\"Trad\"] }\n                ref={ register() }\n              >\n                { gradeOptions() }\n              </select>\n            </div>\n          </div>\n        </div>\n        <div className=\"field\">\n          <div className=\"control\">\n            <div className=\"buttons is-right\">\n              <button className={ `button is-primary ${ loading ? \"is-loading\" : \"\"}` }>Save</button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default ProfileSettings;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/profile.ts",["300"],"import { routeTypeDefaultGradingSystem } from \"core/globals\";\nimport { useEffect, useState } from \"react\";\nimport { useGlobals } from \"./globals\";\n\nexport async function getPreferedGradingSystems() {\n  const userPreferedGradingSystems = window.localStorage.getItem(\"preferedGradingSystems\");\n\n  if (userPreferedGradingSystems) {\n    return JSON.parse(userPreferedGradingSystems);\n  } else {\n    return routeTypeDefaultGradingSystem;\n  }\n}\n\nexport async function setPreferedGradingSystems(preferences: { [key: string]: string }) {\n  window.localStorage.setItem(\"preferedGradingSystems\", JSON.stringify(preferences));\n}\n\nexport const useUserPreferences = () => {\n  const { gradingSystems, routeTypes } = useGlobals();\n  const [preferedGradingSystems, setPreferedGradingSystems] = useState<{ [key: string]: string }>(routeTypeDefaultGradingSystem);\n\n  useEffect(() => {\n    const getGradingSystems = async () => {\n      const gradingSystems = await getPreferedGradingSystems();\n      setPreferedGradingSystems(gradingSystems);\n    };\n\n    getGradingSystems();\n  }, []);\n\n  const convertGradeToUserPreference = (gradeIndex: number, gradingSystemId: string, routeTypeId: string) => {\n    const routeGradingSystem = gradingSystems.find(({ id }) => id === gradingSystemId);\n\n    if (routeGradingSystem) {\n      return routeGradingSystem.grades[gradeIndex];\n    }\n  }\n\n  return {\n    convertGradeToUserPreference,\n    preferedGradingSystems,\n  };\n}\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/users.ts",[],{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","replacedBy":"304"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","replacedBy":"304"},{"ruleId":"305","severity":1,"message":"306","line":24,"column":9,"nodeType":"307","endLine":30,"endColumn":10},{"ruleId":"308","severity":1,"message":"309","line":43,"column":6,"nodeType":"310","endLine":43,"endColumn":44,"suggestions":"311"},{"ruleId":"308","severity":1,"message":"309","line":53,"column":6,"nodeType":"310","endLine":53,"endColumn":44,"suggestions":"312"},{"ruleId":"305","severity":1,"message":"306","line":113,"column":21,"nodeType":"307","endLine":113,"endColumn":64},{"ruleId":"305","severity":1,"message":"306","line":117,"column":19,"nodeType":"307","endLine":117,"endColumn":63},{"ruleId":"305","severity":1,"message":"306","line":120,"column":19,"nodeType":"307","endLine":120,"endColumn":62},{"ruleId":"305","severity":1,"message":"306","line":123,"column":19,"nodeType":"307","endLine":123,"endColumn":65},{"ruleId":"305","severity":1,"message":"306","line":126,"column":19,"nodeType":"307","endLine":126,"endColumn":60},{"ruleId":"308","severity":1,"message":"313","line":18,"column":6,"nodeType":"310","endLine":18,"endColumn":34,"suggestions":"314"},{"ruleId":"308","severity":1,"message":"309","line":52,"column":6,"nodeType":"310","endLine":52,"endColumn":16,"suggestions":"315"},{"ruleId":"316","severity":1,"message":"317","line":4,"column":10,"nodeType":"318","messageId":"319","endLine":4,"endColumn":19},{"ruleId":"316","severity":1,"message":"320","line":8,"column":17,"nodeType":"318","messageId":"319","endLine":8,"endColumn":24},{"ruleId":"308","severity":1,"message":"309","line":67,"column":6,"nodeType":"310","endLine":67,"endColumn":43,"suggestions":"321"},{"ruleId":"305","severity":1,"message":"306","line":41,"column":15,"nodeType":"307","endLine":41,"endColumn":57},{"ruleId":"305","severity":1,"message":"306","line":44,"column":15,"nodeType":"307","endLine":44,"endColumn":58},{"ruleId":"305","severity":1,"message":"306","line":47,"column":15,"nodeType":"307","endLine":47,"endColumn":61},{"ruleId":"308","severity":1,"message":"309","line":47,"column":6,"nodeType":"310","endLine":47,"endColumn":45,"suggestions":"322"},{"ruleId":"316","severity":1,"message":"323","line":49,"column":9,"nodeType":"318","messageId":"319","endLine":49,"endColumn":23},{"ruleId":"316","severity":1,"message":"324","line":28,"column":11,"nodeType":"318","messageId":"319","endLine":28,"endColumn":39},{"ruleId":"316","severity":1,"message":"325","line":28,"column":41,"nodeType":"318","messageId":"319","endLine":28,"endColumn":63},{"ruleId":"308","severity":1,"message":"326","line":53,"column":6,"nodeType":"310","endLine":53,"endColumn":24,"suggestions":"327"},{"ruleId":"308","severity":1,"message":"328","line":50,"column":6,"nodeType":"310","endLine":50,"endColumn":14,"suggestions":"329"},{"ruleId":"308","severity":1,"message":"309","line":34,"column":6,"nodeType":"310","endLine":34,"endColumn":34,"suggestions":"330"},{"ruleId":"316","severity":1,"message":"331","line":2,"column":10,"nodeType":"318","messageId":"319","endLine":2,"endColumn":18},{"ruleId":"316","severity":1,"message":"332","line":22,"column":7,"nodeType":"318","messageId":"319","endLine":22,"endColumn":19},{"ruleId":"301","replacedBy":"333"},{"ruleId":"303","replacedBy":"334"},{"ruleId":"316","severity":1,"message":"335","line":1,"column":8,"nodeType":"318","messageId":"319","endLine":1,"endColumn":13},{"ruleId":"308","severity":1,"message":"336","line":56,"column":6,"nodeType":"310","endLine":56,"endColumn":8,"suggestions":"337"},{"ruleId":"316","severity":1,"message":"338","line":1,"column":16,"nodeType":"318","messageId":"319","endLine":1,"endColumn":21},{"ruleId":"316","severity":1,"message":"339","line":2,"column":16,"nodeType":"318","messageId":"319","endLine":2,"endColumn":25},{"ruleId":"308","severity":1,"message":"309","line":39,"column":6,"nodeType":"310","endLine":39,"endColumn":34,"suggestions":"340"},{"ruleId":"316","severity":1,"message":"341","line":8,"column":34,"nodeType":"318","messageId":"319","endLine":8,"endColumn":59},{"ruleId":"308","severity":1,"message":"342","line":26,"column":6,"nodeType":"310","endLine":26,"endColumn":8,"suggestions":"343"},{"ruleId":"316","severity":1,"message":"344","line":20,"column":27,"nodeType":"318","messageId":"319","endLine":20,"endColumn":37},"no-native-reassign",["345"],"no-negated-in-lhs",["346"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAccessTokenSilently'. Either include it or remove the dependency array.","ArrayExpression",["347"],["348"],"React Hook useEffect has a missing dependency: 'doGetCrags'. Either include it or remove the dependency array.",["349"],["350"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'globals' is defined but never used.",["351"],["352"],"'btnDoneOnClick' is assigned a value but never used.","'convertGradeToUserPreference' is assigned a value but never used.","'preferedGradingSystems' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'routeLabels'. Either include it or remove the dependency array.",["353"],"React Hook useEffect has a missing dependency: 'existingRoutes'. Either include it or remove the dependency array.",["354"],["355"],"'DateTime' is defined but never used.","'getTimeStamp' is assigned a value but never used.",["345"],["346"],"'Tippy' is defined but never used.","React Hook useEffect has a missing dependency: 'getUserLists'. Either include it or remove the dependency array.",["356"],"'Route' is defined but never used.","'ListRoute' is defined but never used.",["357"],"'setPreferedGradingSystems' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["358"],"'routeTypes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},{"desc":"375","fix":"379"},{"desc":"380","fix":"381"},"Update the dependencies array to be: [areaSlug, getAccessTokenSilently, isAuthenticated, isLoading]",{"range":"382","text":"383"},"Update the dependencies array to be: [cragSlug, isLoading, isAuthenticated, getAccessTokenSilently]",{"range":"384","text":"385"},"Update the dependencies array to be: [isLoading, isAuthenticated, doGetCrags]",{"range":"386","text":"387"},"Update the dependencies array to be: [cragSlug, getAccessTokenSilently]",{"range":"388","text":"389"},"Update the dependencies array to be: [areaSlug, getAccessTokenSilently, isAuthenticated, topoSlug]",{"range":"390","text":"391"},"Update the dependencies array to be: [routeSlug, isAuthenticated, isLoading, getAccessTokenSilently]",{"range":"392","text":"393"},"Update the dependencies array to be: [joinedRoutePaths, routeLabels]",{"range":"394","text":"395"},"Update the dependencies array to be: [existingRoutes, routes]",{"range":"396","text":"397"},"Update the dependencies array to be: [isLoading, isAuthenticated, getAccessTokenSilently]",{"range":"398","text":"399"},"Update the dependencies array to be: [getUserLists]",{"range":"400","text":"401"},{"range":"402","text":"399"},"Update the dependencies array to be: [setValue]",{"range":"403","text":"404"},[1533,1571],"[areaSlug, getAccessTokenSilently, isAuthenticated, isLoading]",[1835,1873],"[cragSlug, isLoading, isAuthenticated, getAccessTokenSilently]",[583,611],"[isLoading, isAuthenticated, doGetCrags]",[1664,1674],"[cragSlug, getAccessTokenSilently]",[2215,2252],"[areaSlug, getAccessTokenSilently, isAuthenticated, topoSlug]",[1684,1723],"[routeSlug, isAuthenticated, isLoading, getAccessTokenSilently]",[1608,1626],"[joinedRoutePaths, routeLabels]",[1838,1846],"[existingRoutes, routes]",[1222,1250],"[isLoading, isAuthenticated, getAccessTokenSilently]",[1719,1721],"[getUserLists]",[1504,1532],[1079,1081],"[setValue]"]