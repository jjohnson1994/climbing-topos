[{"/Users/jamesjohnson/Projects/climbing-topos/app/src/index.js":"1","/Users/jamesjohnson/Projects/climbing-topos/app/src/reportWebVitals.js":"2","/Users/jamesjohnson/Projects/climbing-topos/app/src/App.tsx":"3","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Nav.tsx":"4","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/auth0-provider-with-history.tsx":"5","/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/protected-route.tsx":"6","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/area/Area.tsx":"7","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crag/Crag.tsx":"8","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags/Crags.tsx":"9","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-area/CreateArea.tsx":"10","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-crag/CreateCrag.tsx":"11","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-route/CreateRoute.tsx":"12","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-topo/CreateTopo.tsx":"13","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/home/Home.tsx":"14","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/profile/Profile.tsx":"15","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/route/Route.tsx":"16","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/logs.ts":"17","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/crags.ts":"18","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/alerts.ts":"19","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/clipboard.ts":"20","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/pageTitle.ts":"21","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/geolocation.ts":"22","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/nominatim.ts":"23","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ButtonCopyCoordinates.tsx":"24","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/AreaRoutesTable.tsx":"25","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LoadingSpinner.tsx":"26","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToLogModal.tsx":"27","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImage.tsx":"28","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoCanvas.tsx":"29","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLogs.tsx":"30","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/index.ts":"31","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/queryString.ts":"32","/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/svg.ts":"33","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Modal.tsx":"34","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImageStartTag.tsx":"35","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/areas.ts":"36","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/globals.ts":"37","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/topos.ts":"38","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/uploads.ts":"39","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/routes.ts":"40","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags-map/CragsMap.tsx":"41","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMap.tsx":"42","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/search/Search.tsx":"43","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResults.tsx":"44","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchBox.tsx":"45"},{"size":500,"mtime":1610219466488,"results":"46","hashOfConfig":"47"},{"size":362,"mtime":1610219466497,"results":"48","hashOfConfig":"47"},{"size":2930,"mtime":1610626700615,"results":"49","hashOfConfig":"47"},{"size":2438,"mtime":1610626164063,"results":"50","hashOfConfig":"47"},{"size":859,"mtime":1610219466465,"results":"51","hashOfConfig":"47"},{"size":330,"mtime":1610219466466,"results":"52","hashOfConfig":"47"},{"size":8072,"mtime":1610643907582,"results":"53","hashOfConfig":"47"},{"size":11328,"mtime":1610646956830,"results":"54","hashOfConfig":"47"},{"size":3298,"mtime":1610547286968,"results":"55","hashOfConfig":"47"},{"size":9784,"mtime":1610565221429,"results":"56","hashOfConfig":"47"},{"size":14326,"mtime":1610547878650,"results":"57","hashOfConfig":"47"},{"size":9357,"mtime":1610644472911,"results":"58","hashOfConfig":"47"},{"size":4953,"mtime":1610356859836,"results":"59","hashOfConfig":"47"},{"size":1661,"mtime":1610387278164,"results":"60","hashOfConfig":"47"},{"size":753,"mtime":1610219466495,"results":"61","hashOfConfig":"47"},{"size":4733,"mtime":1610644224539,"results":"62","hashOfConfig":"47"},{"size":2535,"mtime":1610279504733,"results":"63","hashOfConfig":"47"},{"size":1190,"mtime":1610547645736,"results":"64","hashOfConfig":"47"},{"size":1505,"mtime":1610219466477,"results":"65","hashOfConfig":"47"},{"size":99,"mtime":1610219466477,"results":"66","hashOfConfig":"47"},{"size":290,"mtime":1610448611947,"results":"67","hashOfConfig":"47"},{"size":369,"mtime":1610275063708,"results":"68","hashOfConfig":"47"},{"size":342,"mtime":1610219466479,"results":"69","hashOfConfig":"47"},{"size":966,"mtime":1610357269715,"results":"70","hashOfConfig":"47"},{"size":4329,"mtime":1610542404341,"results":"71","hashOfConfig":"47"},{"size":227,"mtime":1610219466469,"results":"72","hashOfConfig":"47"},{"size":11999,"mtime":1610549430321,"results":"73","hashOfConfig":"47"},{"size":3856,"mtime":1610542678563,"results":"74","hashOfConfig":"47"},{"size":7768,"mtime":1610542649628,"results":"75","hashOfConfig":"47"},{"size":1467,"mtime":1610551754424,"results":"76","hashOfConfig":"47"},{"size":246,"mtime":1610219466462,"results":"77","hashOfConfig":"47"},{"size":261,"mtime":1610219466486,"results":"78","hashOfConfig":"47"},{"size":1701,"mtime":1610219466487,"results":"79","hashOfConfig":"47"},{"size":1609,"mtime":1610219466470,"results":"80","hashOfConfig":"47"},{"size":1190,"mtime":1610219466476,"results":"81","hashOfConfig":"47"},{"size":857,"mtime":1610541443179,"results":"82","hashOfConfig":"47"},{"size":493,"mtime":1610278021922,"results":"83","hashOfConfig":"47"},{"size":1510,"mtime":1610356890305,"results":"84","hashOfConfig":"47"},{"size":313,"mtime":1610219466464,"results":"85","hashOfConfig":"47"},{"size":1047,"mtime":1610540528682,"results":"86","hashOfConfig":"47"},{"size":1267,"mtime":1610547263103,"results":"87","hashOfConfig":"47"},{"size":1954,"mtime":1610535980309,"results":"88","hashOfConfig":"47"},{"size":767,"mtime":1610629543112,"results":"89","hashOfConfig":"47"},{"size":667,"mtime":1610644985659,"results":"90","hashOfConfig":"47"},{"size":1768,"mtime":1610629710734,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1xj99ui",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"103"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"103"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"103"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"103"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"103"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"103"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"103"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jamesjohnson/Projects/climbing-topos/app/src/index.js",[],["191","192"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/reportWebVitals.js",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/App.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Nav.tsx",["193","194"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/auth0-provider-with-history.tsx",[],["195","196"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/auth/protected-route.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/area/Area.tsx",["197","198"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crag/Crag.tsx",["199","200","201","202","203"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags/Crags.tsx",["204","205"],"import React, { useEffect, useState } from 'react';\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { Link } from 'react-router-dom';\n\nimport CragQuickActions from \"../../components/CragQuickActions\";\nimport { getCrags } from \"../../api/crags\";\nimport { Crag } from '../../../../core/types';\nimport LoadingSpinner from '../../components/LoadingSpinner';\n\nfunction Crags() {\n  const [crags, setCrags] = useState<Crag[]>([]);\n  const [loading, setLoading] = useState(false);\n  const { isAuthenticated, isLoading, getAccessTokenSilently } = useAuth0();\n\n  useEffect(() => {\n    if (isLoading === false) {\n      doGetCrags();\n    }\n  }, [isLoading, isAuthenticated]);\n\n  async function doGetCrags() {\n    try {\n      setLoading(true);\n      const token = isAuthenticated\n        ? await getAccessTokenSilently()\n        : \"\";\n      const crags = await getCrags(token).then(crags => crags.sort((cragA, cragB) => cragA.title > cragB.title ? 1 : -1));\n      setCrags(crags);\n    } catch (error) {\n      console.error('Error loading crags', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title\">Find a Crag</h1>\n          <div className=\"field is-grouped\">\n            <div className=\"control is-expanded has-icons-left\">\n              <span className=\"icon is-icon-left\">\n                <i className=\"fas fa-search\"></i>\n              </span>\n              <input\n                className=\"input is-rounded\"\n                type=\"text\"\n                placeholder=\"Search\"\n              />\n            </div>\n            <div className=\"control\">\n              <Link to=\"/create-crag\" className=\"button is-rounded\">\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-plus\"></i>\n                </span>\n                <span>Add Crag</span>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            { loading && <LoadingSpinner /> }\n            <table className={ `table is-hoverable is-fullwidth ${ loading ? \"is-hidden\" : \"\" }` }>\n              <thead>\n                <tr>\n                  <td>Crag</td>\n                  <td>Routes</td>\n                  <td>Areas</td>\n                  <td>Ticks</td>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  crags.map(crag => (\n                    <tr key={ crag.slug }>\n                      <td>\n                        <Link \n                          className=\"is-capitalized\"\n                          to={`/crags/${crag.slug}`}\n                        >\n                          { crag.title }\n                        </Link>\n                      </td>\n                      <td><span>{ crag.routes.length }</span></td>\n                      <td><span>{ crag.areas.length } </span></td>\n                      <td><span>{ crag.logsCount }</span></td>\n                    </tr>\n                  ))\n                }\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </section>\n    </React.Fragment>\n  )\n}\n\nexport default Crags;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-area/CreateArea.tsx",["206"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { NewAreaSchema } from \"core/schemas\";\nimport { Crag } from \"core/types\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport * as yup from \"yup\";\nimport { areas, crags } from \"../../api\";\nimport { areaTags as tags, rockTypes } from \"core/globals\";\nimport { popupError, popupSuccess } from \"../../helpers/alerts\";\nimport { getCurrentPosition } from '../../helpers/geolocation';\n\nconst schema = NewAreaSchema(yup);\n\nfunction CreateArea() {\n  const history = useHistory();\n  const { getAccessTokenSilently } = useAuth0();\n  const { cragSlug } = useParams<{ cragSlug: string }>();\n  const [locationLoading, setLocationLoading] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [crag, setCrag] = useState<Crag>();\n\n  const { register, setValue, handleSubmit, errors, watch } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onChange',\n    defaultValues: {\n      access: \"unknown\",\n      accessDetails: \"\",\n      approachNotes: \"\",\n      description: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      rockType: \"\",\n      tags: [] as string[],\n      title: \"\",\n    }\n  });\n\n  const watchTags = watch(\"tags\", []);\n\n  useEffect(() => {\n    const getCrag = async () => {\n      try {\n        const token = await getAccessTokenSilently();\n        const newCrag = await crags.getCragBySlug(cragSlug, token);\n        setCrag(newCrag);\n      } catch(error) {\n        console.error(\"Error getting area crag\", error);\n      }\n    }\n\n    getCrag();\n  }, [cragSlug]);\n\n  const btnFindMeOnClick = async () => {\n    setLocationLoading(true);\n\n    try {\n      const location = await getCurrentPosition();\n      setValue(\"latitude\", `${location.coords.latitude}`);\n      setValue(\"longitude\", `${location.coords.longitude}`);\n    } catch (error) {\n      console.error('Error loading user location', error);\n    } finally {\n      setLocationLoading(false);\n    }\n  }\n\n  const formOnSubmit = handleSubmit(async (formData) => {\n    setLoading(true);\n\n    try {\n      if (!crag) {\n        throw new Error(\"Cannot create new route, crag not found\");\n      }\n\n      const token = await getAccessTokenSilently();\n      const { slug: areaSlug } = await areas.createArea(\n        {\n          ...formData,\n          country: crag.osmData.address.country,\n          countryCode: crag.osmData.address.country_code,\n          county: crag.osmData.address.county,\n          cragSlug,\n          cragTitle: crag.title,\n          state: crag.osmData.address.state,\n        },\n        token\n      );\n      await popupSuccess(\"Area Created!\");\n      history.push(`/crags/${cragSlug}/areas/${areaSlug}`);\n    } catch (error) {\n      console.error('Error creating crag', error);\n      popupError(\"Ahh, something has gone wrong...\");\n    } finally {\n      setLoading(false);\n    }\n  });\n\n  return (\n    <section className=\"section\">\n      <div className=\"container box\">\n        <form\n          onSubmit={ formOnSubmit }\n          style={{ display: \"flex\", flexDirection: \"column\" }}\n          autoComplete=\"off\"\n        >\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"title\">Title</label>\n            <div className=\"control\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"title\"\n                ref={ register }\n              />\n            </div>\n            <p className=\"help is-danger\">{ errors.title?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"description\">Description</label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                name=\"description\"\n                ref={ register }\n              ></textarea> \n            </div>\n            <p className=\"help is-danger\">{ errors.description?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"approachNotes\">Approach Notes</label>\n            <div className=\"control\">\n              <textarea\n                id=\"approachNotes\"\n                className=\"textarea\"\n                name=\"approachNotes\"\n                ref={ register }\n              ></textarea> \n            </div>\n            <p className=\"help is-danger\">{ errors.approachNotes?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Tags</label>\n            <div className=\"field is-grouped is-grouped-multiline\">\n              <div role=\"group\" className=\"tags\">\n                {tags.map(tag => (\n                  <label\n                    key={ tag }\n                    className={`\n                      tag\n                      ${watchTags?.includes(tag) ? \"is-primary\" : \"\"}\n                    `}\n                  >\n                    <input\n                      type=\"checkbox\"\n                      name=\"tags\"\n                      value={ tag }\n                      ref={ register }\n                      style={{ display: \"none\" }}\n                    />\n                    { tag }\n                  </label>\n                ))} \n              </div>\n            </div>\n            <p className=\"help is-danger\">{ (errors.tags as any)?.message }</p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Rock Type</label>\n            <div className=\"control is-expanded\">\n              <div className=\"select is-fullwidth\">\n                <select name=\"rockType\" ref={ register }>\n                  {rockTypes.map(rockType => (\n                    <option key={ rockType } value={ rockType }>{ rockType }</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            <p className=\"help is-danger\">{ errors.rockType?.message }</p>\n          </div>\n\n\n          <div className=\"field\">\n            <div className=\"field\">\n              <label className=\"label\">Area Location</label>\n              <div className=\"field has-addons\">\n                <div className=\"control is-expanded has-icons-right\">\n                  <input\n                    disabled={ locationLoading }\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Latitude\"\n                    name=\"latitude\"\n                    ref={ register }\n                  />\n                </div>\n                <div className=\"control is-expanded has-icons-right\">\n                  <input\n                    disabled={ locationLoading }\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Logitude\"\n                    name=\"longitude\"\n                    ref={ register }\n                  />\n                </div>\n                <div className=\"control\">\n                  <button\n                    type=\"button\"\n                    className={`\n                      button\n                      ${locationLoading ? \"is-loading\" : \"\"}\n                    `}\n                    onClick={ () => btnFindMeOnClick() }\n                  >\n                    <span className=\"icon\">\n                      <i className=\"fas fa-map-marker-alt\"></i>\n                    </span>\n                    <span>Find Me</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"help is-danger\">{ errors.latitude?.message }</div>\n            <div className=\"help is-danger\">{ errors.longitude?.message }</div>\n          </div>\n          \n          <div className=\"field\">\n            <label className=\"label\">Access</label>\n            <div className=\"control\">\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"unknown\"\n                  ref={ register }\n                />\n                Unknown\n              </label>\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"permitted\"\n                  ref={ register }\n                />\n                Permitted\n              </label>\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"restricted\"\n                  ref={ register }\n                />\n                Restricted\n              </label>\n              <label className=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"access\"\n                  value=\"banned\"\n                  ref={ register }\n                />\n                Banned\n              </label>\n            </div>\n            <p className=\"help is-danger\"></p>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\" htmlFor=\"accessDetails\">Access Details</label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                name=\"accessDetails\"\n                ref={ register }\n              /> \n            </div>\n          </div>\n\n          <div className=\"field\">\n            <div className=\"field is-flex is-justified-end\">\n              <div className=\"control\">\n                <button type=\"submit\" className={`button is-primary ${loading ? \"is-loading\" : \"\"}`}>\n                  <span>Continue</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </section>\n  );\n}\n\nexport default CreateArea;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-crag/CreateCrag.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-route/CreateRoute.tsx",["207"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/create-topo/CreateTopo.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/home/Home.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/profile/Profile.tsx",["208","209","210"],"import React, { useEffect, useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport ProfileLogs from \"../../components/ProfileLogs\";\n\nfunction Profile() {\n  const { logout, user } = useAuth0();\n  const { name, picture, email } = user;\n\n  return (\n    <>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1>{ name }</h1>\n            <img src={ picture } />\n            <h1>{ email }</h1>\n            <button className=\"button\" onClick={ () => logout() }>\n              Logout\n            </button>\n          </div>\n          <div className=\"box\">\n            <ProfileLogs />\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default Profile;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/route/Route.tsx",["211","212"],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/logs.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/crags.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/alerts.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/clipboard.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/pageTitle.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/geolocation.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/nominatim.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ButtonCopyCoordinates.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/AreaRoutesTable.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LoadingSpinner.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/RoutesAddToLogModal.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImage.tsx",["213"],"import React, {useEffect, useState} from \"react\";\nimport \"./TopoImage.css\";\nimport { SmoothPath } from \"../helpers/svg\";\nimport { Route, RouteDrawing } from \"../../../core/types\";\nimport TopoImageStartTag from \"./TopoImageStartTag\";\n\ninterface PropTypes {\n  routes: Route[];\n  background: string;\n  highlightedRouteSlug?: string;\n}\n\nfunction TopoImage({ routes, background, highlightedRouteSlug }: PropTypes) {\n  const [joinedRoutePaths, setJoinedRoutePaths] = useState<number[][][]>([]);\n  const [routeLabels, setRouteLabels] = useState<{ [key: string]: (string | number)[] }>({});\n\n  useEffect(() => {\n    const newJoinedRoutePaths = routes.map(route => {\n      return joinLinkedRoutes(route.drawing, routes);\n    });\n\n    setJoinedRoutePaths(newJoinedRoutePaths);\n  }, [routes]);\n\n  useEffect(() => {\n    const newRouteLabels = { ...routeLabels };\n\n    joinedRoutePaths.forEach((path, index) => {\n      const startX = Math.floor(path[0][0]);\n      const startY = Math.floor(path[0][1]);\n      const endX = Math.floor(path[path.length - 1][0]);\n      const endY = Math.floor(path[path.length - 1][1]);\n\n      newRouteLabels[`${startX},${startY}`] = Array.from(\n        new Set([\n          ...(newRouteLabels[`${startX},${startY}`] || []),\n          index + 1\n        ])\n      );\n\n      newRouteLabels[`${endX},${endY}`] = Array.from(\n        new Set([\n          ...(newRouteLabels[`${endX},${endY}`] || []),\n          index + 1\n        ])\n      );\n    });\n\n    setRouteLabels(newRouteLabels);\n  }, [joinedRoutePaths]);\n\n  const getRouteStrokeOpacity = (routeSlug: string) => {\n    if (highlightedRouteSlug && highlightedRouteSlug === routeSlug) {\n      return 1;\n    } else if (!highlightedRouteSlug) {\n      return 1;\n    }\n\n    return 0.5;\n  }\n\n  const joinLinkedRoutes = (\n    routeDrawing: RouteDrawing,\n    routes: Route[],\n  ) => {\n    let joinedPathPoints: number[][] = [];\n\n    if (routeDrawing.linkFrom?.routeSlug) {\n      const linkFromPath = routes.find(route => route.slug === routeDrawing!.linkFrom!.routeSlug)!.drawing.path;\n      const joinIndex = linkFromPath?.findIndex(([x, y]) => {\n        return Math.abs(x - routeDrawing!.linkFrom!.x) <= 5 && Math.abs(y - routeDrawing!.linkFrom!.y) <= 5;\n      });\n      const slicedPath = linkFromPath!.slice(0, joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    joinedPathPoints = [...joinedPathPoints, ...routeDrawing.path];\n\n    if (routeDrawing.linkTo?.routeSlug) {\n      const linkToPath = routes.find(route => route.slug === routeDrawing!.linkTo!.routeSlug)!.drawing.path;\n      const joinIndex = linkToPath?.findIndex(([x, y]) => {\n        return Math.abs(x - routeDrawing!.linkTo!.x) <= 5 && Math.abs(y - routeDrawing!.linkTo!.y) <= 5;\n      });\n      const slicedPath = linkToPath!.slice(joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    return joinedPathPoints;\n  }\n\n  return (\n    <div className=\"area-topo-image\">\n      <img src={ background } alt=\"topo\"/>\n      <div className=\"area-topo-image--canvas\">\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 1000 1000\">\n          {routes?.map((route) => (\n            <path\n              key={ route.slug }\n              d={ SmoothPath(joinLinkedRoutes(route.drawing, routes)) }\n              fill=\"transparent\"\n              stroke=\"yellow\"\n              strokeWidth=\"4\"\n              strokeOpacity={ getRouteStrokeOpacity(`${route.slug}`) }\n            />\n          ))}\n          {Object.entries(routeLabels).map(([ coords, routes ], index) => (\n            <TopoImageStartTag\n              key={ index }\n              content={ routes.join(\", \") }\n              x={ parseInt(coords.split(\",\")[0], 10) }\n              y={ parseInt(coords.split(\",\")[1], 10) }\n            />\n          ))}\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nexport default TopoImage;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoCanvas.tsx",["214"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { Route } from \"../../../core/types\";\nimport { domToSvgPoint, ReducePath, SmoothPath } from \"../helpers/svg\";\nimport { RouteDrawing } from \"../../../core/types\";\n\nimport \"./TopoCanvas.css\";\n\nenum PointerState {\n  up = \"up\",\n  down = \"down\"\n}\n\nconst strokeColor = \"yellow\";\nconst strokeWidth = \"4\";\n\nfunction TopoCanvas({backgroundImageURL, onDrawingChanged, routes}: {backgroundImageURL: string; onDrawingChanged: Function, routes: Route[] | undefined}) {\n  const [finishXY, setFinishXY] = useState([-1, -1]);\n  const [linkFrom, setLinkFrom] = useState<{routeSlug: string; x: number; y: number;} | undefined>();\n  const [linkTo, setLinkTo] = useState<{routeSlug: string; x: number; y: number;} | undefined>();\n  const [pointerState, setPointerState] = useState<PointerState>(PointerState.up);\n  const [existingRoutes, setExistingRoutes] = useState<Map<string, number[][]>>(new Map());\n  const [routePath, setRoutePath] = useState<number[][]>();\n  const [completePath, setCompletePath] = useState<number[][]>([]);\n  const [routeDrawing, setRouteDrawing] = useState<RouteDrawing>();\n\n  const canvasElement = useRef<SVGSVGElement>(document.querySelector(\"svg\") as SVGSVGElement);\n\n  useEffect(() => {\n    if (routes) {\n      const newExistingRoutes = new Map(existingRoutes);\n\n      routes.forEach(route => {\n        const existingRouteCoordinatesArray = route.drawing?.path;\n\n        if (existingRouteCoordinatesArray) {\n          newExistingRoutes.set(`${route.slug}`, existingRouteCoordinatesArray);\n        }\n      });\n\n      setExistingRoutes(newExistingRoutes);\n    }\n  }, [routes]);\n\n  function findRouteUnderPointer(x: number, y: number): {x: number; y: number; parentRouteSlug: string} | undefined {\n    let parentRoute;\n\n    existingRoutes.forEach((pathPoints, routeSlug) => {\n      pathPoints.forEach(([x1, y1]) => {\n        if (Math.abs(x - x1) <= 5 && Math.abs(y - y1) <= 5) {\n          parentRoute = ({x: x1, y: y1, parentRouteSlug: routeSlug});\n        }\n      });\n    });\n\n    return parentRoute;\n  }\n\n  // TODO 99% the same as in TopoImage.tsx\n  function joinLinkedRoutes(\n    routePath: number[][],\n    linkFrom: { routeSlug: string, x: number; y: number } | undefined,\n    linkTo: { routeSlug: string; x: number; y: number } | undefined,\n    routes: Map<string, number[][]>\n  ) {\n    let joinedPathPoints: number[][] = [];\n\n    if (linkFrom) {\n      const linkFromPath = routes.get(linkFrom.routeSlug);\n      const joinIndex = linkFromPath?.findIndex(([x, y]) => {\n        return Math.abs(x - linkFrom.x) <= 5 && Math.abs(y - linkFrom.y) <= 5;\n      });\n      const slicedPath = linkFromPath!.slice(0, joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    joinedPathPoints = [...joinedPathPoints, ...routePath];\n\n    if (linkTo) {\n      const linkToPath = routes.get(linkTo.routeSlug);\n      const joinIndex = linkToPath?.findIndex(([x, y]) => {\n        return Math.abs(x - linkTo.x) <= 5 && Math.abs(y - linkTo.y) <= 5;\n      });\n      const slicedPath = linkToPath!.slice(joinIndex);\n\n      joinedPathPoints = [...joinedPathPoints, ...slicedPath];\n    }\n\n    return joinedPathPoints;\n  }\n\n  function onPointerDown() {\n    setPointerState(PointerState.down);\n    setFinishXY([ -1, -1 ]);\n    setLinkTo(undefined);\n    setRoutePath(undefined);\n    setRouteDrawing({\n      path: [],\n      linkFrom,\n      linkTo\n    });\n  }\n\n  function onPointerUp() {\n    setPointerState(PointerState.up);\n    onDrawingChanged(routeDrawing);\n  }\n\n  function onPointerMove({clientX, clientY}: PointerEvent) {\n    if (pointerState === PointerState.down) {\n      onPointerDrag({clientX, clientY});\n      return;\n    }\n\n    const {x, y} = domToSvgPoint({x: clientX, y: clientY}, canvasElement.current);\n    const targetRoute = findRouteUnderPointer(x, y);\n\n    if (targetRoute && pointerState === PointerState.up) {\n      setLinkFrom({\n        x: Math.round(x * 100) / 100,\n        y: Math.round(y * 100) / 100,\n        routeSlug: targetRoute.parentRouteSlug\n      });\n    } else {\n      setLinkFrom(undefined);\n    }\n  }\n\n  function onPointerDrag({clientX, clientY}: {clientX: number, clientY: number}) {\n    const {x, y} = domToSvgPoint({x: clientX, y: clientY}, canvasElement.current);\n    const targetRoute = findRouteUnderPointer(x, y);\n\n    if (targetRoute && pointerState === PointerState.down) {\n      setLinkTo({\n        x,\n        y,\n        routeSlug: targetRoute.parentRouteSlug\n      });\n    } else {\n      setLinkTo(undefined);\n    }\n\n    setRoutePath(routePath\n      ? [...routePath, [x, y]]\n      : [[x, y]]\n    );\n\n    setRouteDrawing({\n      path: routePath || [],\n      linkFrom: routeDrawing?.linkFrom,\n      linkTo\n    });\n\n    if (routePath) {\n      const completePath = joinLinkedRoutes(\n        routePath,\n        routeDrawing?.linkFrom,\n        routeDrawing?.linkTo,\n        existingRoutes\n      );\n\n      setFinishXY(completePath.slice(-1)[0]);\n      setCompletePath(ReducePath(completePath));\n    }\n  }\n\n  return (\n    <>\n      <div className=\"notification is-primary\">\n        Make sure to draw route lines from <strong>start to finish</strong>\n      </div>\n      <div id=\"canvas-container\">\n        <img id=\"canvas-bg\" src={backgroundImageURL} alt=\"topo drawing canvas\" />\n        <div id=\"canvas\">\n          <svg\n            ref={canvasElement}\n            width=\"100%\"\n            height=\"100%\"\n            viewBox=\"0 0 1000 1000\"\n            onPointerUp={onPointerUp}\n            onPointerMove={e => onPointerMove(e as unknown as PointerEvent)}\n            onPointerDown={onPointerDown}\n          >\n            {existingRoutes && [...existingRoutes.keys()].map(key => (\n              <path\n                key={key}\n                d={SmoothPath(existingRoutes.get(key) as number[][])}\n                strokeWidth={strokeWidth}\n                stroke={strokeColor}\n                strokeOpacity={0.5}\n                fill=\"none\"\n              />\n            ))}\n            {routeDrawing?.path?.length && (\n              <path\n                d={SmoothPath(completePath)}\n                stroke={strokeColor}\n                strokeWidth={strokeWidth}\n                fill=\"none\"\n              />\n            )}\n            {finishXY[0] !== -1 && finishXY[1] !== -1 && routeDrawing?.path?.length && (\n              <foreignObject x={finishXY[0] - 15} y={finishXY[1] - 30} width=\"30px\" height=\"30px\">\n                <div style={{width: \"30px\", height: \"30px\", position: \"relative\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                  <div style={{background: \"rgba(0, 0, 0, 0.8)\", padding: \"5px\", borderRadius: \"50em\", position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0}}></div>\n                  <i style={{fontSize: \"1rem\", zIndex: 1, color: \"#fff\"}} className=\"fas fa-flag\"></i>\n                </div>\n              </foreignObject>\n            )}\n            {((linkFrom && pointerState === \"up\") || (linkTo && pointerState === \"down\")) && (\n              <foreignObject x={(pointerState === \"up\" ? linkFrom!.x : linkTo!.x) - 15} y={(pointerState === \"up\" ? linkFrom!.y : linkTo!.y) - 30} width=\"30px\" height=\"30px\">\n                <div style={{width: \"30px\", height: \"30px\", position: \"relative\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                  <div style={{background: \"rgba(0, 0, 0, 0.8)\", padding: \"5px\", borderRadius: \"50em\", position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0}}></div>\n                  <i style={{fontSize: \"1rem\", zIndex: 1, color: \"#fff\"}} className=\"fas fa-link\"></i>\n                </div>\n              </foreignObject>\n            )}\n          </svg>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default TopoCanvas;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/components/ProfileLogs.tsx",["215"],"import {useAuth0} from \"@auth0/auth0-react\";\nimport React from \"react\";\nimport {useEffect, useState} from \"react\";\nimport {Log} from \"../../../core/types\";\nimport {logs} from \"../api\";\nimport {popupError} from \"../helpers/alerts\";\n\nfunction ProfileLogs() {\n  const { getAccessTokenSilently, isLoading, isAuthenticated } = useAuth0();\n  const [loggedRoutes, setLoggedRoutes] = useState<Log[]>([]);\n\n  useEffect(() => {\n    const getProfileDate = async () => {\n      try {\n        const token = await getAccessTokenSilently();\n        const newLoggedRoutes = await logs.getProfileLogs(token);\n        setLoggedRoutes(newLoggedRoutes); \n      } catch (error) {\n        console.error(\"Error loading user profile\", error);\n        popupError(\"Something has gone wrong, your profile couldn't be loaded. sorry\");\n      }\n    };\n\n    if (isLoading === false && isAuthenticated === true) {\n      getProfileDate();\n    }\n  }, [isLoading, isAuthenticated]);\n\n  return (\n    <table className=\"table is-fullwidth\">\n      <thead>\n        <tr>\n          <th>Route</th>\n          <th>Grade</th>\n          <th>Stars</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        { loggedRoutes.map(log => (\n          <tr>\n            <td>{ log.routeTitle }</td>\n            <td>{ log.gradeTaken }</td>\n            <td>{ log.stars }</td>\n            <td>{ log.dateSent }</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default ProfileLogs;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/api/index.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/queryString.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/helpers/svg.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/Modal.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/TopoImageStartTag.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/areas.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/globals.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/topos.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/uploads.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/api/routes.ts",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/crags-map/CragsMap.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/LeafletMap.tsx",["216","217"],"import { useEffect } from \"react\";\nimport { DateTime } from \"luxon\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css';\nimport \"leaflet.markercluster/dist/MarkerCluster.css\";\nimport \"leaflet.markercluster/dist/MarkerCluster.Default.css\";\n\nimport leaflet from \"leaflet\";\nimport \"leaflet.markercluster\";\nimport \"leaflet-defaulticon-compatibility\";\n\ninterface Props {\n  markers: leaflet.Marker[],\n  height?: string,\n  center?: [number, number],\n  zoom?: number\n}\n\nlet map: leaflet.Map;\n\nconst getTimeStamp = async () => {\n  const res = await fetch(\"https://tilecache.rainviewer.com/api/maps.json\");\n  const dates = await res.json();\n\n  return dates.pop();\n}\n\nfunction LeafletMap({ markers, height = \"600px\", center, zoom }: Props) {\n\n  useEffect(() => {\n    const initMap = async () => {\n      if (map?.off) {\n        map.off();\n        map.remove();\n      }\n\n      const tiles = leaflet.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxNativeZoom: 19,\n        maxZoom: 20,\n      });\n\n      // const timestamp = await getTimeStamp();\n      // const precipitationNow = leaflet.tileLayer(`https://tilecache.rainviewer.com/v2/radar/${timestamp}/256/{z}/{x}/{y}/2/1_1.png`, {\n      //   maxNativeZoom: 19,\n      //   maxZoom: 20,\n      // });\n\n      map = leaflet.map('map', {\n        layers: [tiles],\n        ...(center && { center }),\n        ...(zoom && { zoom })\n      });\n\n      if (!center && !zoom) {\n        map.fitWorld();\n      }\n\n      const markersLayer = leaflet.markerClusterGroup();\n\n      markers.forEach(marker => {\n        markersLayer.addLayer(marker);\n      });\n\n      map.addLayer(markersLayer);\n    }\n\n    initMap();\n  });\n\n  return <div id=\"map\" style={{ width: \"100%\", height }}></div>;\n}\n\nexport default LeafletMap;\n","/Users/jamesjohnson/Projects/climbing-topos/app/src/pages/search/Search.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchResults.tsx",[],"/Users/jamesjohnson/Projects/climbing-topos/app/src/components/SearchBox.tsx",[],{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","severity":1,"message":"223","line":4,"column":10,"nodeType":"224","messageId":"225","endLine":4,"endColumn":19},{"ruleId":"226","severity":1,"message":"227","line":25,"column":9,"nodeType":"228","endLine":31,"endColumn":10},{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"229","severity":1,"message":"230","line":52,"column":6,"nodeType":"231","endLine":52,"endColumn":44,"suggestions":"232"},{"ruleId":"222","severity":1,"message":"233","line":54,"column":9,"nodeType":"224","messageId":"225","endLine":54,"endColumn":25},{"ruleId":"229","severity":1,"message":"230","line":55,"column":6,"nodeType":"231","endLine":55,"endColumn":44,"suggestions":"234"},{"ruleId":"226","severity":1,"message":"227","line":152,"column":19,"nodeType":"228","endLine":152,"endColumn":63},{"ruleId":"226","severity":1,"message":"227","line":155,"column":19,"nodeType":"228","endLine":155,"endColumn":62},{"ruleId":"226","severity":1,"message":"227","line":158,"column":19,"nodeType":"228","endLine":158,"endColumn":65},{"ruleId":"226","severity":1,"message":"227","line":161,"column":19,"nodeType":"228","endLine":161,"endColumn":60},{"ruleId":"222","severity":1,"message":"235","line":5,"column":8,"nodeType":"224","messageId":"225","endLine":5,"endColumn":24},{"ruleId":"229","severity":1,"message":"236","line":19,"column":6,"nodeType":"231","endLine":19,"endColumn":34,"suggestions":"237"},{"ruleId":"229","severity":1,"message":"230","line":54,"column":6,"nodeType":"231","endLine":54,"endColumn":16,"suggestions":"238"},{"ruleId":"229","severity":1,"message":"230","line":70,"column":6,"nodeType":"231","endLine":70,"endColumn":43,"suggestions":"239"},{"ruleId":"222","severity":1,"message":"240","line":1,"column":17,"nodeType":"224","messageId":"225","endLine":1,"endColumn":26},{"ruleId":"222","severity":1,"message":"241","line":1,"column":28,"nodeType":"224","messageId":"225","endLine":1,"endColumn":36},{"ruleId":"242","severity":1,"message":"243","line":15,"column":13,"nodeType":"228","endLine":15,"endColumn":36},{"ruleId":"222","severity":1,"message":"244","line":13,"column":63,"nodeType":"224","messageId":"225","endLine":13,"endColumn":80},{"ruleId":"229","severity":1,"message":"245","line":37,"column":6,"nodeType":"231","endLine":37,"endColumn":45,"suggestions":"246"},{"ruleId":"229","severity":1,"message":"247","line":50,"column":6,"nodeType":"231","endLine":50,"endColumn":24,"suggestions":"248"},{"ruleId":"229","severity":1,"message":"249","line":42,"column":6,"nodeType":"231","endLine":42,"endColumn":14,"suggestions":"250"},{"ruleId":"229","severity":1,"message":"230","line":27,"column":6,"nodeType":"231","endLine":27,"endColumn":34,"suggestions":"251"},{"ruleId":"222","severity":1,"message":"252","line":2,"column":10,"nodeType":"224","messageId":"225","endLine":2,"endColumn":18},{"ruleId":"222","severity":1,"message":"253","line":22,"column":7,"nodeType":"224","messageId":"225","endLine":22,"endColumn":19},"no-native-reassign",["254"],"no-negated-in-lhs",["255"],"@typescript-eslint/no-unused-vars","'SearchBox' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAccessTokenSilently'. Either include it or remove the dependency array.","ArrayExpression",["256"],"'btnCoordsOnClick' is assigned a value but never used.",["257"],"'CragQuickActions' is defined but never used.","React Hook useEffect has a missing dependency: 'doGetCrags'. Either include it or remove the dependency array.",["258"],["259"],["260"],"'useEffect' is defined but never used.","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'loginWithRedirect' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'areaSlug', 'cragSlug', 'getAccessTokenSilently', and 'topoSlug'. Either include them or remove the dependency array.",["261"],"React Hook useEffect has a missing dependency: 'routeLabels'. Either include it or remove the dependency array.",["262"],"React Hook useEffect has a missing dependency: 'existingRoutes'. Either include it or remove the dependency array.",["263"],["264"],"'DateTime' is defined but never used.","'getTimeStamp' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},"Update the dependencies array to be: [areaSlug, getAccessTokenSilently, isAuthenticated, isLoading]",{"range":"283","text":"284"},"Update the dependencies array to be: [cragSlug, isLoading, isAuthenticated, getAccessTokenSilently]",{"range":"285","text":"286"},"Update the dependencies array to be: [isLoading, isAuthenticated, doGetCrags]",{"range":"287","text":"288"},"Update the dependencies array to be: [cragSlug, getAccessTokenSilently]",{"range":"289","text":"290"},"Update the dependencies array to be: [areaSlug, getAccessTokenSilently, isAuthenticated, topoSlug]",{"range":"291","text":"292"},"Update the dependencies array to be: [routeSlug, isAuthenticated, isLoading, getAccessTokenSilently, cragSlug, areaSlug, topoSlug]",{"range":"293","text":"294"},"Update the dependencies array to be: [joinedRoutePaths, routeLabels]",{"range":"295","text":"296"},"Update the dependencies array to be: [existingRoutes, routes]",{"range":"297","text":"298"},"Update the dependencies array to be: [isLoading, isAuthenticated, getAccessTokenSilently]",{"range":"299","text":"300"},[1871,1909],"[areaSlug, getAccessTokenSilently, isAuthenticated, isLoading]",[1900,1938],"[cragSlug, isLoading, isAuthenticated, getAccessTokenSilently]",[639,667],"[isLoading, isAuthenticated, doGetCrags]",[1701,1711],"[cragSlug, getAccessTokenSilently]",[2304,2341],"[areaSlug, getAccessTokenSilently, isAuthenticated, topoSlug]",[1438,1477],"[routeSlug, isAuthenticated, isLoading, getAccessTokenSilently, cragSlug, areaSlug, topoSlug]",[1500,1518],"[joinedRoutePaths, routeLabels]",[1643,1651],"[existingRoutes, routes]",[916,944],"[isLoading, isAuthenticated, getAccessTokenSilently]"]